"use strict";(self.webpackChunk_lexical_website=self.webpackChunk_lexical_website||[]).push([[6125],{77142:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var t=n(31085),s=n(71184);const o={custom_edit_url:"https://github.com/facebook/lexical/tree/main/packages/lexical-markdown/README.md"},a="@lexical/markdown",i={id:"packages/lexical-markdown",title:"@lexical/markdown",description:"See API Documentation",source:"@site/docs/packages/lexical-markdown.md",sourceDirName:"packages",slug:"/packages/lexical-markdown",permalink:"/zh-Hant/docs/packages/lexical-markdown",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/lexical/tree/main/packages/lexical-markdown/README.md",tags:[],version:"current",frontMatter:{custom_edit_url:"https://github.com/facebook/lexical/tree/main/packages/lexical-markdown/README.md"},sidebar:"docs",previous:{title:"@lexical/mark",permalink:"/zh-Hant/docs/packages/lexical-mark"},next:{title:"@lexical/offset",permalink:"/zh-Hant/docs/packages/lexical-offset"}},l={},c=[{value:"Import and export",id:"import-and-export",level:2},{value:"Shortcuts",id:"shortcuts",level:2},{value:"Transformers",id:"transformers",level:2}];function d(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"lexicalmarkdown",children:(0,t.jsx)(r.code,{children:"@lexical/markdown"})})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.a,{href:"https://lexical.dev/docs/api/modules/lexical_markdown",children:(0,t.jsx)(r.img,{src:"https://lexical.dev/img/see-api-documentation.svg",alt:"See API Documentation"})})}),"\n",(0,t.jsx)(r.p,{children:"This package contains markdown helpers for Lexical: import, export and shortcuts."}),"\n",(0,t.jsx)(r.h2,{id:"import-and-export",children:"Import and export"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"import {\r\n  $convertFromMarkdownString,\r\n  $convertToMarkdownString,\r\n  TRANSFORMERS,\r\n} from '@lexical/markdown';\r\n\r\neditor.update(() => {\r\n  const markdown = $convertToMarkdownString(TRANSFORMERS);\r\n  ...\r\n});\r\n\r\neditor.update(() => {\r\n  $convertFromMarkdownString(markdown, TRANSFORMERS);\r\n});\n"})}),"\n",(0,t.jsxs)(r.p,{children:["It can also be used for initializing editor's state from markdown string. Here's an example with react ",(0,t.jsx)(r.code,{children:"<RichTextPlugin>"})]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-jsx",children:"<LexicalComposer initialConfig={{\r\n  editorState: () => $convertFromMarkdownString(markdown, TRANSFORMERS)\r\n}}>\r\n  <RichTextPlugin />\r\n</LexicalComposer>\n"})}),"\n",(0,t.jsx)(r.h2,{id:"shortcuts",children:"Shortcuts"}),"\n",(0,t.jsxs)(r.p,{children:["Can use ",(0,t.jsx)(r.code,{children:"<MarkdownShortcutPlugin>"})," if using React"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-jsx",children:"import { TRANSFORMERS } from '@lexical/markdown';\r\nimport {MarkdownShortcutPlugin} from '@lexical/react/LexicalMarkdownShortcutPlugin';\r\n\r\n<LexicalComposer>\r\n  <MarkdownShortcutPlugin transformers={TRANSFORMERS} />\r\n</LexicalComposer>\n"})}),"\n",(0,t.jsxs)(r.p,{children:["Or ",(0,t.jsx)(r.code,{children:"registerMarkdownShortcuts"})," to register it manually:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"import {\r\n  registerMarkdownShortcuts,\r\n  TRANSFORMERS,\r\n} from '@lexical/markdown';\r\n\r\nconst editor = createEditor(...);\r\nregisterMarkdownShortcuts(editor, TRANSFORMERS);\n"})}),"\n",(0,t.jsx)(r.h2,{id:"transformers",children:"Transformers"}),"\n",(0,t.jsxs)(r.p,{children:["Markdown functionality relies on transformers configuration. It's an array of objects that define how certain text or nodes\r\nare processed during import, export or while typing. ",(0,t.jsx)(r.code,{children:"@lexical/markdown"})," package provides set of built-in transformers:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"// Element transformers\r\nUNORDERED_LIST\r\nCODE\r\nHEADING\r\nORDERED_LIST\r\nQUOTE\r\n\r\n// Text format transformers\r\nBOLD_ITALIC_STAR\r\nBOLD_ITALIC_UNDERSCORE\r\nBOLD_STAR\r\nBOLD_UNDERSCORE\r\nINLINE_CODE\r\nITALIC_STAR\r\nITALIC_UNDERSCORE\r\nSTRIKETHROUGH\r\n\r\n// Text match transformers\r\nLINK\n"})}),"\n",(0,t.jsx)(r.p,{children:"And bundles of commonly used transformers:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"TRANSFORMERS"})," - all built-in transformers"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"ELEMENT_TRANSFORMERS"})," - all built-in element transformers"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"TEXT_FORMAT_TRANSFORMERS"})," - all built-in text format transformers"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"TEXT_MATCH_TRANSFORMERS"})," - all built-in text match transformers"]}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:"Transformers are explicitly passed to markdown API allowing application-specific subset of markdown or custom transformers."}),"\n",(0,t.jsx)(r.p,{children:"There're three types of transformers:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Element transformer"})," handles top level elements (lists, headings, quotes, tables or code blocks)"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Text format transformer"})," applies text range formats defined in ",(0,t.jsx)(r.code,{children:"TextFormatType"})," (bold, italic, underline, strikethrough, code, subscript and superscript)"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Text match transformer"})," relies on matching leaf text node content"]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:["See ",(0,t.jsx)(r.code,{children:"MarkdownTransformers.js"})," for transformer implementation examples"]})]})}function m(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},71184:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>i});var t=n(14041);const s={},o=t.createContext(s);function a(e){const r=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(o.Provider,{value:r},e.children)}}}]);