"use strict";(self.webpackChunk_lexical_website=self.webpackChunk_lexical_website||[]).push([[719],{39832:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>c,toc:()=>s});var r=n(31085),i=n(71184);const a={custom_edit_url:"https://github.com/facebook/lexical/tree/main/packages/lexical-react/README.md"},o="@lexical/react",c={id:"packages/lexical-react",title:"@lexical/react",description:"This package provides a set of components and hooks for Lexical that allow for text editing in React applications.",source:"@site/docs/packages/lexical-react.md",sourceDirName:"packages",slug:"/packages/lexical-react",permalink:"/zh-Hant/docs/packages/lexical-react",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/lexical/tree/main/packages/lexical-react/README.md",tags:[],version:"current",frontMatter:{custom_edit_url:"https://github.com/facebook/lexical/tree/main/packages/lexical-react/README.md"},sidebar:"docs",previous:{title:"@lexical/plain-text",permalink:"/zh-Hant/docs/packages/lexical-plain-text"},next:{title:"@lexical/rich-text",permalink:"/zh-Hant/docs/packages/lexical-rich-text"}},l={},s=[{value:"Getting started",id:"getting-started",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"lexicalreact",children:(0,r.jsx)(t.code,{children:"@lexical/react"})})}),"\n",(0,r.jsx)(t.p,{children:"This package provides a set of components and hooks for Lexical that allow for text editing in React applications."}),"\n",(0,r.jsx)(t.h2,{id:"getting-started",children:"Getting started"}),"\n",(0,r.jsxs)(t.p,{children:["Install ",(0,r.jsx)(t.code,{children:"lexical"})," and ",(0,r.jsx)(t.code,{children:"@lexical/react"}),":"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"npm install --save lexical @lexical/react\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Below is an example of a basic plain text editor using ",(0,r.jsx)(t.code,{children:"lexical"})," and ",(0,r.jsx)(t.code,{children:"@lexical/react"})," (",(0,r.jsx)(t.a,{href:"https://stackblitz.com/github/facebook/lexical/tree/main/examples/react-plain-text?embed=1&file=src%2FApp.tsx&terminalHeight=0&ctl=1&showSidebar=0&devtoolsheight=0&view=preview",children:"try it yourself"}),")."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-jsx",children:"import {$getRoot, $getSelection} from 'lexical';\r\nimport {useEffect} from 'react';\r\n\r\nimport {LexicalComposer} from '@lexical/react/LexicalComposer';\r\nimport {PlainTextPlugin} from '@lexical/react/LexicalPlainTextPlugin';\r\nimport {ContentEditable} from '@lexical/react/LexicalContentEditable';\r\nimport {HistoryPlugin} from '@lexical/react/LexicalHistoryPlugin';\r\nimport {OnChangePlugin} from '@lexical/react/LexicalOnChangePlugin';\r\nimport {useLexicalComposerContext} from '@lexical/react/LexicalComposerContext';\r\n\r\nconst theme = {\r\n  // Theme styling goes here\r\n  ...\r\n}\r\n\r\n// When the editor changes, you can get notified via the\r\n// LexicalOnChangePlugin!\r\nfunction onChange(editorState) {\r\n  editorState.read(() => {\r\n    // Read the contents of the EditorState here.\r\n    const root = $getRoot();\r\n    const selection = $getSelection();\r\n\r\n    console.log(root, selection);\r\n  });\r\n}\r\n\r\n// Lexical React plugins are React components, which makes them\r\n// highly composable. Furthermore, you can lazy load plugins if\r\n// desired, so you don't pay the cost for plugins until you\r\n// actually use them.\r\nfunction MyCustomAutoFocusPlugin() {\r\n  const [editor] = useLexicalComposerContext();\r\n\r\n  \r\n\r\nuseEffect(() => {\r\n    // Focus the editor when the effect fires!\r\n    editor.focus();\r\n  }, [editor]);\r\n\r\n  return null;\r\n}\r\n\r\n// Catch any errors that occur during Lexical updates and log them\r\n// or throw them as needed. If you don't throw them, Lexical will\r\n// try to recover gracefully without losing user data.\r\nfunction onError(error) {\r\n  throw error;\r\n}\r\n\r\nfunction Editor() {\r\n  const initialConfig = {\r\n    namespace: 'MyEditor',\r\n    theme,\r\n    onError,\r\n  };\r\n\r\nreturn (\r\n    <LexicalComposer initialConfig={initialConfig}>\r\n      <PlainTextPlugin\r\n        contentEditable={<ContentEditable />}\r\n        placeholder={<div>Enter some text...</div>}\r\n      />\r\n      <OnChangePlugin onChange={onChange} />\r\n      <HistoryPlugin />\r\n      <MyCustomAutoFocusPlugin />\r\n    </LexicalComposer>\r\n  );\r\n}\n"})})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},71184:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>c});var r=n(14041);const i={},a=r.createContext(i);function o(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);