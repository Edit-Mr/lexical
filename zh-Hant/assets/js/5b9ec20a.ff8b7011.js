"use strict";(self.webpackChunk_lexical_website=self.webpackChunk_lexical_website||[]).push([[7002],{89117:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>x,frontMatter:()=>t,metadata:()=>d,toc:()=>a});var l=i(31085),s=i(71184);const t={id:"lexical.LexicalNode",title:"Class: LexicalNode",custom_edit_url:null},r=void 0,d={id:"api/classes/lexical.LexicalNode",title:"Class: LexicalNode",description:"lexical.LexicalNode",source:"@site/i18n/zh-Hant/docusaurus-plugin-content-docs/current/api/classes/lexical.LexicalNode.md",sourceDirName:"api/classes",slug:"/api/classes/lexical.LexicalNode",permalink:"/zh-Hant/docs/api/classes/lexical.LexicalNode",draft:!1,unlisted:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"lexical.LexicalNode",title:"Class: LexicalNode",custom_edit_url:null},sidebar:"api",previous:{title:"LexicalEditor",permalink:"/zh-Hant/docs/api/classes/lexical.LexicalEditor"},next:{title:"LineBreakNode",permalink:"/zh-Hant/docs/api/classes/lexical.LineBreakNode"}},c={},a=[{value:"Hierarchy",id:"hierarchy",level:2},{value:"Constructors",id:"constructors",level:2},{value:"constructor",id:"constructor",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Defined in",id:"defined-in",level:4},{value:"Properties",id:"properties",level:2},{value:"constructor",id:"constructor-1",level:3},{value:"Defined in",id:"defined-in-1",level:4},{value:"importDOM",id:"importdom",level:3},{value:"Type declaration",id:"type-declaration",level:4},{value:"Returns",id:"returns-1",level:5},{value:"Defined in",id:"defined-in-2",level:4},{value:"Methods",id:"methods",level:2},{value:"afterCloneFrom",id:"afterclonefrom",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Defined in",id:"defined-in-3",level:4},{value:"createDOM",id:"createdom",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Defined in",id:"defined-in-4",level:4},{value:"createParentElementNode",id:"createparentelementnode",level:3},{value:"Returns",id:"returns-4",level:4},{value:"Defined in",id:"defined-in-5",level:4},{value:"exportDOM",id:"exportdom",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Defined in",id:"defined-in-6",level:4},{value:"exportJSON",id:"exportjson",level:3},{value:"Returns",id:"returns-6",level:4},{value:"Defined in",id:"defined-in-7",level:4},{value:"getCommonAncestor",id:"getcommonancestor",level:3},{value:"Type parameters",id:"type-parameters",level:4},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-7",level:4},{value:"Defined in",id:"defined-in-8",level:4},{value:"getIndexWithinParent",id:"getindexwithinparent",level:3},{value:"Returns",id:"returns-8",level:4},{value:"Defined in",id:"defined-in-9",level:4},{value:"getKey",id:"getkey",level:3},{value:"Returns",id:"returns-9",level:4},{value:"Defined in",id:"defined-in-10",level:4},{value:"getLatest",id:"getlatest",level:3},{value:"Returns",id:"returns-10",level:4},{value:"Defined in",id:"defined-in-11",level:4},{value:"getNextSibling",id:"getnextsibling",level:3},{value:"Type parameters",id:"type-parameters-1",level:4},{value:"Returns",id:"returns-11",level:4},{value:"Defined in",id:"defined-in-12",level:4},{value:"getNextSiblings",id:"getnextsiblings",level:3},{value:"Type parameters",id:"type-parameters-2",level:4},{value:"Returns",id:"returns-12",level:4},{value:"Defined in",id:"defined-in-13",level:4},{value:"getNodesBetween",id:"getnodesbetween",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-13",level:4},{value:"Defined in",id:"defined-in-14",level:4},{value:"getParent",id:"getparent",level:3},{value:"Type parameters",id:"type-parameters-3",level:4},{value:"Returns",id:"returns-14",level:4},{value:"Defined in",id:"defined-in-15",level:4},{value:"getParentKeys",id:"getparentkeys",level:3},{value:"Returns",id:"returns-15",level:4},{value:"Defined in",id:"defined-in-16",level:4},{value:"getParentOrThrow",id:"getparentorthrow",level:3},{value:"Type parameters",id:"type-parameters-4",level:4},{value:"Returns",id:"returns-16",level:4},{value:"Defined in",id:"defined-in-17",level:4},{value:"getParents",id:"getparents",level:3},{value:"Returns",id:"returns-17",level:4},{value:"Defined in",id:"defined-in-18",level:4},{value:"getPreviousSibling",id:"getprevioussibling",level:3},{value:"Type parameters",id:"type-parameters-5",level:4},{value:"Returns",id:"returns-18",level:4},{value:"Defined in",id:"defined-in-19",level:4},{value:"getPreviousSiblings",id:"getprevioussiblings",level:3},{value:"Type parameters",id:"type-parameters-6",level:4},{value:"Returns",id:"returns-19",level:4},{value:"Defined in",id:"defined-in-20",level:4},{value:"getTextContent",id:"gettextcontent",level:3},{value:"Returns",id:"returns-20",level:4},{value:"Defined in",id:"defined-in-21",level:4},{value:"getTextContentSize",id:"gettextcontentsize",level:3},{value:"Returns",id:"returns-21",level:4},{value:"Defined in",id:"defined-in-22",level:4},{value:"getTopLevelElement",id:"gettoplevelelement",level:3},{value:"Returns",id:"returns-22",level:4},{value:"Defined in",id:"defined-in-23",level:4},{value:"getTopLevelElementOrThrow",id:"gettoplevelelementorthrow",level:3},{value:"Returns",id:"returns-23",level:4},{value:"Defined in",id:"defined-in-24",level:4},{value:"getType",id:"gettype",level:3},{value:"Returns",id:"returns-24",level:4},{value:"Defined in",id:"defined-in-25",level:4},{value:"getWritable",id:"getwritable",level:3},{value:"Returns",id:"returns-25",level:4},{value:"Defined in",id:"defined-in-26",level:4},{value:"insertAfter",id:"insertafter",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-26",level:4},{value:"Defined in",id:"defined-in-27",level:4},{value:"insertBefore",id:"insertbefore",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"Returns",id:"returns-27",level:4},{value:"Defined in",id:"defined-in-28",level:4},{value:"is",id:"is",level:3},{value:"Parameters",id:"parameters-8",level:4},{value:"Returns",id:"returns-28",level:4},{value:"Defined in",id:"defined-in-29",level:4},{value:"isAttached",id:"isattached",level:3},{value:"Returns",id:"returns-29",level:4},{value:"Defined in",id:"defined-in-30",level:4},{value:"isBefore",id:"isbefore",level:3},{value:"Parameters",id:"parameters-9",level:4},{value:"Returns",id:"returns-30",level:4},{value:"Defined in",id:"defined-in-31",level:4},{value:"isDirty",id:"isdirty",level:3},{value:"Returns",id:"returns-31",level:4},{value:"Defined in",id:"defined-in-32",level:4},{value:"isInline",id:"isinline",level:3},{value:"Returns",id:"returns-32",level:4},{value:"Defined in",id:"defined-in-33",level:4},{value:"isParentOf",id:"isparentof",level:3},{value:"Parameters",id:"parameters-10",level:4},{value:"Returns",id:"returns-33",level:4},{value:"Defined in",id:"defined-in-34",level:4},{value:"isParentRequired",id:"isparentrequired",level:3},{value:"Returns",id:"returns-34",level:4},{value:"Defined in",id:"defined-in-35",level:4},{value:"isSelected",id:"isselected",level:3},{value:"Parameters",id:"parameters-11",level:4},{value:"Returns",id:"returns-35",level:4},{value:"Defined in",id:"defined-in-36",level:4},{value:"markDirty",id:"markdirty",level:3},{value:"Returns",id:"returns-36",level:4},{value:"Defined in",id:"defined-in-37",level:4},{value:"remove",id:"remove",level:3},{value:"Parameters",id:"parameters-12",level:4},{value:"Returns",id:"returns-37",level:4},{value:"Defined in",id:"defined-in-38",level:4},{value:"replace",id:"replace",level:3},{value:"Type parameters",id:"type-parameters-7",level:4},{value:"Parameters",id:"parameters-13",level:4},{value:"Returns",id:"returns-38",level:4},{value:"Defined in",id:"defined-in-39",level:4},{value:"selectEnd",id:"selectend",level:3},{value:"Returns",id:"returns-39",level:4},{value:"Defined in",id:"defined-in-40",level:4},{value:"selectNext",id:"selectnext",level:3},{value:"Parameters",id:"parameters-14",level:4},{value:"Returns",id:"returns-40",level:4},{value:"Defined in",id:"defined-in-41",level:4},{value:"selectPrevious",id:"selectprevious",level:3},{value:"Parameters",id:"parameters-15",level:4},{value:"Returns",id:"returns-41",level:4},{value:"Defined in",id:"defined-in-42",level:4},{value:"selectStart",id:"selectstart",level:3},{value:"Returns",id:"returns-42",level:4},{value:"Defined in",id:"defined-in-43",level:4},{value:"updateDOM",id:"updatedom",level:3},{value:"Parameters",id:"parameters-16",level:4},{value:"Returns",id:"returns-43",level:4},{value:"Defined in",id:"defined-in-44",level:4},{value:"clone",id:"clone",level:3},{value:"Parameters",id:"parameters-17",level:4},{value:"Returns",id:"returns-44",level:4},{value:"Defined in",id:"defined-in-45",level:4},{value:"getType",id:"gettype-1",level:3},{value:"Returns",id:"returns-45",level:4},{value:"Defined in",id:"defined-in-46",level:4},{value:"importJSON",id:"importjson",level:3},{value:"Parameters",id:"parameters-18",level:4},{value:"Returns",id:"returns-46",level:4},{value:"Defined in",id:"defined-in-47",level:4},{value:"transform",id:"transform",level:3},{value:"Returns",id:"returns-47",level:4},{value:"Defined in",id:"defined-in-48",level:4}];function h(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",h5:"h5",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/modules/lexical",children:"lexical"}),".LexicalNode"]}),"\n",(0,l.jsx)(n.h2,{id:"hierarchy",children:"Hierarchy"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.code,{children:"LexicalNode"})})}),"\n",(0,l.jsxs)(n.p,{children:["\u21b3 ",(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.DecoratorNode",children:(0,l.jsx)(n.code,{children:"DecoratorNode"})})]}),"\n",(0,l.jsxs)(n.p,{children:["\u21b3 ",(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.ElementNode",children:(0,l.jsx)(n.code,{children:"ElementNode"})})]}),"\n",(0,l.jsxs)(n.p,{children:["\u21b3 ",(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.LineBreakNode",children:(0,l.jsx)(n.code,{children:"LineBreakNode"})})]}),"\n",(0,l.jsxs)(n.p,{children:["\u21b3 ",(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.TextNode",children:(0,l.jsx)(n.code,{children:"TextNode"})})]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"constructors",children:"Constructors"}),"\n",(0,l.jsx)(n.h3,{id:"constructor",children:"constructor"}),"\n",(0,l.jsxs)(n.p,{children:["\u2022 ",(0,l.jsx)(n.strong,{children:"new LexicalNode"}),"(",(0,l.jsx)(n.code,{children:"key?"}),"): ",(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.LexicalNode",children:(0,l.jsx)(n.code,{children:"LexicalNode"})})]}),"\n",(0,l.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,l.jsx)(n.tbody,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.code,{children:"key?"})}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.code,{children:"string"})})]})})]}),"\n",(0,l.jsx)(n.h4,{id:"returns",children:"Returns"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.LexicalNode",children:(0,l.jsx)(n.code,{children:"LexicalNode"})})}),"\n",(0,l.jsx)(n.h4,{id:"defined-in",children:"Defined in"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L267",children:"packages/lexical/src/LexicalNode.ts:267"})}),"\n",(0,l.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,l.jsx)(n.h3,{id:"constructor-1",children:"constructor"}),"\n",(0,l.jsxs)(n.p,{children:["\u2022 ",(0,l.jsx)(n.strong,{children:"constructor"}),": ",(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/modules/lexical#klassconstructor",children:(0,l.jsx)(n.code,{children:"KlassConstructor"})}),"<typeof ",(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.LexicalNode",children:(0,l.jsx)(n.code,{children:"LexicalNode"})}),">"]}),"\n",(0,l.jsx)(n.h4,{id:"defined-in-1",children:"Defined in"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L162",children:"packages/lexical/src/LexicalNode.ts:162"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"importdom",children:"importDOM"}),"\n",(0,l.jsxs)(n.p,{children:["\u25aa ",(0,l.jsx)(n.code,{children:"Static"})," ",(0,l.jsx)(n.code,{children:"Optional"})," ",(0,l.jsx)(n.strong,{children:"importDOM"}),": () => ",(0,l.jsx)(n.code,{children:"null"})," | ",(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/modules/lexical#domconversionmap",children:(0,l.jsx)(n.code,{children:"DOMConversionMap"})}),"<",(0,l.jsx)(n.code,{children:"any"}),">"]}),"\n",(0,l.jsx)(n.h4,{id:"type-declaration",children:"Type declaration"}),"\n",(0,l.jsxs)(n.p,{children:["\u25b8 (): ",(0,l.jsx)(n.code,{children:"null"})," | ",(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/modules/lexical#domconversionmap",children:(0,l.jsx)(n.code,{children:"DOMConversionMap"})}),"<",(0,l.jsx)(n.code,{children:"any"}),">"]}),"\n",(0,l.jsx)(n.h5,{id:"returns-1",children:"Returns"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"null"})," | ",(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/modules/lexical#domconversionmap",children:(0,l.jsx)(n.code,{children:"DOMConversionMap"})}),"<",(0,l.jsx)(n.code,{children:"any"}),">"]}),"\n",(0,l.jsx)(n.h4,{id:"defined-in-2",children:"Defined in"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L265",children:"packages/lexical/src/LexicalNode.ts:265"})}),"\n",(0,l.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,l.jsx)(n.h3,{id:"afterclonefrom",children:"afterCloneFrom"}),"\n",(0,l.jsxs)(n.p,{children:["\u25b8 ",(0,l.jsx)(n.strong,{children:"afterCloneFrom"}),"(",(0,l.jsx)(n.code,{children:"prevNode"}),"): ",(0,l.jsx)(n.code,{children:"void"})]}),"\n",(0,l.jsxs)(n.p,{children:["Perform any state updates on the clone of prevNode that are not already\r\nhandled by the constructor call in the static clone method. If you have\r\nstate to update in your clone that is not handled directly by the\r\nconstructor, it is advisable to override this method but it is required\r\nto include a call to ",(0,l.jsx)(n.code,{children:"super.afterCloneFrom(prevNode)"})," in your\r\nimplementation. This is only intended to be called by\r\n",(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/modules/lexical#clonewithproperties",children:"$cloneWithProperties"})," function or via a super call."]}),"\n",(0,l.jsx)(n.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,l.jsx)(n.tbody,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.code,{children:"prevNode"})}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.code,{children:"this"})})]})})]}),"\n",(0,l.jsx)(n.h4,{id:"returns-2",children:"Returns"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"void"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.code,{children:"Example"})})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"class ClassesTextNode extends TextNode {\r\n  // Not shown: static getType, static importJSON, exportJSON, createDOM, updateDOM\r\n  __classes = new Set<string>();\r\n  static clone(node: ClassesTextNode): ClassesTextNode {\r\n    // The inherited TextNode constructor is used here, so\r\n    // classes is not set by this method.\r\n    return new ClassesTextNode(node.__text, node.__key);\r\n  }\r\n  afterCloneFrom(node: this): void {\r\n    // This calls TextNode.afterCloneFrom and LexicalNode.afterCloneFrom\r\n    // for necessary state updates\r\n    super.afterCloneFrom(node);\r\n    this.__addClasses(node.__classes);\r\n  }\r\n  // This method is a private implementation detail, it is not\r\n  // suitable for the public API because it does not call getWritable\r\n  __addClasses(classNames: Iterable<string>): this {\r\n    for (const className of classNames) {\r\n      this.__classes.add(className);\r\n    }\r\n    return this;\r\n  }\r\n  addClass(...classNames: string[]): this {\r\n    return this.getWritable().__addClasses(classNames);\r\n  }\r\n  removeClass(...classNames: string[]): this {\r\n    const node = this.getWritable();\r\n    for (const className of classNames) {\r\n      this.__classes.delete(className);\r\n    }\r\n    return this;\r\n  }\r\n  getClasses(): Set<string> {\r\n    return this.getLatest().__classes;\r\n  }\r\n}\n"})}),"\n",(0,l.jsx)(n.h4,{id:"defined-in-3",children:"Defined in"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L258",children:"packages/lexical/src/LexicalNode.ts:258"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"createdom",children:"createDOM"}),"\n",(0,l.jsxs)(n.p,{children:["\u25b8 ",(0,l.jsx)(n.strong,{children:"createDOM"}),"(",(0,l.jsx)(n.code,{children:"_config"}),", ",(0,l.jsx)(n.code,{children:"_editor"}),"): ",(0,l.jsx)(n.code,{children:"HTMLElement"})]}),"\n",(0,l.jsx)(n.p,{children:"Called during the reconciliation process to determine which nodes\r\nto insert into the DOM for this Lexical Node."}),"\n",(0,l.jsx)(n.p,{children:"This method must return exactly one HTMLElement. Nested elements are not supported."}),"\n",(0,l.jsx)(n.p,{children:"Do not attempt to update the Lexical EditorState during this phase of the update lifecyle."}),"\n",(0,l.jsx)(n.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Type"}),(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.code,{children:"_config"})}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/modules/lexical#editorconfig",children:(0,l.jsx)(n.code,{children:"EditorConfig"})})}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"allows access to things like the EditorTheme (to apply classes) during reconciliation."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.code,{children:"_editor"})}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.LexicalEditor",children:(0,l.jsx)(n.code,{children:"LexicalEditor"})})}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"allows access to the editor for context during reconciliation."})]})]})]}),"\n",(0,l.jsx)(n.h4,{id:"returns-3",children:"Returns"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"HTMLElement"})}),"\n",(0,l.jsx)(n.h4,{id:"defined-in-4",children:"Defined in"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L815",children:"packages/lexical/src/LexicalNode.ts:815"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"createparentelementnode",children:"createParentElementNode"}),"\n",(0,l.jsxs)(n.p,{children:["\u25b8 ",(0,l.jsx)(n.strong,{children:"createParentElementNode"}),"(): ",(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.ElementNode",children:(0,l.jsx)(n.code,{children:"ElementNode"})})]}),"\n",(0,l.jsxs)(n.p,{children:["The creation logic for any required parent. Should be implemented if ",(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.LexicalNode#isparentrequired",children:"isParentRequired"})," returns true."]}),"\n",(0,l.jsx)(n.h4,{id:"returns-4",children:"Returns"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.ElementNode",children:(0,l.jsx)(n.code,{children:"ElementNode"})})}),"\n",(0,l.jsx)(n.h4,{id:"defined-in-5",children:"Defined in"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L1094",children:"packages/lexical/src/LexicalNode.ts:1094"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"exportdom",children:"exportDOM"}),"\n",(0,l.jsxs)(n.p,{children:["\u25b8 ",(0,l.jsx)(n.strong,{children:"exportDOM"}),"(",(0,l.jsx)(n.code,{children:"editor"}),"): ",(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/modules/lexical#domexportoutput",children:(0,l.jsx)(n.code,{children:"DOMExportOutput"})})]}),"\n",(0,l.jsxs)(n.p,{children:["Controls how the this node is serialized to HTML. This is important for\r\ncopy and paste between Lexical and non-Lexical editors, or Lexical editors with different namespaces,\r\nin which case the primary transfer format is HTML. It's also important if you're serializing\r\nto HTML for any other reason via ",(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/modules/lexical_html#generatehtmlfromnodes",children:"$generateHtmlFromNodes"}),". You could\r\nalso use this method to build your own HTML renderer."]}),"\n",(0,l.jsx)(n.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,l.jsx)(n.tbody,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.code,{children:"editor"})}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.LexicalEditor",children:(0,l.jsx)(n.code,{children:"LexicalEditor"})})})]})})]}),"\n",(0,l.jsx)(n.h4,{id:"returns-5",children:"Returns"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/modules/lexical#domexportoutput",children:(0,l.jsx)(n.code,{children:"DOMExportOutput"})})}),"\n",(0,l.jsx)(n.h4,{id:"defined-in-6",children:"Defined in"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L845",children:"packages/lexical/src/LexicalNode.ts:845"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"exportjson",children:"exportJSON"}),"\n",(0,l.jsxs)(n.p,{children:["\u25b8 ",(0,l.jsx)(n.strong,{children:"exportJSON"}),"(): ",(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/modules/lexical#serializedlexicalnode",children:(0,l.jsx)(n.code,{children:"SerializedLexicalNode"})})]}),"\n",(0,l.jsxs)(n.p,{children:["Controls how the this node is serialized to JSON. This is important for\r\ncopy and paste between Lexical editors sharing the same namespace. It's also important\r\nif you're serializing to JSON for persistent storage somewhere.\r\nSee ",(0,l.jsx)(n.a,{href:"https://lexical.dev/docs/concepts/serialization#lexical---html",children:"Serialization & Deserialization"}),"."]}),"\n",(0,l.jsx)(n.h4,{id:"returns-6",children:"Returns"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/modules/lexical#serializedlexicalnode",children:(0,l.jsx)(n.code,{children:"SerializedLexicalNode"})})}),"\n",(0,l.jsx)(n.h4,{id:"defined-in-7",children:"Defined in"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L857",children:"packages/lexical/src/LexicalNode.ts:857"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"getcommonancestor",children:"getCommonAncestor"}),"\n",(0,l.jsxs)(n.p,{children:["\u25b8 ",(0,l.jsx)(n.strong,{children:"getCommonAncestor"}),"<",(0,l.jsx)(n.code,{children:"T"}),">(",(0,l.jsx)(n.code,{children:"node"}),"): ",(0,l.jsx)(n.code,{children:"null"})," | ",(0,l.jsx)(n.code,{children:"T"})]}),"\n",(0,l.jsx)(n.p,{children:"Returns the closest common ancestor of this node and the provided one or null\r\nif one cannot be found."}),"\n",(0,l.jsx)(n.h4,{id:"type-parameters",children:"Type parameters"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,l.jsx)(n.tbody,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.code,{children:"T"})}),(0,l.jsxs)(n.td,{style:{textAlign:"left"},children:["extends ",(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.ElementNode",children:(0,l.jsx)(n.code,{children:"ElementNode"})})," = ",(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.ElementNode",children:(0,l.jsx)(n.code,{children:"ElementNode"})})]})]})})]}),"\n",(0,l.jsx)(n.h4,{id:"parameters-4",children:"Parameters"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Type"}),(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,l.jsx)(n.tbody,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.code,{children:"node"})}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.LexicalNode",children:(0,l.jsx)(n.code,{children:"LexicalNode"})})}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"the other node to find the common ancestor of."})]})})]}),"\n",(0,l.jsx)(n.h4,{id:"returns-7",children:"Returns"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"null"})," | ",(0,l.jsx)(n.code,{children:"T"})]}),"\n",(0,l.jsx)(n.h4,{id:"defined-in-8",children:"Defined in"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L553",children:"packages/lexical/src/LexicalNode.ts:553"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"getindexwithinparent",children:"getIndexWithinParent"}),"\n",(0,l.jsxs)(n.p,{children:["\u25b8 ",(0,l.jsx)(n.strong,{children:"getIndexWithinParent"}),"(): ",(0,l.jsx)(n.code,{children:"number"})]}),"\n",(0,l.jsx)(n.p,{children:"Returns the zero-based index of this node within the parent."}),"\n",(0,l.jsx)(n.h4,{id:"returns-8",children:"Returns"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"number"})}),"\n",(0,l.jsx)(n.h4,{id:"defined-in-9",children:"Defined in"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L381",children:"packages/lexical/src/LexicalNode.ts:381"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"getkey",children:"getKey"}),"\n",(0,l.jsxs)(n.p,{children:["\u25b8 ",(0,l.jsx)(n.strong,{children:"getKey"}),"(): ",(0,l.jsx)(n.code,{children:"string"})]}),"\n",(0,l.jsx)(n.p,{children:"Returns this nodes key."}),"\n",(0,l.jsx)(n.h4,{id:"returns-9",children:"Returns"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"string"})}),"\n",(0,l.jsx)(n.h4,{id:"defined-in-10",children:"Defined in"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L373",children:"packages/lexical/src/LexicalNode.ts:373"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"getlatest",children:"getLatest"}),"\n",(0,l.jsxs)(n.p,{children:["\u25b8 ",(0,l.jsx)(n.strong,{children:"getLatest"}),"(): ",(0,l.jsx)(n.code,{children:"this"})]}),"\n",(0,l.jsx)(n.p,{children:"Returns the latest version of the node from the active EditorState.\r\nThis is used to avoid getting values from stale node references."}),"\n",(0,l.jsx)(n.h4,{id:"returns-10",children:"Returns"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"this"})}),"\n",(0,l.jsx)(n.h4,{id:"defined-in-11",children:"Defined in"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L739",children:"packages/lexical/src/LexicalNode.ts:739"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"getnextsibling",children:"getNextSibling"}),"\n",(0,l.jsxs)(n.p,{children:["\u25b8 ",(0,l.jsx)(n.strong,{children:"getNextSibling"}),"<",(0,l.jsx)(n.code,{children:"T"}),">(): ",(0,l.jsx)(n.code,{children:"null"})," | ",(0,l.jsx)(n.code,{children:"T"})]}),"\n",(0,l.jsx)(n.p,{children:'Returns the "next" siblings - that is, the node that comes\r\nafter this one in the same parent'}),"\n",(0,l.jsx)(n.h4,{id:"type-parameters-1",children:"Type parameters"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,l.jsx)(n.tbody,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.code,{children:"T"})}),(0,l.jsxs)(n.td,{style:{textAlign:"left"},children:["extends ",(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.LexicalNode",children:(0,l.jsx)(n.code,{children:"LexicalNode"})})]})]})})]}),"\n",(0,l.jsx)(n.h4,{id:"returns-11",children:"Returns"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"null"})," | ",(0,l.jsx)(n.code,{children:"T"})]}),"\n",(0,l.jsx)(n.h4,{id:"defined-in-12",children:"Defined in"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L526",children:"packages/lexical/src/LexicalNode.ts:526"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"getnextsiblings",children:"getNextSiblings"}),"\n",(0,l.jsxs)(n.p,{children:["\u25b8 ",(0,l.jsx)(n.strong,{children:"getNextSiblings"}),"<",(0,l.jsx)(n.code,{children:"T"}),">(): ",(0,l.jsx)(n.code,{children:"T"}),"[]"]}),"\n",(0,l.jsx)(n.p,{children:'Returns all "next" siblings - that is, the nodes that come between this\r\none and the last child of it\'s parent, inclusive.'}),"\n",(0,l.jsx)(n.h4,{id:"type-parameters-2",children:"Type parameters"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,l.jsx)(n.tbody,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.code,{children:"T"})}),(0,l.jsxs)(n.td,{style:{textAlign:"left"},children:["extends ",(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.LexicalNode",children:(0,l.jsx)(n.code,{children:"LexicalNode"})})]})]})})]}),"\n",(0,l.jsx)(n.h4,{id:"returns-12",children:"Returns"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"T"}),"[]"]}),"\n",(0,l.jsx)(n.h4,{id:"defined-in-13",children:"Defined in"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L537",children:"packages/lexical/src/LexicalNode.ts:537"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"getnodesbetween",children:"getNodesBetween"}),"\n",(0,l.jsxs)(n.p,{children:["\u25b8 ",(0,l.jsx)(n.strong,{children:"getNodesBetween"}),"(",(0,l.jsx)(n.code,{children:"targetNode"}),"): ",(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.LexicalNode",children:(0,l.jsx)(n.code,{children:"LexicalNode"})}),"[]"]}),"\n",(0,l.jsx)(n.p,{children:"Returns a list of nodes that are between this node and\r\nthe target node in the EditorState."}),"\n",(0,l.jsx)(n.h4,{id:"parameters-5",children:"Parameters"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Type"}),(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,l.jsx)(n.tbody,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.code,{children:"targetNode"})}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.LexicalNode",children:(0,l.jsx)(n.code,{children:"LexicalNode"})})}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"the node that marks the other end of the range of nodes to be returned."})]})})]}),"\n",(0,l.jsx)(n.h4,{id:"returns-13",children:"Returns"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.LexicalNode",children:(0,l.jsx)(n.code,{children:"LexicalNode"})}),"[]"]}),"\n",(0,l.jsx)(n.h4,{id:"defined-in-14",children:"Defined in"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L658",children:"packages/lexical/src/LexicalNode.ts:658"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"getparent",children:"getParent"}),"\n",(0,l.jsxs)(n.p,{children:["\u25b8 ",(0,l.jsx)(n.strong,{children:"getParent"}),"<",(0,l.jsx)(n.code,{children:"T"}),">(): ",(0,l.jsx)(n.code,{children:"null"})," | ",(0,l.jsx)(n.code,{children:"T"})]}),"\n",(0,l.jsx)(n.p,{children:"Returns the parent of this node, or null if none is found."}),"\n",(0,l.jsx)(n.h4,{id:"type-parameters-3",children:"Type parameters"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,l.jsx)(n.tbody,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.code,{children:"T"})}),(0,l.jsxs)(n.td,{style:{textAlign:"left"},children:["extends ",(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.ElementNode",children:(0,l.jsx)(n.code,{children:"ElementNode"})})]})]})})]}),"\n",(0,l.jsx)(n.h4,{id:"returns-14",children:"Returns"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"null"})," | ",(0,l.jsx)(n.code,{children:"T"})]}),"\n",(0,l.jsx)(n.h4,{id:"defined-in-15",children:"Defined in"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L401",children:"packages/lexical/src/LexicalNode.ts:401"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"getparentkeys",children:"getParentKeys"}),"\n",(0,l.jsxs)(n.p,{children:["\u25b8 ",(0,l.jsx)(n.strong,{children:"getParentKeys"}),"(): ",(0,l.jsx)(n.code,{children:"string"}),"[]"]}),"\n",(0,l.jsx)(n.p,{children:"Returns a list of the keys of every ancestor of this node,\r\nall the way up to the RootNode."}),"\n",(0,l.jsx)(n.h4,{id:"returns-15",children:"Returns"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"string"}),"[]"]}),"\n",(0,l.jsx)(n.h4,{id:"defined-in-16",children:"Defined in"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L478",children:"packages/lexical/src/LexicalNode.ts:478"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"getparentorthrow",children:"getParentOrThrow"}),"\n",(0,l.jsxs)(n.p,{children:["\u25b8 ",(0,l.jsx)(n.strong,{children:"getParentOrThrow"}),"<",(0,l.jsx)(n.code,{children:"T"}),">(): ",(0,l.jsx)(n.code,{children:"T"})]}),"\n",(0,l.jsx)(n.p,{children:"Returns the parent of this node, or throws if none is found."}),"\n",(0,l.jsx)(n.h4,{id:"type-parameters-4",children:"Type parameters"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,l.jsx)(n.tbody,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.code,{children:"T"})}),(0,l.jsxs)(n.td,{style:{textAlign:"left"},children:["extends ",(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.ElementNode",children:(0,l.jsx)(n.code,{children:"ElementNode"})})]})]})})]}),"\n",(0,l.jsx)(n.h4,{id:"returns-16",children:"Returns"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"T"})}),"\n",(0,l.jsx)(n.h4,{id:"defined-in-17",children:"Defined in"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L412",children:"packages/lexical/src/LexicalNode.ts:412"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"getparents",children:"getParents"}),"\n",(0,l.jsxs)(n.p,{children:["\u25b8 ",(0,l.jsx)(n.strong,{children:"getParents"}),"(): ",(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.ElementNode",children:(0,l.jsx)(n.code,{children:"ElementNode"})}),"[]"]}),"\n",(0,l.jsx)(n.p,{children:"Returns a list of the every ancestor of this node,\r\nall the way up to the RootNode."}),"\n",(0,l.jsx)(n.h4,{id:"returns-17",children:"Returns"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.ElementNode",children:(0,l.jsx)(n.code,{children:"ElementNode"})}),"[]"]}),"\n",(0,l.jsx)(n.h4,{id:"defined-in-18",children:"Defined in"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L463",children:"packages/lexical/src/LexicalNode.ts:463"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"getprevioussibling",children:"getPreviousSibling"}),"\n",(0,l.jsxs)(n.p,{children:["\u25b8 ",(0,l.jsx)(n.strong,{children:"getPreviousSibling"}),"<",(0,l.jsx)(n.code,{children:"T"}),">(): ",(0,l.jsx)(n.code,{children:"null"})," | ",(0,l.jsx)(n.code,{children:"T"})]}),"\n",(0,l.jsx)(n.p,{children:'Returns the "previous" siblings - that is, the node that comes\r\nbefore this one in the same parent.'}),"\n",(0,l.jsx)(n.h4,{id:"type-parameters-5",children:"Type parameters"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,l.jsx)(n.tbody,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.code,{children:"T"})}),(0,l.jsxs)(n.td,{style:{textAlign:"left"},children:["extends ",(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.LexicalNode",children:(0,l.jsx)(n.code,{children:"LexicalNode"})})]})]})})]}),"\n",(0,l.jsx)(n.h4,{id:"returns-18",children:"Returns"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"null"})," | ",(0,l.jsx)(n.code,{children:"T"})]}),"\n",(0,l.jsx)(n.h4,{id:"defined-in-19",children:"Defined in"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L493",children:"packages/lexical/src/LexicalNode.ts:493"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"getprevioussiblings",children:"getPreviousSiblings"}),"\n",(0,l.jsxs)(n.p,{children:["\u25b8 ",(0,l.jsx)(n.strong,{children:"getPreviousSiblings"}),"<",(0,l.jsx)(n.code,{children:"T"}),">(): ",(0,l.jsx)(n.code,{children:"T"}),"[]"]}),"\n",(0,l.jsx)(n.p,{children:'Returns the "previous" siblings - that is, the nodes that come between\r\nthis one and the first child of it\'s parent, inclusive.'}),"\n",(0,l.jsx)(n.h4,{id:"type-parameters-6",children:"Type parameters"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,l.jsx)(n.tbody,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.code,{children:"T"})}),(0,l.jsxs)(n.td,{style:{textAlign:"left"},children:["extends ",(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.LexicalNode",children:(0,l.jsx)(n.code,{children:"LexicalNode"})})]})]})})]}),"\n",(0,l.jsx)(n.h4,{id:"returns-19",children:"Returns"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"T"}),"[]"]}),"\n",(0,l.jsx)(n.h4,{id:"defined-in-20",children:"Defined in"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L504",children:"packages/lexical/src/LexicalNode.ts:504"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"gettextcontent",children:"getTextContent"}),"\n",(0,l.jsxs)(n.p,{children:["\u25b8 ",(0,l.jsx)(n.strong,{children:"getTextContent"}),"(): ",(0,l.jsx)(n.code,{children:"string"})]}),"\n",(0,l.jsx)(n.p,{children:"Returns the text content of the node. Override this for\r\ncustom nodes that should have a representation in plain text\r\nformat (for copy + paste, for example)"}),"\n",(0,l.jsx)(n.h4,{id:"returns-20",children:"Returns"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"string"})}),"\n",(0,l.jsx)(n.h4,{id:"defined-in-21",children:"Defined in"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L789",children:"packages/lexical/src/LexicalNode.ts:789"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"gettextcontentsize",children:"getTextContentSize"}),"\n",(0,l.jsxs)(n.p,{children:["\u25b8 ",(0,l.jsx)(n.strong,{children:"getTextContentSize"}),"(): ",(0,l.jsx)(n.code,{children:"number"})]}),"\n",(0,l.jsx)(n.p,{children:"Returns the length of the string produced by calling getTextContent on this node."}),"\n",(0,l.jsx)(n.h4,{id:"returns-21",children:"Returns"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"number"})}),"\n",(0,l.jsx)(n.h4,{id:"defined-in-22",children:"Defined in"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L797",children:"packages/lexical/src/LexicalNode.ts:797"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"gettoplevelelement",children:"getTopLevelElement"}),"\n",(0,l.jsxs)(n.p,{children:["\u25b8 ",(0,l.jsx)(n.strong,{children:"getTopLevelElement"}),"(): ",(0,l.jsx)(n.code,{children:"null"})," | ",(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.ElementNode",children:(0,l.jsx)(n.code,{children:"ElementNode"})})," | ",(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.DecoratorNode",children:(0,l.jsx)(n.code,{children:"DecoratorNode"})}),"<",(0,l.jsx)(n.code,{children:"unknown"}),">"]}),"\n",(0,l.jsxs)(n.p,{children:["Returns the highest (in the EditorState tree)\r\nnon-root ancestor of this node, or null if none is found. See ",(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/modules/lexical#isrootorshadowroot",children:"$isRootOrShadowRoot"}),'\r\nfor more information on which Elements comprise "roots".']}),"\n",(0,l.jsx)(n.h4,{id:"returns-22",children:"Returns"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"null"})," | ",(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.ElementNode",children:(0,l.jsx)(n.code,{children:"ElementNode"})})," | ",(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.DecoratorNode",children:(0,l.jsx)(n.code,{children:"DecoratorNode"})}),"<",(0,l.jsx)(n.code,{children:"unknown"}),">"]}),"\n",(0,l.jsx)(n.h4,{id:"defined-in-23",children:"Defined in"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L425",children:"packages/lexical/src/LexicalNode.ts:425"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"gettoplevelelementorthrow",children:"getTopLevelElementOrThrow"}),"\n",(0,l.jsxs)(n.p,{children:["\u25b8 ",(0,l.jsx)(n.strong,{children:"getTopLevelElementOrThrow"}),"(): ",(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.ElementNode",children:(0,l.jsx)(n.code,{children:"ElementNode"})})," | ",(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.DecoratorNode",children:(0,l.jsx)(n.code,{children:"DecoratorNode"})}),"<",(0,l.jsx)(n.code,{children:"unknown"}),">"]}),"\n",(0,l.jsxs)(n.p,{children:["Returns the highest (in the EditorState tree)\r\nnon-root ancestor of this node, or throws if none is found. See ",(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/modules/lexical#isrootorshadowroot",children:"$isRootOrShadowRoot"}),'\r\nfor more information on which Elements comprise "roots".']}),"\n",(0,l.jsx)(n.h4,{id:"returns-23",children:"Returns"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.ElementNode",children:(0,l.jsx)(n.code,{children:"ElementNode"})})," | ",(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.DecoratorNode",children:(0,l.jsx)(n.code,{children:"DecoratorNode"})}),"<",(0,l.jsx)(n.code,{children:"unknown"}),">"]}),"\n",(0,l.jsx)(n.h4,{id:"defined-in-24",children:"Defined in"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L446",children:"packages/lexical/src/LexicalNode.ts:446"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"gettype",children:"getType"}),"\n",(0,l.jsxs)(n.p,{children:["\u25b8 ",(0,l.jsx)(n.strong,{children:"getType"}),"(): ",(0,l.jsx)(n.code,{children:"string"})]}),"\n",(0,l.jsx)(n.p,{children:"Returns the string type of this node."}),"\n",(0,l.jsx)(n.h4,{id:"returns-24",children:"Returns"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"string"})}),"\n",(0,l.jsx)(n.h4,{id:"defined-in-25",children:"Defined in"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L286",children:"packages/lexical/src/LexicalNode.ts:286"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"getwritable",children:"getWritable"}),"\n",(0,l.jsxs)(n.p,{children:["\u25b8 ",(0,l.jsx)(n.strong,{children:"getWritable"}),"(): ",(0,l.jsx)(n.code,{children:"this"})]}),"\n",(0,l.jsxs)(n.p,{children:["Returns a mutable version of the node using ",(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/modules/lexical#clonewithproperties",children:"$cloneWithProperties"}),"\r\nif necessary. Will throw an error if called outside of a Lexical Editor\r\n",(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.LexicalEditor#update",children:"LexicalEditor.update"})," callback."]}),"\n",(0,l.jsx)(n.h4,{id:"returns-25",children:"Returns"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"this"})}),"\n",(0,l.jsx)(n.h4,{id:"defined-in-26",children:"Defined in"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L756",children:"packages/lexical/src/LexicalNode.ts:756"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"insertafter",children:"insertAfter"}),"\n",(0,l.jsxs)(n.p,{children:["\u25b8 ",(0,l.jsx)(n.strong,{children:"insertAfter"}),"(",(0,l.jsx)(n.code,{children:"nodeToInsert"}),", ",(0,l.jsx)(n.code,{children:"restoreSelection?"}),"): ",(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.LexicalNode",children:(0,l.jsx)(n.code,{children:"LexicalNode"})})]}),"\n",(0,l.jsx)(n.p,{children:"Inserts a node after this LexicalNode (as the next sibling)."}),"\n",(0,l.jsx)(n.h4,{id:"parameters-6",children:"Parameters"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Type"}),(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Default value"}),(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.code,{children:"nodeToInsert"})}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.LexicalNode",children:(0,l.jsx)(n.code,{children:"LexicalNode"})})}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.code,{children:"undefined"})}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"The node to insert after this one."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.code,{children:"restoreSelection"})}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.code,{children:"boolean"})}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.code,{children:"true"})}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"Whether or not to attempt to resolve the selection to the appropriate place after the operation is complete."})]})]})]}),"\n",(0,l.jsx)(n.h4,{id:"returns-26",children:"Returns"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.LexicalNode",children:(0,l.jsx)(n.code,{children:"LexicalNode"})})}),"\n",(0,l.jsx)(n.h4,{id:"defined-in-27",children:"Defined in"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L979",children:"packages/lexical/src/LexicalNode.ts:979"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"insertbefore",children:"insertBefore"}),"\n",(0,l.jsxs)(n.p,{children:["\u25b8 ",(0,l.jsx)(n.strong,{children:"insertBefore"}),"(",(0,l.jsx)(n.code,{children:"nodeToInsert"}),", ",(0,l.jsx)(n.code,{children:"restoreSelection?"}),"): ",(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.LexicalNode",children:(0,l.jsx)(n.code,{children:"LexicalNode"})})]}),"\n",(0,l.jsx)(n.p,{children:"Inserts a node before this LexicalNode (as the previous sibling)."}),"\n",(0,l.jsx)(n.h4,{id:"parameters-7",children:"Parameters"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Type"}),(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Default value"}),(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.code,{children:"nodeToInsert"})}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.LexicalNode",children:(0,l.jsx)(n.code,{children:"LexicalNode"})})}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.code,{children:"undefined"})}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"The node to insert before this one."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.code,{children:"restoreSelection"})}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.code,{children:"boolean"})}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.code,{children:"true"})}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"Whether or not to attempt to resolve the selection to the appropriate place after the operation is complete."})]})]})]}),"\n",(0,l.jsx)(n.h4,{id:"returns-27",children:"Returns"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.LexicalNode",children:(0,l.jsx)(n.code,{children:"LexicalNode"})})}),"\n",(0,l.jsx)(n.h4,{id:"defined-in-28",children:"Defined in"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L1046",children:"packages/lexical/src/LexicalNode.ts:1046"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"is",children:"is"}),"\n",(0,l.jsxs)(n.p,{children:["\u25b8 ",(0,l.jsx)(n.strong,{children:"is"}),"(",(0,l.jsx)(n.code,{children:"object"}),"): ",(0,l.jsx)(n.code,{children:"boolean"})]}),"\n",(0,l.jsx)(n.p,{children:"Returns true if the provided node is the exact same one as this node, from Lexical's perspective.\r\nAlways use this instead of referential equality."}),"\n",(0,l.jsx)(n.h4,{id:"parameters-8",children:"Parameters"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Type"}),(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,l.jsx)(n.tbody,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.code,{children:"object"})}),(0,l.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,l.jsx)(n.code,{children:"undefined"})," | ",(0,l.jsx)(n.code,{children:"null"})," | ",(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.LexicalNode",children:(0,l.jsx)(n.code,{children:"LexicalNode"})})]}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"the node to perform the equality comparison on."})]})})]}),"\n",(0,l.jsx)(n.h4,{id:"returns-28",children:"Returns"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"boolean"})}),"\n",(0,l.jsx)(n.h4,{id:"defined-in-29",children:"Defined in"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L585",children:"packages/lexical/src/LexicalNode.ts:585"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"isattached",children:"isAttached"}),"\n",(0,l.jsxs)(n.p,{children:["\u25b8 ",(0,l.jsx)(n.strong,{children:"isAttached"}),"(): ",(0,l.jsx)(n.code,{children:"boolean"})]}),"\n",(0,l.jsx)(n.p,{children:'Returns true if there is a path between this node and the RootNode, false otherwise.\r\nThis is a way of determining if the node is "attached" EditorState. Unattached nodes\r\nwon\'t be reconciled and will ultimatelt be cleaned up by the Lexical GC.'}),"\n",(0,l.jsx)(n.h4,{id:"returns-29",children:"Returns"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"boolean"})}),"\n",(0,l.jsx)(n.h4,{id:"defined-in-30",children:"Defined in"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L303",children:"packages/lexical/src/LexicalNode.ts:303"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"isbefore",children:"isBefore"}),"\n",(0,l.jsxs)(n.p,{children:["\u25b8 ",(0,l.jsx)(n.strong,{children:"isBefore"}),"(",(0,l.jsx)(n.code,{children:"targetNode"}),"): ",(0,l.jsx)(n.code,{children:"boolean"})]}),"\n",(0,l.jsx)(n.p,{children:"Returns true if this node logical precedes the target node in the editor state."}),"\n",(0,l.jsx)(n.h4,{id:"parameters-9",children:"Parameters"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Type"}),(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,l.jsx)(n.tbody,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.code,{children:"targetNode"})}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.LexicalNode",children:(0,l.jsx)(n.code,{children:"LexicalNode"})})}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"the node we're testing to see if it's after this one."})]})})]}),"\n",(0,l.jsx)(n.h4,{id:"returns-30",children:"Returns"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"boolean"})}),"\n",(0,l.jsx)(n.h4,{id:"defined-in-31",children:"Defined in"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L597",children:"packages/lexical/src/LexicalNode.ts:597"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"isdirty",children:"isDirty"}),"\n",(0,l.jsxs)(n.p,{children:["\u25b8 ",(0,l.jsx)(n.strong,{children:"isDirty"}),"(): ",(0,l.jsx)(n.code,{children:"boolean"})]}),"\n",(0,l.jsx)(n.p,{children:"Returns true if this node has been marked dirty during this update cycle."}),"\n",(0,l.jsx)(n.h4,{id:"returns-31",children:"Returns"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"boolean"})}),"\n",(0,l.jsx)(n.h4,{id:"defined-in-32",children:"Defined in"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L728",children:"packages/lexical/src/LexicalNode.ts:728"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"isinline",children:"isInline"}),"\n",(0,l.jsxs)(n.p,{children:["\u25b8 ",(0,l.jsx)(n.strong,{children:"isInline"}),"(): ",(0,l.jsx)(n.code,{children:"boolean"})]}),"\n",(0,l.jsx)(n.h4,{id:"returns-32",children:"Returns"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"boolean"})}),"\n",(0,l.jsx)(n.h4,{id:"defined-in-33",children:"Defined in"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L290",children:"packages/lexical/src/LexicalNode.ts:290"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"isparentof",children:"isParentOf"}),"\n",(0,l.jsxs)(n.p,{children:["\u25b8 ",(0,l.jsx)(n.strong,{children:"isParentOf"}),"(",(0,l.jsx)(n.code,{children:"targetNode"}),"): ",(0,l.jsx)(n.code,{children:"boolean"})]}),"\n",(0,l.jsx)(n.p,{children:"Returns true if this node is the parent of the target node, false otherwise."}),"\n",(0,l.jsx)(n.h4,{id:"parameters-10",children:"Parameters"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Type"}),(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,l.jsx)(n.tbody,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.code,{children:"targetNode"})}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.LexicalNode",children:(0,l.jsx)(n.code,{children:"LexicalNode"})})}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"the would-be child node."})]})})]}),"\n",(0,l.jsx)(n.h4,{id:"returns-33",children:"Returns"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"boolean"})}),"\n",(0,l.jsx)(n.h4,{id:"defined-in-34",children:"Defined in"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L636",children:"packages/lexical/src/LexicalNode.ts:636"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"isparentrequired",children:"isParentRequired"}),"\n",(0,l.jsxs)(n.p,{children:["\u25b8 ",(0,l.jsx)(n.strong,{children:"isParentRequired"}),"(): ",(0,l.jsx)(n.code,{children:"boolean"})]}),"\n",(0,l.jsx)(n.p,{children:"Whether or not this node has a required parent. Used during copy + paste operations\r\nto normalize nodes that would otherwise be orphaned. For example, ListItemNodes without\r\na ListNode parent or TextNodes with a ParagraphNode parent."}),"\n",(0,l.jsx)(n.h4,{id:"returns-34",children:"Returns"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"boolean"})}),"\n",(0,l.jsx)(n.h4,{id:"defined-in-35",children:"Defined in"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L1086",children:"packages/lexical/src/LexicalNode.ts:1086"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"isselected",children:"isSelected"}),"\n",(0,l.jsxs)(n.p,{children:["\u25b8 ",(0,l.jsx)(n.strong,{children:"isSelected"}),"(",(0,l.jsx)(n.code,{children:"selection?"}),"): ",(0,l.jsx)(n.code,{children:"boolean"})]}),"\n",(0,l.jsxs)(n.p,{children:["Returns true if this node is contained within the provided Selection., false otherwise.\r\nRelies on the algorithms implemented in ",(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/interfaces/lexical.BaseSelection#getnodes",children:"BaseSelection.getNodes"})," to determine\r\nwhat's included."]}),"\n",(0,l.jsx)(n.h4,{id:"parameters-11",children:"Parameters"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Type"}),(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,l.jsx)(n.tbody,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.code,{children:"selection?"})}),(0,l.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,l.jsx)(n.code,{children:"null"})," | ",(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/interfaces/lexical.BaseSelection",children:(0,l.jsx)(n.code,{children:"BaseSelection"})})]}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"The selection that we want to determine if the node is in."})]})})]}),"\n",(0,l.jsx)(n.h4,{id:"returns-35",children:"Returns"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"boolean"})}),"\n",(0,l.jsx)(n.h4,{id:"defined-in-36",children:"Defined in"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L327",children:"packages/lexical/src/LexicalNode.ts:327"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"markdirty",children:"markDirty"}),"\n",(0,l.jsxs)(n.p,{children:["\u25b8 ",(0,l.jsx)(n.strong,{children:"markDirty"}),"(): ",(0,l.jsx)(n.code,{children:"void"})]}),"\n",(0,l.jsx)(n.p,{children:"Marks a node dirty, triggering transforms and\r\nforcing it to be reconciled during the update cycle."}),"\n",(0,l.jsx)(n.h4,{id:"returns-36",children:"Returns"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"void"})}),"\n",(0,l.jsx)(n.h4,{id:"defined-in-37",children:"Defined in"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L1155",children:"packages/lexical/src/LexicalNode.ts:1155"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"remove",children:"remove"}),"\n",(0,l.jsxs)(n.p,{children:["\u25b8 ",(0,l.jsx)(n.strong,{children:"remove"}),"(",(0,l.jsx)(n.code,{children:"preserveEmptyParent?"}),"): ",(0,l.jsx)(n.code,{children:"void"})]}),"\n",(0,l.jsx)(n.p,{children:"Removes this LexicalNode from the EditorState. If the node isn't re-inserted\r\nsomewhere, the Lexical garbage collector will eventually clean it up."}),"\n",(0,l.jsx)(n.h4,{id:"parameters-12",children:"Parameters"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Type"}),(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,l.jsx)(n.tbody,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.code,{children:"preserveEmptyParent?"})}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.code,{children:"boolean"})}),(0,l.jsxs)(n.td,{style:{textAlign:"left"},children:["If falsy, the node's parent will be removed if it's empty after the removal operation. This is the default behavior, subject to other node heuristics such as ",(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.ElementNode#canbeempty",children:"ElementNode#canBeEmpty"})]})]})})]}),"\n",(0,l.jsx)(n.h4,{id:"returns-37",children:"Returns"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"void"})}),"\n",(0,l.jsx)(n.h4,{id:"defined-in-38",children:"Defined in"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L898",children:"packages/lexical/src/LexicalNode.ts:898"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"replace",children:"replace"}),"\n",(0,l.jsxs)(n.p,{children:["\u25b8 ",(0,l.jsx)(n.strong,{children:"replace"}),"<",(0,l.jsx)(n.code,{children:"N"}),">(",(0,l.jsx)(n.code,{children:"replaceWith"}),", ",(0,l.jsx)(n.code,{children:"includeChildren?"}),"): ",(0,l.jsx)(n.code,{children:"N"})]}),"\n",(0,l.jsx)(n.p,{children:"Replaces this LexicalNode with the provided node, optionally transferring the children\r\nof the replaced node to the replacing node."}),"\n",(0,l.jsx)(n.h4,{id:"type-parameters-7",children:"Type parameters"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,l.jsx)(n.tbody,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.code,{children:"N"})}),(0,l.jsxs)(n.td,{style:{textAlign:"left"},children:["extends ",(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.LexicalNode",children:(0,l.jsx)(n.code,{children:"LexicalNode"})})]})]})})]}),"\n",(0,l.jsx)(n.h4,{id:"parameters-13",children:"Parameters"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Type"}),(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.code,{children:"replaceWith"})}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.code,{children:"N"})}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"The node to replace this one with."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.code,{children:"includeChildren?"})}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.code,{children:"boolean"})}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"Whether or not to transfer the children of this node to the replacing node."})]})]})]}),"\n",(0,l.jsx)(n.h4,{id:"returns-38",children:"Returns"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"N"})}),"\n",(0,l.jsx)(n.h4,{id:"defined-in-39",children:"Defined in"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L909",children:"packages/lexical/src/LexicalNode.ts:909"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"selectend",children:"selectEnd"}),"\n",(0,l.jsxs)(n.p,{children:["\u25b8 ",(0,l.jsx)(n.strong,{children:"selectEnd"}),"(): ",(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.RangeSelection",children:(0,l.jsx)(n.code,{children:"RangeSelection"})})]}),"\n",(0,l.jsx)(n.h4,{id:"returns-39",children:"Returns"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.RangeSelection",children:(0,l.jsx)(n.code,{children:"RangeSelection"})})}),"\n",(0,l.jsx)(n.h4,{id:"defined-in-40",children:"Defined in"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L1102",children:"packages/lexical/src/LexicalNode.ts:1102"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"selectnext",children:"selectNext"}),"\n",(0,l.jsxs)(n.p,{children:["\u25b8 ",(0,l.jsx)(n.strong,{children:"selectNext"}),"(",(0,l.jsx)(n.code,{children:"anchorOffset?"}),", ",(0,l.jsx)(n.code,{children:"focusOffset?"}),"): ",(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.RangeSelection",children:(0,l.jsx)(n.code,{children:"RangeSelection"})})]}),"\n",(0,l.jsx)(n.p,{children:"Moves selection to the next sibling of this node, at the specified offsets."}),"\n",(0,l.jsx)(n.h4,{id:"parameters-14",children:"Parameters"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Type"}),(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.code,{children:"anchorOffset?"})}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.code,{children:"number"})}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"The anchor offset for selection."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.code,{children:"focusOffset?"})}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.code,{children:"number"})}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"The focus offset for selection"})]})]})]}),"\n",(0,l.jsx)(n.h4,{id:"returns-40",children:"Returns"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.RangeSelection",children:(0,l.jsx)(n.code,{children:"RangeSelection"})})}),"\n",(0,l.jsx)(n.h4,{id:"defined-in-41",children:"Defined in"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L1134",children:"packages/lexical/src/LexicalNode.ts:1134"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"selectprevious",children:"selectPrevious"}),"\n",(0,l.jsxs)(n.p,{children:["\u25b8 ",(0,l.jsx)(n.strong,{children:"selectPrevious"}),"(",(0,l.jsx)(n.code,{children:"anchorOffset?"}),", ",(0,l.jsx)(n.code,{children:"focusOffset?"}),"): ",(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.RangeSelection",children:(0,l.jsx)(n.code,{children:"RangeSelection"})})]}),"\n",(0,l.jsx)(n.p,{children:"Moves selection to the previous sibling of this node, at the specified offsets."}),"\n",(0,l.jsx)(n.h4,{id:"parameters-15",children:"Parameters"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Type"}),(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.code,{children:"anchorOffset?"})}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.code,{children:"number"})}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"The anchor offset for selection."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.code,{children:"focusOffset?"})}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.code,{children:"number"})}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:"The focus offset for selection"})]})]})]}),"\n",(0,l.jsx)(n.h4,{id:"returns-41",children:"Returns"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.RangeSelection",children:(0,l.jsx)(n.code,{children:"RangeSelection"})})}),"\n",(0,l.jsx)(n.h4,{id:"defined-in-42",children:"Defined in"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L1112",children:"packages/lexical/src/LexicalNode.ts:1112"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"selectstart",children:"selectStart"}),"\n",(0,l.jsxs)(n.p,{children:["\u25b8 ",(0,l.jsx)(n.strong,{children:"selectStart"}),"(): ",(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.RangeSelection",children:(0,l.jsx)(n.code,{children:"RangeSelection"})})]}),"\n",(0,l.jsx)(n.h4,{id:"returns-42",children:"Returns"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.RangeSelection",children:(0,l.jsx)(n.code,{children:"RangeSelection"})})}),"\n",(0,l.jsx)(n.h4,{id:"defined-in-43",children:"Defined in"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L1098",children:"packages/lexical/src/LexicalNode.ts:1098"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"updatedom",children:"updateDOM"}),"\n",(0,l.jsxs)(n.p,{children:["\u25b8 ",(0,l.jsx)(n.strong,{children:"updateDOM"}),"(",(0,l.jsx)(n.code,{children:"_prevNode"}),", ",(0,l.jsx)(n.code,{children:"_dom"}),", ",(0,l.jsx)(n.code,{children:"_config"}),"): ",(0,l.jsx)(n.code,{children:"boolean"})]}),"\n",(0,l.jsx)(n.p,{children:"Called when a node changes and should update the DOM\r\nin whatever way is necessary to make it align with any changes that might\r\nhave happened during the update."}),"\n",(0,l.jsx)(n.p,{children:'Returning "true" here will cause lexical to unmount and recreate the DOM node\r\n(by calling createDOM). You would need to do this if the element tag changes,\r\nfor instance.'}),"\n",(0,l.jsx)(n.h4,{id:"parameters-16",children:"Parameters"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.code,{children:"_prevNode"})}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.code,{children:"unknown"})})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.code,{children:"_dom"})}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.code,{children:"HTMLElement"})})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.code,{children:"_config"})}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/modules/lexical#editorconfig",children:(0,l.jsx)(n.code,{children:"EditorConfig"})})})]})]})]}),"\n",(0,l.jsx)(n.h4,{id:"returns-43",children:"Returns"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"boolean"})}),"\n",(0,l.jsx)(n.h4,{id:"defined-in-44",children:"Defined in"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L829",children:"packages/lexical/src/LexicalNode.ts:829"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"clone",children:"clone"}),"\n",(0,l.jsxs)(n.p,{children:["\u25b8 ",(0,l.jsx)(n.strong,{children:"clone"}),"(",(0,l.jsx)(n.code,{children:"_data"}),"): ",(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.LexicalNode",children:(0,l.jsx)(n.code,{children:"LexicalNode"})})]}),"\n",(0,l.jsx)(n.p,{children:"Clones this node, creating a new node with a different key\r\nand adding it to the EditorState (but not attaching it anywhere!). All nodes must\r\nimplement this method."}),"\n",(0,l.jsx)(n.h4,{id:"parameters-17",children:"Parameters"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,l.jsx)(n.tbody,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.code,{children:"_data"})}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.code,{children:"unknown"})})]})})]}),"\n",(0,l.jsx)(n.h4,{id:"returns-44",children:"Returns"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.LexicalNode",children:(0,l.jsx)(n.code,{children:"LexicalNode"})})}),"\n",(0,l.jsx)(n.h4,{id:"defined-in-45",children:"Defined in"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L200",children:"packages/lexical/src/LexicalNode.ts:200"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"gettype-1",children:"getType"}),"\n",(0,l.jsxs)(n.p,{children:["\u25b8 ",(0,l.jsx)(n.strong,{children:"getType"}),"(): ",(0,l.jsx)(n.code,{children:"string"})]}),"\n",(0,l.jsx)(n.p,{children:"Returns the string type of this node. Every node must\r\nimplement this and it MUST BE UNIQUE amongst nodes registered\r\non the editor."}),"\n",(0,l.jsx)(n.h4,{id:"returns-45",children:"Returns"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"string"})}),"\n",(0,l.jsx)(n.h4,{id:"defined-in-46",children:"Defined in"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L186",children:"packages/lexical/src/LexicalNode.ts:186"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"importjson",children:"importJSON"}),"\n",(0,l.jsxs)(n.p,{children:["\u25b8 ",(0,l.jsx)(n.strong,{children:"importJSON"}),"(",(0,l.jsx)(n.code,{children:"_serializedNode"}),"): ",(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.LexicalNode",children:(0,l.jsx)(n.code,{children:"LexicalNode"})})]}),"\n",(0,l.jsxs)(n.p,{children:["Controls how the this node is deserialized from JSON. This is usually boilerplate,\r\nbut provides an abstraction between the node implementation and serialized interface that can\r\nbe important if you ever make breaking changes to a node schema (by adding or removing properties).\r\nSee ",(0,l.jsx)(n.a,{href:"https://lexical.dev/docs/concepts/serialization#lexical---html",children:"Serialization & Deserialization"}),"."]}),"\n",(0,l.jsx)(n.h4,{id:"parameters-18",children:"Parameters"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,l.jsx)(n.tbody,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.code,{children:"_serializedNode"})}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/modules/lexical#serializedlexicalnode",children:(0,l.jsx)(n.code,{children:"SerializedLexicalNode"})})})]})})]}),"\n",(0,l.jsx)(n.h4,{id:"returns-46",children:"Returns"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.LexicalNode",children:(0,l.jsx)(n.code,{children:"LexicalNode"})})}),"\n",(0,l.jsx)(n.h4,{id:"defined-in-47",children:"Defined in"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L868",children:"packages/lexical/src/LexicalNode.ts:868"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"transform",children:"transform"}),"\n",(0,l.jsxs)(n.p,{children:["\u25b8 ",(0,l.jsx)(n.strong,{children:"transform"}),"(): ",(0,l.jsx)(n.code,{children:"null"})," | (",(0,l.jsx)(n.code,{children:"node"}),": ",(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.LexicalNode",children:(0,l.jsx)(n.code,{children:"LexicalNode"})}),") => ",(0,l.jsx)(n.code,{children:"void"})]}),"\n",(0,l.jsxs)(n.p,{children:["Registers the returned function as a transform on the node during\r\nEditor initialization. Most such use cases should be addressed via\r\nthe ",(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.LexicalEditor#registernodetransform",children:"LexicalEditor.registerNodeTransform"})," API."]}),"\n",(0,l.jsx)(n.p,{children:"Experimental - use at your own risk."}),"\n",(0,l.jsx)(n.h4,{id:"returns-47",children:"Returns"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"null"})," | (",(0,l.jsx)(n.code,{children:"node"}),": ",(0,l.jsx)(n.a,{href:"/zh-Hant/docs/api/classes/lexical.LexicalNode",children:(0,l.jsx)(n.code,{children:"LexicalNode"})}),") => ",(0,l.jsx)(n.code,{children:"void"})]}),"\n",(0,l.jsx)(n.h4,{id:"defined-in-48",children:"Defined in"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L884",children:"packages/lexical/src/LexicalNode.ts:884"})})]})}function x(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(h,{...e})}):h(e)}},71184:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>d});var l=i(14041);const s={},t=l.createContext(s);function r(e){const n=l.useContext(t);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),l.createElement(t.Provider,{value:n},e.children)}}}]);