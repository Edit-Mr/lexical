"use strict";(self.webpackChunk_lexical_website=self.webpackChunk_lexical_website||[]).push([[9232],{80118:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>a,contentTitle:()=>d,default:()=>o,frontMatter:()=>n,metadata:()=>t,toc:()=>c});var l=s(31085),i=s(71184);const n={id:"lexical.ParagraphNode",title:"Class: ParagraphNode",custom_edit_url:null},d=void 0,t={id:"api/classes/lexical.ParagraphNode",title:"Class: ParagraphNode",description:"lexical.ParagraphNode",source:"@site/docs/api/classes/lexical.ParagraphNode.md",sourceDirName:"api/classes",slug:"/api/classes/lexical.ParagraphNode",permalink:"/docs/api/classes/lexical.ParagraphNode",draft:!1,unlisted:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"lexical.ParagraphNode",title:"Class: ParagraphNode",custom_edit_url:null},sidebar:"api",previous:{title:"NodeSelection",permalink:"/docs/api/classes/lexical.NodeSelection"},next:{title:"Point",permalink:"/docs/api/classes/lexical.Point"}},a={},c=[{value:"Hierarchy",id:"hierarchy",level:2},{value:"Constructors",id:"constructors",level:2},{value:"constructor",id:"constructor",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Overrides",id:"overrides",level:4},{value:"Defined in",id:"defined-in",level:4},{value:"Properties",id:"properties",level:2},{value:"__textStyle",id:"__textstyle",level:3},{value:"Defined in",id:"defined-in-1",level:4},{value:"constructor",id:"constructor-1",level:3},{value:"Overrides",id:"overrides-1",level:4},{value:"Defined in",id:"defined-in-2",level:4},{value:"Methods",id:"methods",level:2},{value:"afterCloneFrom",id:"afterclonefrom",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Overrides",id:"overrides-2",level:4},{value:"Defined in",id:"defined-in-3",level:4},{value:"collapseAtStart",id:"collapseatstart",level:3},{value:"Returns",id:"returns-2",level:4},{value:"Overrides",id:"overrides-3",level:4},{value:"Defined in",id:"defined-in-4",level:4},{value:"createDOM",id:"createdom",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Overrides",id:"overrides-4",level:4},{value:"Defined in",id:"defined-in-5",level:4},{value:"exportDOM",id:"exportdom",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-4",level:4},{value:"Overrides",id:"overrides-5",level:4},{value:"Defined in",id:"defined-in-6",level:4},{value:"exportJSON",id:"exportjson",level:3},{value:"Returns",id:"returns-5",level:4},{value:"Overrides",id:"overrides-6",level:4},{value:"Defined in",id:"defined-in-7",level:4},{value:"getTextFormat",id:"gettextformat",level:3},{value:"Returns",id:"returns-6",level:4},{value:"Defined in",id:"defined-in-8",level:4},{value:"getTextStyle",id:"gettextstyle",level:3},{value:"Returns",id:"returns-7",level:4},{value:"Defined in",id:"defined-in-9",level:4},{value:"hasTextFormat",id:"hastextformat",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-8",level:4},{value:"Defined in",id:"defined-in-10",level:4},{value:"insertNewAfter",id:"insertnewafter",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-9",level:4},{value:"Overrides",id:"overrides-7",level:4},{value:"Defined in",id:"defined-in-11",level:4},{value:"setTextFormat",id:"settextformat",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-10",level:4},{value:"Defined in",id:"defined-in-12",level:4},{value:"setTextStyle",id:"settextstyle",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"Returns",id:"returns-11",level:4},{value:"Defined in",id:"defined-in-13",level:4},{value:"updateDOM",id:"updatedom",level:3},{value:"Parameters",id:"parameters-8",level:4},{value:"Returns",id:"returns-12",level:4},{value:"Overrides",id:"overrides-8",level:4},{value:"Defined in",id:"defined-in-14",level:4},{value:"clone",id:"clone",level:3},{value:"Parameters",id:"parameters-9",level:4},{value:"Returns",id:"returns-13",level:4},{value:"Overrides",id:"overrides-9",level:4},{value:"Defined in",id:"defined-in-15",level:4},{value:"getType",id:"gettype",level:3},{value:"Returns",id:"returns-14",level:4},{value:"Overrides",id:"overrides-10",level:4},{value:"Defined in",id:"defined-in-16",level:4},{value:"importDOM",id:"importdom",level:3},{value:"Returns",id:"returns-15",level:4},{value:"Overrides",id:"overrides-11",level:4},{value:"Defined in",id:"defined-in-17",level:4},{value:"importJSON",id:"importjson",level:3},{value:"Parameters",id:"parameters-10",level:4},{value:"Returns",id:"returns-16",level:4},{value:"Overrides",id:"overrides-12",level:4},{value:"Defined in",id:"defined-in-18",level:4}];function h(e){const r={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(r.p,{children:[(0,l.jsx)(r.a,{href:"/docs/api/modules/lexical",children:"lexical"}),".ParagraphNode"]}),"\n",(0,l.jsx)(r.h2,{id:"hierarchy",children:"Hierarchy"}),"\n",(0,l.jsxs)(r.ul,{children:["\n",(0,l.jsxs)(r.li,{children:["\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"/docs/api/classes/lexical.ElementNode",children:(0,l.jsx)(r.code,{children:"ElementNode"})})}),"\n",(0,l.jsxs)(r.p,{children:["\u21b3 ",(0,l.jsx)(r.strong,{children:(0,l.jsx)(r.code,{children:"ParagraphNode"})})]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(r.h2,{id:"constructors",children:"Constructors"}),"\n",(0,l.jsx)(r.h3,{id:"constructor",children:"constructor"}),"\n",(0,l.jsxs)(r.p,{children:["\u2022 ",(0,l.jsx)(r.strong,{children:"new ParagraphNode"}),"(",(0,l.jsx)(r.code,{children:"key?"}),"): ",(0,l.jsx)(r.a,{href:"/docs/api/classes/lexical.ParagraphNode",children:(0,l.jsx)(r.code,{children:"ParagraphNode"})})]}),"\n",(0,l.jsx)(r.h4,{id:"parameters",children:"Parameters"}),"\n",(0,l.jsxs)(r.table,{children:[(0,l.jsx)(r.thead,{children:(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(r.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,l.jsx)(r.tbody,{children:(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{style:{textAlign:"left"},children:(0,l.jsx)(r.code,{children:"key?"})}),(0,l.jsx)(r.td,{style:{textAlign:"left"},children:(0,l.jsx)(r.code,{children:"string"})})]})})]}),"\n",(0,l.jsx)(r.h4,{id:"returns",children:"Returns"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"/docs/api/classes/lexical.ParagraphNode",children:(0,l.jsx)(r.code,{children:"ParagraphNode"})})}),"\n",(0,l.jsx)(r.h4,{id:"overrides",children:"Overrides"}),"\n",(0,l.jsxs)(r.p,{children:[(0,l.jsx)(r.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,l.jsx)(r.a,{href:"/docs/api/classes/lexical.ElementNode#constructor",children:"constructor"})]}),"\n",(0,l.jsx)(r.h4,{id:"defined-in",children:"Defined in"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalParagraphNode.ts#L52",children:"packages/lexical/src/nodes/LexicalParagraphNode.ts:52"})}),"\n",(0,l.jsx)(r.h2,{id:"properties",children:"Properties"}),"\n",(0,l.jsx)(r.h3,{id:"__textstyle",children:"__textStyle"}),"\n",(0,l.jsxs)(r.p,{children:["\u2022 ",(0,l.jsx)(r.strong,{children:"__textStyle"}),": ",(0,l.jsx)(r.code,{children:"string"})]}),"\n",(0,l.jsx)(r.h4,{id:"defined-in-1",children:"Defined in"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalParagraphNode.ts#L50",children:"packages/lexical/src/nodes/LexicalParagraphNode.ts:50"})}),"\n",(0,l.jsx)(r.hr,{}),"\n",(0,l.jsx)(r.h3,{id:"constructor-1",children:"constructor"}),"\n",(0,l.jsxs)(r.p,{children:["\u2022 ",(0,l.jsx)(r.strong,{children:"constructor"}),": ",(0,l.jsx)(r.a,{href:"/docs/api/modules/lexical#klassconstructor",children:(0,l.jsx)(r.code,{children:"KlassConstructor"})}),"<typeof ",(0,l.jsx)(r.a,{href:"/docs/api/classes/lexical.ParagraphNode",children:(0,l.jsx)(r.code,{children:"ParagraphNode"})}),">"]}),"\n",(0,l.jsx)(r.h4,{id:"overrides-1",children:"Overrides"}),"\n",(0,l.jsx)(r.p,{children:"ElementNode.constructor"}),"\n",(0,l.jsx)(r.h4,{id:"defined-in-2",children:"Defined in"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalParagraphNode.ts#L47",children:"packages/lexical/src/nodes/LexicalParagraphNode.ts:47"})}),"\n",(0,l.jsx)(r.h2,{id:"methods",children:"Methods"}),"\n",(0,l.jsx)(r.h3,{id:"afterclonefrom",children:"afterCloneFrom"}),"\n",(0,l.jsxs)(r.p,{children:["\u25b8 ",(0,l.jsx)(r.strong,{children:"afterCloneFrom"}),"(",(0,l.jsx)(r.code,{children:"prevNode"}),"): ",(0,l.jsx)(r.code,{children:"void"})]}),"\n",(0,l.jsxs)(r.p,{children:["Perform any state updates on the clone of prevNode that are not already\r\nhandled by the constructor call in the static clone method. If you have\r\nstate to update in your clone that is not handled directly by the\r\nconstructor, it is advisable to override this method but it is required\r\nto include a call to ",(0,l.jsx)(r.code,{children:"super.afterCloneFrom(prevNode)"})," in your\r\nimplementation. This is only intended to be called by\r\n",(0,l.jsx)(r.a,{href:"/docs/api/modules/lexical#clonewithproperties",children:"$cloneWithProperties"})," function or via a super call."]}),"\n",(0,l.jsx)(r.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,l.jsxs)(r.table,{children:[(0,l.jsx)(r.thead,{children:(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(r.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,l.jsx)(r.tbody,{children:(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{style:{textAlign:"left"},children:(0,l.jsx)(r.code,{children:"prevNode"})}),(0,l.jsx)(r.td,{style:{textAlign:"left"},children:(0,l.jsx)(r.code,{children:"this"})})]})})]}),"\n",(0,l.jsx)(r.h4,{id:"returns-1",children:"Returns"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.code,{children:"void"})}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.strong,{children:(0,l.jsx)(r.code,{children:"Example"})})}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-ts",children:"class ClassesTextNode extends TextNode {\r\n  // Not shown: static getType, static importJSON, exportJSON, createDOM, updateDOM\r\n  __classes = new Set<string>();\r\n  static clone(node: ClassesTextNode): ClassesTextNode {\r\n    // The inherited TextNode constructor is used here, so\r\n    // classes is not set by this method.\r\n    return new ClassesTextNode(node.__text, node.__key);\r\n  }\r\n  afterCloneFrom(node: this): void {\r\n    // This calls TextNode.afterCloneFrom and LexicalNode.afterCloneFrom\r\n    // for necessary state updates\r\n    super.afterCloneFrom(node);\r\n    this.__addClasses(node.__classes);\r\n  }\r\n  // This method is a private implementation detail, it is not\r\n  // suitable for the public API because it does not call getWritable\r\n  __addClasses(classNames: Iterable<string>): this {\r\n    for (const className of classNames) {\r\n      this.__classes.add(className);\r\n    }\r\n    return this;\r\n  }\r\n  addClass(...classNames: string[]): this {\r\n    return this.getWritable().__addClasses(classNames);\r\n  }\r\n  removeClass(...classNames: string[]): this {\r\n    const node = this.getWritable();\r\n    for (const className of classNames) {\r\n      this.__classes.delete(className);\r\n    }\r\n    return this;\r\n  }\r\n  getClasses(): Set<string> {\r\n    return this.getLatest().__classes;\r\n  }\r\n}\n"})}),"\n",(0,l.jsx)(r.h4,{id:"overrides-2",children:"Overrides"}),"\n",(0,l.jsxs)(r.p,{children:[(0,l.jsx)(r.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,l.jsx)(r.a,{href:"/docs/api/classes/lexical.ElementNode#afterclonefrom",children:"afterCloneFrom"})]}),"\n",(0,l.jsx)(r.h4,{id:"defined-in-3",children:"Defined in"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalParagraphNode.ts#L93",children:"packages/lexical/src/nodes/LexicalParagraphNode.ts:93"})}),"\n",(0,l.jsx)(r.hr,{}),"\n",(0,l.jsx)(r.h3,{id:"collapseatstart",children:"collapseAtStart"}),"\n",(0,l.jsxs)(r.p,{children:["\u25b8 ",(0,l.jsx)(r.strong,{children:"collapseAtStart"}),"(): ",(0,l.jsx)(r.code,{children:"boolean"})]}),"\n",(0,l.jsx)(r.h4,{id:"returns-2",children:"Returns"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.code,{children:"boolean"})}),"\n",(0,l.jsx)(r.h4,{id:"overrides-3",children:"Overrides"}),"\n",(0,l.jsxs)(r.p,{children:[(0,l.jsx)(r.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,l.jsx)(r.a,{href:"/docs/api/classes/lexical.ElementNode#collapseatstart",children:"collapseAtStart"})]}),"\n",(0,l.jsx)(r.h4,{id:"defined-in-4",children:"Defined in"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalParagraphNode.ts#L191",children:"packages/lexical/src/nodes/LexicalParagraphNode.ts:191"})}),"\n",(0,l.jsx)(r.hr,{}),"\n",(0,l.jsx)(r.h3,{id:"createdom",children:"createDOM"}),"\n",(0,l.jsxs)(r.p,{children:["\u25b8 ",(0,l.jsx)(r.strong,{children:"createDOM"}),"(",(0,l.jsx)(r.code,{children:"config"}),"): ",(0,l.jsx)(r.code,{children:"HTMLElement"})]}),"\n",(0,l.jsx)(r.p,{children:"Called during the reconciliation process to determine which nodes\r\nto insert into the DOM for this Lexical Node."}),"\n",(0,l.jsx)(r.p,{children:"This method must return exactly one HTMLElement. Nested elements are not supported."}),"\n",(0,l.jsx)(r.p,{children:"Do not attempt to update the Lexical EditorState during this phase of the update lifecyle."}),"\n",(0,l.jsx)(r.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,l.jsxs)(r.table,{children:[(0,l.jsx)(r.thead,{children:(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(r.th,{style:{textAlign:"left"},children:"Type"}),(0,l.jsx)(r.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,l.jsx)(r.tbody,{children:(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{style:{textAlign:"left"},children:(0,l.jsx)(r.code,{children:"config"})}),(0,l.jsx)(r.td,{style:{textAlign:"left"},children:(0,l.jsx)(r.a,{href:"/docs/api/modules/lexical#editorconfig",children:(0,l.jsx)(r.code,{children:"EditorConfig"})})}),(0,l.jsx)(r.td,{style:{textAlign:"left"},children:"allows access to things like the EditorTheme (to apply classes) during reconciliation."})]})})]}),"\n",(0,l.jsx)(r.h4,{id:"returns-3",children:"Returns"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.code,{children:"HTMLElement"})}),"\n",(0,l.jsx)(r.h4,{id:"overrides-4",children:"Overrides"}),"\n",(0,l.jsxs)(r.p,{children:[(0,l.jsx)(r.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,l.jsx)(r.a,{href:"/docs/api/classes/lexical.ElementNode#createdom",children:"createDOM"})]}),"\n",(0,l.jsx)(r.h4,{id:"defined-in-5",children:"Defined in"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalParagraphNode.ts#L101",children:"packages/lexical/src/nodes/LexicalParagraphNode.ts:101"})}),"\n",(0,l.jsx)(r.hr,{}),"\n",(0,l.jsx)(r.h3,{id:"exportdom",children:"exportDOM"}),"\n",(0,l.jsxs)(r.p,{children:["\u25b8 ",(0,l.jsx)(r.strong,{children:"exportDOM"}),"(",(0,l.jsx)(r.code,{children:"editor"}),"): ",(0,l.jsx)(r.a,{href:"/docs/api/modules/lexical#domexportoutput",children:(0,l.jsx)(r.code,{children:"DOMExportOutput"})})]}),"\n",(0,l.jsxs)(r.p,{children:["Controls how the this node is serialized to HTML. This is important for\r\ncopy and paste between Lexical and non-Lexical editors, or Lexical editors with different namespaces,\r\nin which case the primary transfer format is HTML. It's also important if you're serializing\r\nto HTML for any other reason via ",(0,l.jsx)(r.a,{href:"/docs/api/modules/lexical_html#generatehtmlfromnodes",children:"$generateHtmlFromNodes"}),". You could\r\nalso use this method to build your own HTML renderer."]}),"\n",(0,l.jsx)(r.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,l.jsxs)(r.table,{children:[(0,l.jsx)(r.thead,{children:(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(r.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,l.jsx)(r.tbody,{children:(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{style:{textAlign:"left"},children:(0,l.jsx)(r.code,{children:"editor"})}),(0,l.jsx)(r.td,{style:{textAlign:"left"},children:(0,l.jsx)(r.a,{href:"/docs/api/classes/lexical.LexicalEditor",children:(0,l.jsx)(r.code,{children:"LexicalEditor"})})})]})})]}),"\n",(0,l.jsx)(r.h4,{id:"returns-4",children:"Returns"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"/docs/api/modules/lexical#domexportoutput",children:(0,l.jsx)(r.code,{children:"DOMExportOutput"})})}),"\n",(0,l.jsx)(r.h4,{id:"overrides-5",children:"Overrides"}),"\n",(0,l.jsxs)(r.p,{children:[(0,l.jsx)(r.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,l.jsx)(r.a,{href:"/docs/api/classes/lexical.ElementNode#exportdom",children:"exportDOM"})]}),"\n",(0,l.jsx)(r.h4,{id:"defined-in-6",children:"Defined in"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalParagraphNode.ts#L127",children:"packages/lexical/src/nodes/LexicalParagraphNode.ts:127"})}),"\n",(0,l.jsx)(r.hr,{}),"\n",(0,l.jsx)(r.h3,{id:"exportjson",children:"exportJSON"}),"\n",(0,l.jsxs)(r.p,{children:["\u25b8 ",(0,l.jsx)(r.strong,{children:"exportJSON"}),"(): ",(0,l.jsx)(r.a,{href:"/docs/api/modules/lexical#serializedparagraphnode",children:(0,l.jsx)(r.code,{children:"SerializedParagraphNode"})})]}),"\n",(0,l.jsxs)(r.p,{children:["Controls how the this node is serialized to JSON. This is important for\r\ncopy and paste between Lexical editors sharing the same namespace. It's also important\r\nif you're serializing to JSON for persistent storage somewhere.\r\nSee ",(0,l.jsx)(r.a,{href:"https://lexical.dev/docs/concepts/serialization#lexical---html",children:"Serialization & Deserialization"}),"."]}),"\n",(0,l.jsx)(r.h4,{id:"returns-5",children:"Returns"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"/docs/api/modules/lexical#serializedparagraphnode",children:(0,l.jsx)(r.code,{children:"SerializedParagraphNode"})})}),"\n",(0,l.jsx)(r.h4,{id:"overrides-6",children:"Overrides"}),"\n",(0,l.jsxs)(r.p,{children:[(0,l.jsx)(r.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,l.jsx)(r.a,{href:"/docs/api/classes/lexical.ElementNode#exportjson",children:"exportJSON"})]}),"\n",(0,l.jsx)(r.h4,{id:"defined-in-7",children:"Defined in"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalParagraphNode.ts#L164",children:"packages/lexical/src/nodes/LexicalParagraphNode.ts:164"})}),"\n",(0,l.jsx)(r.hr,{}),"\n",(0,l.jsx)(r.h3,{id:"gettextformat",children:"getTextFormat"}),"\n",(0,l.jsxs)(r.p,{children:["\u25b8 ",(0,l.jsx)(r.strong,{children:"getTextFormat"}),"(): ",(0,l.jsx)(r.code,{children:"number"})]}),"\n",(0,l.jsx)(r.h4,{id:"returns-6",children:"Returns"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.code,{children:"number"})}),"\n",(0,l.jsx)(r.h4,{id:"defined-in-8",children:"Defined in"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalParagraphNode.ts#L62",children:"packages/lexical/src/nodes/LexicalParagraphNode.ts:62"})}),"\n",(0,l.jsx)(r.hr,{}),"\n",(0,l.jsx)(r.h3,{id:"gettextstyle",children:"getTextStyle"}),"\n",(0,l.jsxs)(r.p,{children:["\u25b8 ",(0,l.jsx)(r.strong,{children:"getTextStyle"}),"(): ",(0,l.jsx)(r.code,{children:"string"})]}),"\n",(0,l.jsx)(r.h4,{id:"returns-7",children:"Returns"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.code,{children:"string"})}),"\n",(0,l.jsx)(r.h4,{id:"defined-in-9",children:"Defined in"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalParagraphNode.ts#L78",children:"packages/lexical/src/nodes/LexicalParagraphNode.ts:78"})}),"\n",(0,l.jsx)(r.hr,{}),"\n",(0,l.jsx)(r.h3,{id:"hastextformat",children:"hasTextFormat"}),"\n",(0,l.jsxs)(r.p,{children:["\u25b8 ",(0,l.jsx)(r.strong,{children:"hasTextFormat"}),"(",(0,l.jsx)(r.code,{children:"type"}),"): ",(0,l.jsx)(r.code,{children:"boolean"})]}),"\n",(0,l.jsx)(r.h4,{id:"parameters-4",children:"Parameters"}),"\n",(0,l.jsxs)(r.table,{children:[(0,l.jsx)(r.thead,{children:(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(r.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,l.jsx)(r.tbody,{children:(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{style:{textAlign:"left"},children:(0,l.jsx)(r.code,{children:"type"})}),(0,l.jsx)(r.td,{style:{textAlign:"left"},children:(0,l.jsx)(r.a,{href:"/docs/api/modules/lexical#textformattype",children:(0,l.jsx)(r.code,{children:"TextFormatType"})})})]})})]}),"\n",(0,l.jsx)(r.h4,{id:"returns-8",children:"Returns"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.code,{children:"boolean"})}),"\n",(0,l.jsx)(r.h4,{id:"defined-in-10",children:"Defined in"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalParagraphNode.ts#L73",children:"packages/lexical/src/nodes/LexicalParagraphNode.ts:73"})}),"\n",(0,l.jsx)(r.hr,{}),"\n",(0,l.jsx)(r.h3,{id:"insertnewafter",children:"insertNewAfter"}),"\n",(0,l.jsxs)(r.p,{children:["\u25b8 ",(0,l.jsx)(r.strong,{children:"insertNewAfter"}),"(",(0,l.jsx)(r.code,{children:"rangeSelection"}),", ",(0,l.jsx)(r.code,{children:"restoreSelection"}),"): ",(0,l.jsx)(r.a,{href:"/docs/api/classes/lexical.ParagraphNode",children:(0,l.jsx)(r.code,{children:"ParagraphNode"})})]}),"\n",(0,l.jsx)(r.h4,{id:"parameters-5",children:"Parameters"}),"\n",(0,l.jsxs)(r.table,{children:[(0,l.jsx)(r.thead,{children:(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(r.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,l.jsxs)(r.tbody,{children:[(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{style:{textAlign:"left"},children:(0,l.jsx)(r.code,{children:"rangeSelection"})}),(0,l.jsx)(r.td,{style:{textAlign:"left"},children:(0,l.jsx)(r.a,{href:"/docs/api/classes/lexical.RangeSelection",children:(0,l.jsx)(r.code,{children:"RangeSelection"})})})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{style:{textAlign:"left"},children:(0,l.jsx)(r.code,{children:"restoreSelection"})}),(0,l.jsx)(r.td,{style:{textAlign:"left"},children:(0,l.jsx)(r.code,{children:"boolean"})})]})]})]}),"\n",(0,l.jsx)(r.h4,{id:"returns-9",children:"Returns"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"/docs/api/classes/lexical.ParagraphNode",children:(0,l.jsx)(r.code,{children:"ParagraphNode"})})}),"\n",(0,l.jsx)(r.h4,{id:"overrides-7",children:"Overrides"}),"\n",(0,l.jsxs)(r.p,{children:[(0,l.jsx)(r.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,l.jsx)(r.a,{href:"/docs/api/classes/lexical.ElementNode#insertnewafter",children:"insertNewAfter"})]}),"\n",(0,l.jsx)(r.h4,{id:"defined-in-11",children:"Defined in"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalParagraphNode.ts#L176",children:"packages/lexical/src/nodes/LexicalParagraphNode.ts:176"})}),"\n",(0,l.jsx)(r.hr,{}),"\n",(0,l.jsx)(r.h3,{id:"settextformat",children:"setTextFormat"}),"\n",(0,l.jsxs)(r.p,{children:["\u25b8 ",(0,l.jsx)(r.strong,{children:"setTextFormat"}),"(",(0,l.jsx)(r.code,{children:"type"}),"): ",(0,l.jsx)(r.code,{children:"this"})]}),"\n",(0,l.jsx)(r.h4,{id:"parameters-6",children:"Parameters"}),"\n",(0,l.jsxs)(r.table,{children:[(0,l.jsx)(r.thead,{children:(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(r.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,l.jsx)(r.tbody,{children:(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{style:{textAlign:"left"},children:(0,l.jsx)(r.code,{children:"type"})}),(0,l.jsx)(r.td,{style:{textAlign:"left"},children:(0,l.jsx)(r.code,{children:"number"})})]})})]}),"\n",(0,l.jsx)(r.h4,{id:"returns-10",children:"Returns"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.code,{children:"this"})}),"\n",(0,l.jsx)(r.h4,{id:"defined-in-12",children:"Defined in"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalParagraphNode.ts#L67",children:"packages/lexical/src/nodes/LexicalParagraphNode.ts:67"})}),"\n",(0,l.jsx)(r.hr,{}),"\n",(0,l.jsx)(r.h3,{id:"settextstyle",children:"setTextStyle"}),"\n",(0,l.jsxs)(r.p,{children:["\u25b8 ",(0,l.jsx)(r.strong,{children:"setTextStyle"}),"(",(0,l.jsx)(r.code,{children:"style"}),"): ",(0,l.jsx)(r.code,{children:"this"})]}),"\n",(0,l.jsx)(r.h4,{id:"parameters-7",children:"Parameters"}),"\n",(0,l.jsxs)(r.table,{children:[(0,l.jsx)(r.thead,{children:(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(r.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,l.jsx)(r.tbody,{children:(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{style:{textAlign:"left"},children:(0,l.jsx)(r.code,{children:"style"})}),(0,l.jsx)(r.td,{style:{textAlign:"left"},children:(0,l.jsx)(r.code,{children:"string"})})]})})]}),"\n",(0,l.jsx)(r.h4,{id:"returns-11",children:"Returns"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.code,{children:"this"})}),"\n",(0,l.jsx)(r.h4,{id:"defined-in-13",children:"Defined in"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalParagraphNode.ts#L83",children:"packages/lexical/src/nodes/LexicalParagraphNode.ts:83"})}),"\n",(0,l.jsx)(r.hr,{}),"\n",(0,l.jsx)(r.h3,{id:"updatedom",children:"updateDOM"}),"\n",(0,l.jsxs)(r.p,{children:["\u25b8 ",(0,l.jsx)(r.strong,{children:"updateDOM"}),"(",(0,l.jsx)(r.code,{children:"prevNode"}),", ",(0,l.jsx)(r.code,{children:"dom"}),", ",(0,l.jsx)(r.code,{children:"config"}),"): ",(0,l.jsx)(r.code,{children:"boolean"})]}),"\n",(0,l.jsx)(r.p,{children:"Called when a node changes and should update the DOM\r\nin whatever way is necessary to make it align with any changes that might\r\nhave happened during the update."}),"\n",(0,l.jsx)(r.p,{children:'Returning "true" here will cause lexical to unmount and recreate the DOM node\r\n(by calling createDOM). You would need to do this if the element tag changes,\r\nfor instance.'}),"\n",(0,l.jsx)(r.h4,{id:"parameters-8",children:"Parameters"}),"\n",(0,l.jsxs)(r.table,{children:[(0,l.jsx)(r.thead,{children:(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(r.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,l.jsxs)(r.tbody,{children:[(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{style:{textAlign:"left"},children:(0,l.jsx)(r.code,{children:"prevNode"})}),(0,l.jsx)(r.td,{style:{textAlign:"left"},children:(0,l.jsx)(r.a,{href:"/docs/api/classes/lexical.ParagraphNode",children:(0,l.jsx)(r.code,{children:"ParagraphNode"})})})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{style:{textAlign:"left"},children:(0,l.jsx)(r.code,{children:"dom"})}),(0,l.jsx)(r.td,{style:{textAlign:"left"},children:(0,l.jsx)(r.code,{children:"HTMLElement"})})]}),(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{style:{textAlign:"left"},children:(0,l.jsx)(r.code,{children:"config"})}),(0,l.jsx)(r.td,{style:{textAlign:"left"},children:(0,l.jsx)(r.a,{href:"/docs/api/modules/lexical#editorconfig",children:(0,l.jsx)(r.code,{children:"EditorConfig"})})})]})]})]}),"\n",(0,l.jsx)(r.h4,{id:"returns-12",children:"Returns"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.code,{children:"boolean"})}),"\n",(0,l.jsx)(r.h4,{id:"overrides-8",children:"Overrides"}),"\n",(0,l.jsxs)(r.p,{children:[(0,l.jsx)(r.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,l.jsx)(r.a,{href:"/docs/api/classes/lexical.ElementNode#updatedom",children:"updateDOM"})]}),"\n",(0,l.jsx)(r.h4,{id:"defined-in-14",children:"Defined in"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalParagraphNode.ts#L110",children:"packages/lexical/src/nodes/LexicalParagraphNode.ts:110"})}),"\n",(0,l.jsx)(r.hr,{}),"\n",(0,l.jsx)(r.h3,{id:"clone",children:"clone"}),"\n",(0,l.jsxs)(r.p,{children:["\u25b8 ",(0,l.jsx)(r.strong,{children:"clone"}),"(",(0,l.jsx)(r.code,{children:"node"}),"): ",(0,l.jsx)(r.a,{href:"/docs/api/classes/lexical.ParagraphNode",children:(0,l.jsx)(r.code,{children:"ParagraphNode"})})]}),"\n",(0,l.jsx)(r.p,{children:"Clones this node, creating a new node with a different key\r\nand adding it to the EditorState (but not attaching it anywhere!). All nodes must\r\nimplement this method."}),"\n",(0,l.jsx)(r.h4,{id:"parameters-9",children:"Parameters"}),"\n",(0,l.jsxs)(r.table,{children:[(0,l.jsx)(r.thead,{children:(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(r.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,l.jsx)(r.tbody,{children:(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{style:{textAlign:"left"},children:(0,l.jsx)(r.code,{children:"node"})}),(0,l.jsx)(r.td,{style:{textAlign:"left"},children:(0,l.jsx)(r.a,{href:"/docs/api/classes/lexical.ParagraphNode",children:(0,l.jsx)(r.code,{children:"ParagraphNode"})})})]})})]}),"\n",(0,l.jsx)(r.h4,{id:"returns-13",children:"Returns"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"/docs/api/classes/lexical.ParagraphNode",children:(0,l.jsx)(r.code,{children:"ParagraphNode"})})}),"\n",(0,l.jsx)(r.h4,{id:"overrides-9",children:"Overrides"}),"\n",(0,l.jsxs)(r.p,{children:[(0,l.jsx)(r.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,l.jsx)(r.a,{href:"/docs/api/classes/lexical.ElementNode#clone",children:"clone"})]}),"\n",(0,l.jsx)(r.h4,{id:"defined-in-15",children:"Defined in"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalParagraphNode.ts#L89",children:"packages/lexical/src/nodes/LexicalParagraphNode.ts:89"})}),"\n",(0,l.jsx)(r.hr,{}),"\n",(0,l.jsx)(r.h3,{id:"gettype",children:"getType"}),"\n",(0,l.jsxs)(r.p,{children:["\u25b8 ",(0,l.jsx)(r.strong,{children:"getType"}),"(): ",(0,l.jsx)(r.code,{children:"string"})]}),"\n",(0,l.jsx)(r.p,{children:"Returns the string type of this node. Every node must\r\nimplement this and it MUST BE UNIQUE amongst nodes registered\r\non the editor."}),"\n",(0,l.jsx)(r.h4,{id:"returns-14",children:"Returns"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.code,{children:"string"})}),"\n",(0,l.jsx)(r.h4,{id:"overrides-10",children:"Overrides"}),"\n",(0,l.jsxs)(r.p,{children:[(0,l.jsx)(r.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,l.jsx)(r.a,{href:"/docs/api/classes/lexical.ElementNode#gettype-1",children:"getType"})]}),"\n",(0,l.jsx)(r.h4,{id:"defined-in-16",children:"Defined in"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalParagraphNode.ts#L58",children:"packages/lexical/src/nodes/LexicalParagraphNode.ts:58"})}),"\n",(0,l.jsx)(r.hr,{}),"\n",(0,l.jsx)(r.h3,{id:"importdom",children:"importDOM"}),"\n",(0,l.jsxs)(r.p,{children:["\u25b8 ",(0,l.jsx)(r.strong,{children:"importDOM"}),"(): ",(0,l.jsx)(r.code,{children:"null"})," | ",(0,l.jsx)(r.a,{href:"/docs/api/modules/lexical#domconversionmap",children:(0,l.jsx)(r.code,{children:"DOMConversionMap"})})]}),"\n",(0,l.jsx)(r.h4,{id:"returns-15",children:"Returns"}),"\n",(0,l.jsxs)(r.p,{children:[(0,l.jsx)(r.code,{children:"null"})," | ",(0,l.jsx)(r.a,{href:"/docs/api/modules/lexical#domconversionmap",children:(0,l.jsx)(r.code,{children:"DOMConversionMap"})})]}),"\n",(0,l.jsx)(r.h4,{id:"overrides-11",children:"Overrides"}),"\n",(0,l.jsx)(r.p,{children:"ElementNode.importDOM"}),"\n",(0,l.jsx)(r.h4,{id:"defined-in-17",children:"Defined in"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalParagraphNode.ts#L118",children:"packages/lexical/src/nodes/LexicalParagraphNode.ts:118"})}),"\n",(0,l.jsx)(r.hr,{}),"\n",(0,l.jsx)(r.h3,{id:"importjson",children:"importJSON"}),"\n",(0,l.jsxs)(r.p,{children:["\u25b8 ",(0,l.jsx)(r.strong,{children:"importJSON"}),"(",(0,l.jsx)(r.code,{children:"serializedNode"}),"): ",(0,l.jsx)(r.a,{href:"/docs/api/classes/lexical.ParagraphNode",children:(0,l.jsx)(r.code,{children:"ParagraphNode"})})]}),"\n",(0,l.jsxs)(r.p,{children:["Controls how the this node is deserialized from JSON. This is usually boilerplate,\r\nbut provides an abstraction between the node implementation and serialized interface that can\r\nbe important if you ever make breaking changes to a node schema (by adding or removing properties).\r\nSee ",(0,l.jsx)(r.a,{href:"https://lexical.dev/docs/concepts/serialization#lexical---html",children:"Serialization & Deserialization"}),"."]}),"\n",(0,l.jsx)(r.h4,{id:"parameters-10",children:"Parameters"}),"\n",(0,l.jsxs)(r.table,{children:[(0,l.jsx)(r.thead,{children:(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(r.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,l.jsx)(r.tbody,{children:(0,l.jsxs)(r.tr,{children:[(0,l.jsx)(r.td,{style:{textAlign:"left"},children:(0,l.jsx)(r.code,{children:"serializedNode"})}),(0,l.jsx)(r.td,{style:{textAlign:"left"},children:(0,l.jsx)(r.a,{href:"/docs/api/modules/lexical#serializedparagraphnode",children:(0,l.jsx)(r.code,{children:"SerializedParagraphNode"})})})]})})]}),"\n",(0,l.jsx)(r.h4,{id:"returns-16",children:"Returns"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"/docs/api/classes/lexical.ParagraphNode",children:(0,l.jsx)(r.code,{children:"ParagraphNode"})})}),"\n",(0,l.jsx)(r.h4,{id:"overrides-12",children:"Overrides"}),"\n",(0,l.jsxs)(r.p,{children:[(0,l.jsx)(r.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,l.jsx)(r.a,{href:"/docs/api/classes/lexical.ElementNode#importjson",children:"importJSON"})]}),"\n",(0,l.jsx)(r.h4,{id:"defined-in-18",children:"Defined in"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalParagraphNode.ts#L155",children:"packages/lexical/src/nodes/LexicalParagraphNode.ts:155"})})]})}function o(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,l.jsx)(r,{...e,children:(0,l.jsx)(h,{...e})}):h(e)}},71184:(e,r,s)=>{s.d(r,{R:()=>d,x:()=>t});var l=s(14041);const i={},n=l.createContext(i);function d(e){const r=l.useContext(n);return l.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function t(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),l.createElement(n.Provider,{value:r},e.children)}}}]);