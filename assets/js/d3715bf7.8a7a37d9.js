"use strict";(self.webpackChunk_lexical_website=self.webpackChunk_lexical_website||[]).push([[8736],{62742:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>i,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>d});var c=r(31085),s=r(71184);const o={},a="Commands",t={id:"concepts/commands",title:"Commands",description:"Commands are a very powerful feature of Lexical that lets you register listeners for events like KEYENTERCOMMAND or KEYTABCOMMAND and contextually react to them wherever & however you'd like.",source:"@site/docs/concepts/commands.md",sourceDirName:"concepts",slug:"/concepts/commands",permalink:"/docs/concepts/commands",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/lexical/tree/main/packages/lexical-website/docs/concepts/commands.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Node Transforms",permalink:"/docs/concepts/transforms"},next:{title:"Selection",permalink:"/docs/concepts/selection"}},i={},d=[{value:"<code>createCommand(...)</code>",id:"createcommand",level:2},{value:"<code>editor.dispatchCommand(...)</code>",id:"editordispatchcommand",level:2},{value:"<code>editor.registerCommand(...)</code>",id:"editorregistercommand",level:2}];function l(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.header,{children:(0,c.jsx)(n.h1,{id:"commands",children:"Commands"})}),"\n",(0,c.jsxs)(n.p,{children:["Commands are a very powerful feature of Lexical that lets you register listeners for events like ",(0,c.jsx)(n.code,{children:"KEY_ENTER_COMMAND"})," or ",(0,c.jsx)(n.code,{children:"KEY_TAB_COMMAND"})," and contextually react to them ",(0,c.jsx)(n.em,{children:"wherever"})," & ",(0,c.jsx)(n.em,{children:"however"})," you'd like."]}),"\n",(0,c.jsxs)(n.p,{children:["This pattern is useful for building ",(0,c.jsx)(n.a,{href:"https://github.com/facebook/lexical/blob/main/packages/lexical-playground/src/plugins/ToolbarPlugin/index.tsx",children:(0,c.jsx)(n.code,{children:"Toolbars"})})," or complex ",(0,c.jsx)(n.code,{children:"Plugins"})," and ",(0,c.jsx)(n.code,{children:"Nodes"})," such as the ",(0,c.jsx)(n.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical-table",children:(0,c.jsx)(n.code,{children:"TablePlugin"})})," which require special handling for ",(0,c.jsx)(n.code,{children:"selection"}),", ",(0,c.jsx)(n.code,{children:"keyboard events"}),", and more."]}),"\n",(0,c.jsxs)(n.p,{children:["When registering a ",(0,c.jsx)(n.code,{children:"command"})," you supply a ",(0,c.jsx)(n.code,{children:"priority"})," and can return ",(0,c.jsx)(n.code,{children:"true"})," to mark it as \"handled\", which stops other listeners from receiving the event. If a command isn't handled explicitly by you, it's likely handled by default in the ",(0,c.jsx)(n.a,{href:"https://github.com/facebook/lexical/blob/main/packages/lexical-rich-text/src/index.ts",children:(0,c.jsx)(n.code,{children:"RichTextPlugin"})})," or the ",(0,c.jsx)(n.a,{href:"https://github.com/facebook/lexical/blob/main/packages/lexical-plain-text/src/index.ts",children:(0,c.jsx)(n.code,{children:"PlainTextPlugin"})}),"."]}),"\n",(0,c.jsx)(n.h2,{id:"createcommand",children:(0,c.jsx)(n.code,{children:"createCommand(...)"})}),"\n",(0,c.jsxs)(n.p,{children:["You can view all of the existing commands in ",(0,c.jsx)(n.a,{href:"https://github.com/facebook/lexical/blob/main/packages/lexical/src/LexicalCommands.ts",children:(0,c.jsx)(n.code,{children:"LexicalCommands.ts"})}),", but if you need a custom command for your own use case check out the typed ",(0,c.jsx)(n.code,{children:"createCommand(...)"})," function."]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"const HELLO_WORLD_COMMAND: LexicalCommand<string> = createCommand();\r\n\r\neditor.dispatchCommand(HELLO_WORLD_COMMAND, 'Hello World!');\r\n\r\neditor.registerCommand(\r\n  HELLO_WORLD_COMMAND,\r\n  (payload: string) => {\r\n    console.log(payload); // Hello World!\r\n    return false;\r\n  },\r\n  LowPriority,\r\n);\n"})}),"\n",(0,c.jsx)(n.h2,{id:"editordispatchcommand",children:(0,c.jsx)(n.code,{children:"editor.dispatchCommand(...)"})}),"\n",(0,c.jsxs)(n.p,{children:["Commands can be dispatched from anywhere you have access to the ",(0,c.jsx)(n.code,{children:"editor"})," such as a Toolbar Button, an event listener, or a Plugin, but most of the core commands are dispatched from ",(0,c.jsx)(n.a,{href:"https://github.com/facebook/lexical/blob/main/packages/lexical/src/LexicalEvents.ts",children:(0,c.jsx)(n.code,{children:"LexicalEvents.ts"})}),"."]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"editor.dispatchCommand(command, payload);\n"})}),"\n",(0,c.jsxs)(n.p,{children:["The ",(0,c.jsx)(n.code,{children:"payload"}),"s are typed via the ",(0,c.jsx)(n.code,{children:"createCommand(...)"})," API, but they're usually a DOM ",(0,c.jsx)(n.code,{children:"event"})," for commands dispatched from an event listener."]}),"\n",(0,c.jsxs)(n.p,{children:["Here are some real examples from ",(0,c.jsx)(n.a,{href:"https://github.com/facebook/lexical/blob/main/packages/lexical/src/LexicalEvents.ts",children:(0,c.jsx)(n.code,{children:"LexicalEvents.ts"})}),"."]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"editor.dispatchCommand(KEY_ARROW_LEFT_COMMAND, event);\r\n// ...\r\neditor.dispatchCommand(FORMAT_TEXT_COMMAND, 'italic');\n"})}),"\n",(0,c.jsxs)(n.p,{children:["And another example from the ",(0,c.jsx)(n.a,{href:"https://github.com/facebook/lexical/blob/main/packages/lexical-playground/src/plugins/ToolbarPlugin/index.tsx",children:(0,c.jsx)(n.code,{children:"ToolbarPlugin"})})," in our Playground."]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"const formatBulletList = () => {\r\n  editor.dispatchCommand(INSERT_UNORDERED_LIST_COMMAND);\r\n};\n"})}),"\n",(0,c.jsxs)(n.p,{children:["Which is later handled in ",(0,c.jsx)(n.a,{href:"https://github.com/facebook/lexical/blob/1f62ace08e15d55515f3750840133efecd6d7d01/packages/lexical-react/src/shared/useList.js#L65",children:(0,c.jsx)(n.code,{children:"useList"})})," to insert the list into the editor."]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"editor.registerCommand(\r\n  INSERT_UNORDERED_LIST_COMMAND,\r\n  () => {\r\n    insertList(editor, 'ul');\r\n    return true;\r\n  },\r\n  COMMAND_PRIORITY_LOW,\r\n);\n"})}),"\n",(0,c.jsx)(n.h2,{id:"editorregistercommand",children:(0,c.jsx)(n.code,{children:"editor.registerCommand(...)"})}),"\n",(0,c.jsxs)(n.p,{children:["You can register a command from anywhere you have access to the ",(0,c.jsx)(n.code,{children:"editor"})," object, but it's important that you remember to clean up the listener with its remove listener callback when it's no longer needed."]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"const removeListener = editor.registerCommand(\r\n  COMMAND,\r\n  (payload) => boolean, // Return true to stop propagation.\r\n  priority,\r\n);\r\n// ...\r\nremoveListener(); // Cleans up the listener.\n"})}),"\n",(0,c.jsxs)(n.p,{children:["A common pattern for easy clean-up is returning a ",(0,c.jsx)(n.code,{children:"registerCommand"})," call within a React ",(0,c.jsx)(n.code,{children:"useEffect"}),"."]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-jsx",children:"useEffect(() => {\r\n  return editor.registerCommand(\r\n    TOGGLE_LINK_COMMAND,\r\n    (payload) => {\r\n      const url: string | null = payload;\r\n      setLink(url);\r\n      return true;\r\n    },\r\n    COMMAND_PRIORITY_EDITOR,\r\n  );\r\n}, [editor]);\n"})}),"\n",(0,c.jsxs)(n.p,{children:["And as seen above and below, ",(0,c.jsx)(n.code,{children:"registerCommand"}),"'s callback can return ",(0,c.jsx)(n.code,{children:"true"})," to signal to the other listeners that the command has been handled and propagation will be stopped."]}),"\n",(0,c.jsxs)(n.p,{children:["Here's a simplified example of handling a ",(0,c.jsx)(n.code,{children:"KEY_TAB_COMMAND"})," from the ",(0,c.jsx)(n.a,{href:"https://github.com/facebook/lexical/blob/76b28f4e2b70f1194cc8148dcc30c9f9ec61f811/packages/lexical-rich-text/src/index.js#L625",children:(0,c.jsx)(n.code,{children:"RichTextPlugin"})}),", which is used to dispatch a ",(0,c.jsx)(n.code,{children:"OUTDENT_CONTENT_COMMAND"})," or ",(0,c.jsx)(n.code,{children:"INDENT_CONTENT_COMMAND"}),"."]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"editor.registerCommand(\r\n  KEY_TAB_COMMAND,\r\n  (payload) => {\r\n    const event: KeyboardEvent = payload;\r\n    event.preventDefault();\r\n    return editor.dispatchCommand(\r\n      event.shiftKey ? OUTDENT_CONTENT_COMMAND : INDENT_CONTENT_COMMAND,\r\n    );\r\n  },\r\n  COMMAND_PRIORITY_EDITOR,\r\n);\n"})}),"\n",(0,c.jsxs)(n.p,{children:["Note that the same ",(0,c.jsx)(n.code,{children:"KEY_TAB_COMMAND"})," command is registered by ",(0,c.jsx)(n.a,{href:"https://github.com/facebook/lexical/blob/1f62ace08e15d55515f3750840133efecd6d7d01/packages/lexical-table/src/LexicalTableSelectionHelpers.js#L733",children:(0,c.jsx)(n.code,{children:"LexicalTableSelectionHelpers.js"})}),", which handles moving focus to the next or previous cell within a ",(0,c.jsx)(n.code,{children:"Table"}),", but the priority is the highest it can be (",(0,c.jsx)(n.code,{children:"4"}),") because this behavior is very important."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(l,{...e})}):l(e)}},71184:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>t});var c=r(14041);const s={},o=c.createContext(s);function a(e){const n=c.useContext(o);return c.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),c.createElement(o.Provider,{value:n},e.children)}}}]);