"use strict";(self.webpackChunk_lexical_website=self.webpackChunk_lexical_website||[]).push([[439],{74512:(e,l,i)=>{i.r(l),i.d(l,{assets:()=>c,contentTitle:()=>r,default:()=>x,frontMatter:()=>d,metadata:()=>t,toc:()=>a});var n=i(31085),s=i(71184);const d={id:"lexical.ElementNode",title:"Class: ElementNode",custom_edit_url:null},r=void 0,t={id:"api/classes/lexical.ElementNode",title:"Class: ElementNode",description:"lexical.ElementNode",source:"@site/docs/api/classes/lexical.ElementNode.md",sourceDirName:"api/classes",slug:"/api/classes/lexical.ElementNode",permalink:"/docs/api/classes/lexical.ElementNode",draft:!1,unlisted:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"lexical.ElementNode",title:"Class: ElementNode",custom_edit_url:null},sidebar:"api",previous:{title:"EditorState",permalink:"/docs/api/classes/lexical.EditorState"},next:{title:"LexicalEditor",permalink:"/docs/api/classes/lexical.LexicalEditor"}},c={},a=[{value:"Hierarchy",id:"hierarchy",level:2},{value:"Constructors",id:"constructors",level:2},{value:"constructor",id:"constructor",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Inherited from",id:"inherited-from",level:4},{value:"Defined in",id:"defined-in",level:4},{value:"Properties",id:"properties",level:2},{value:"constructor",id:"constructor-1",level:3},{value:"Defined in",id:"defined-in-1",level:4},{value:"importDOM",id:"importdom",level:3},{value:"Type declaration",id:"type-declaration",level:4},{value:"Returns",id:"returns-1",level:5},{value:"Inherited from",id:"inherited-from-1",level:4},{value:"Defined in",id:"defined-in-2",level:4},{value:"Methods",id:"methods",level:2},{value:"afterCloneFrom",id:"afterclonefrom",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Inherited from",id:"inherited-from-2",level:4},{value:"Defined in",id:"defined-in-3",level:4},{value:"append",id:"append",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Defined in",id:"defined-in-4",level:4},{value:"canBeEmpty",id:"canbeempty",level:3},{value:"Returns",id:"returns-4",level:4},{value:"Defined in",id:"defined-in-5",level:4},{value:"canIndent",id:"canindent",level:3},{value:"Returns",id:"returns-5",level:4},{value:"Defined in",id:"defined-in-6",level:4},{value:"canInsertTextAfter",id:"caninserttextafter",level:3},{value:"Returns",id:"returns-6",level:4},{value:"Defined in",id:"defined-in-7",level:4},{value:"canInsertTextBefore",id:"caninserttextbefore",level:3},{value:"Returns",id:"returns-7",level:4},{value:"Defined in",id:"defined-in-8",level:4},{value:"canMergeWhenEmpty",id:"canmergewhenempty",level:3},{value:"Returns",id:"returns-8",level:4},{value:"Defined in",id:"defined-in-9",level:4},{value:"clear",id:"clear",level:3},{value:"Returns",id:"returns-9",level:4},{value:"Defined in",id:"defined-in-10",level:4},{value:"collapseAtStart",id:"collapseatstart",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-10",level:4},{value:"Defined in",id:"defined-in-11",level:4},{value:"createDOM",id:"createdom",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-11",level:4},{value:"Inherited from",id:"inherited-from-3",level:4},{value:"Defined in",id:"defined-in-12",level:4},{value:"createParentElementNode",id:"createparentelementnode",level:3},{value:"Returns",id:"returns-12",level:4},{value:"Inherited from",id:"inherited-from-4",level:4},{value:"Defined in",id:"defined-in-13",level:4},{value:"excludeFromCopy",id:"excludefromcopy",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-13",level:4},{value:"Defined in",id:"defined-in-14",level:4},{value:"exportDOM",id:"exportdom",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-14",level:4},{value:"Inherited from",id:"inherited-from-5",level:4},{value:"Defined in",id:"defined-in-15",level:4},{value:"exportJSON",id:"exportjson",level:3},{value:"Returns",id:"returns-15",level:4},{value:"Inherited from",id:"inherited-from-6",level:4},{value:"Defined in",id:"defined-in-16",level:4},{value:"extractWithChild",id:"extractwithchild",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"Returns",id:"returns-16",level:4},{value:"Defined in",id:"defined-in-17",level:4},{value:"getAllTextNodes",id:"getalltextnodes",level:3},{value:"Returns",id:"returns-17",level:4},{value:"Defined in",id:"defined-in-18",level:4},{value:"getChildAtIndex",id:"getchildatindex",level:3},{value:"Type parameters",id:"type-parameters",level:4},{value:"Parameters",id:"parameters-8",level:4},{value:"Returns",id:"returns-18",level:4},{value:"Defined in",id:"defined-in-19",level:4},{value:"getChildren",id:"getchildren",level:3},{value:"Type parameters",id:"type-parameters-1",level:4},{value:"Returns",id:"returns-19",level:4},{value:"Defined in",id:"defined-in-20",level:4},{value:"getChildrenKeys",id:"getchildrenkeys",level:3},{value:"Returns",id:"returns-20",level:4},{value:"Defined in",id:"defined-in-21",level:4},{value:"getChildrenSize",id:"getchildrensize",level:3},{value:"Returns",id:"returns-21",level:4},{value:"Defined in",id:"defined-in-22",level:4},{value:"getCommonAncestor",id:"getcommonancestor",level:3},{value:"Type parameters",id:"type-parameters-2",level:4},{value:"Parameters",id:"parameters-9",level:4},{value:"Returns",id:"returns-22",level:4},{value:"Inherited from",id:"inherited-from-7",level:4},{value:"Defined in",id:"defined-in-23",level:4},{value:"getDescendantByIndex",id:"getdescendantbyindex",level:3},{value:"Type parameters",id:"type-parameters-3",level:4},{value:"Parameters",id:"parameters-10",level:4},{value:"Returns",id:"returns-23",level:4},{value:"Defined in",id:"defined-in-24",level:4},{value:"getDirection",id:"getdirection",level:3},{value:"Returns",id:"returns-24",level:4},{value:"Defined in",id:"defined-in-25",level:4},{value:"getFirstChild",id:"getfirstchild",level:3},{value:"Type parameters",id:"type-parameters-4",level:4},{value:"Returns",id:"returns-25",level:4},{value:"Defined in",id:"defined-in-26",level:4},{value:"getFirstChildOrThrow",id:"getfirstchildorthrow",level:3},{value:"Type parameters",id:"type-parameters-5",level:4},{value:"Returns",id:"returns-26",level:4},{value:"Defined in",id:"defined-in-27",level:4},{value:"getFirstDescendant",id:"getfirstdescendant",level:3},{value:"Type parameters",id:"type-parameters-6",level:4},{value:"Returns",id:"returns-27",level:4},{value:"Defined in",id:"defined-in-28",level:4},{value:"getFormat",id:"getformat",level:3},{value:"Returns",id:"returns-28",level:4},{value:"Defined in",id:"defined-in-29",level:4},{value:"getFormatType",id:"getformattype",level:3},{value:"Returns",id:"returns-29",level:4},{value:"Defined in",id:"defined-in-30",level:4},{value:"getIndent",id:"getindent",level:3},{value:"Returns",id:"returns-30",level:4},{value:"Defined in",id:"defined-in-31",level:4},{value:"getIndexWithinParent",id:"getindexwithinparent",level:3},{value:"Returns",id:"returns-31",level:4},{value:"Inherited from",id:"inherited-from-8",level:4},{value:"Defined in",id:"defined-in-32",level:4},{value:"getKey",id:"getkey",level:3},{value:"Returns",id:"returns-32",level:4},{value:"Inherited from",id:"inherited-from-9",level:4},{value:"Defined in",id:"defined-in-33",level:4},{value:"getLastChild",id:"getlastchild",level:3},{value:"Type parameters",id:"type-parameters-7",level:4},{value:"Returns",id:"returns-33",level:4},{value:"Defined in",id:"defined-in-34",level:4},{value:"getLastChildOrThrow",id:"getlastchildorthrow",level:3},{value:"Type parameters",id:"type-parameters-8",level:4},{value:"Returns",id:"returns-34",level:4},{value:"Defined in",id:"defined-in-35",level:4},{value:"getLastDescendant",id:"getlastdescendant",level:3},{value:"Type parameters",id:"type-parameters-9",level:4},{value:"Returns",id:"returns-35",level:4},{value:"Defined in",id:"defined-in-36",level:4},{value:"getLatest",id:"getlatest",level:3},{value:"Returns",id:"returns-36",level:4},{value:"Inherited from",id:"inherited-from-10",level:4},{value:"Defined in",id:"defined-in-37",level:4},{value:"getNextSibling",id:"getnextsibling",level:3},{value:"Type parameters",id:"type-parameters-10",level:4},{value:"Returns",id:"returns-37",level:4},{value:"Inherited from",id:"inherited-from-11",level:4},{value:"Defined in",id:"defined-in-38",level:4},{value:"getNextSiblings",id:"getnextsiblings",level:3},{value:"Type parameters",id:"type-parameters-11",level:4},{value:"Returns",id:"returns-38",level:4},{value:"Inherited from",id:"inherited-from-12",level:4},{value:"Defined in",id:"defined-in-39",level:4},{value:"getNodesBetween",id:"getnodesbetween",level:3},{value:"Parameters",id:"parameters-11",level:4},{value:"Returns",id:"returns-39",level:4},{value:"Inherited from",id:"inherited-from-13",level:4},{value:"Defined in",id:"defined-in-40",level:4},{value:"getParent",id:"getparent",level:3},{value:"Type parameters",id:"type-parameters-12",level:4},{value:"Returns",id:"returns-40",level:4},{value:"Inherited from",id:"inherited-from-14",level:4},{value:"Defined in",id:"defined-in-41",level:4},{value:"getParentKeys",id:"getparentkeys",level:3},{value:"Returns",id:"returns-41",level:4},{value:"Inherited from",id:"inherited-from-15",level:4},{value:"Defined in",id:"defined-in-42",level:4},{value:"getParentOrThrow",id:"getparentorthrow",level:3},{value:"Type parameters",id:"type-parameters-13",level:4},{value:"Returns",id:"returns-42",level:4},{value:"Inherited from",id:"inherited-from-16",level:4},{value:"Defined in",id:"defined-in-43",level:4},{value:"getParents",id:"getparents",level:3},{value:"Returns",id:"returns-43",level:4},{value:"Inherited from",id:"inherited-from-17",level:4},{value:"Defined in",id:"defined-in-44",level:4},{value:"getPreviousSibling",id:"getprevioussibling",level:3},{value:"Type parameters",id:"type-parameters-14",level:4},{value:"Returns",id:"returns-44",level:4},{value:"Inherited from",id:"inherited-from-18",level:4},{value:"Defined in",id:"defined-in-45",level:4},{value:"getPreviousSiblings",id:"getprevioussiblings",level:3},{value:"Type parameters",id:"type-parameters-15",level:4},{value:"Returns",id:"returns-45",level:4},{value:"Inherited from",id:"inherited-from-19",level:4},{value:"Defined in",id:"defined-in-46",level:4},{value:"getStyle",id:"getstyle",level:3},{value:"Returns",id:"returns-46",level:4},{value:"Defined in",id:"defined-in-47",level:4},{value:"getTextContent",id:"gettextcontent",level:3},{value:"Returns",id:"returns-47",level:4},{value:"Inherited from",id:"inherited-from-20",level:4},{value:"Defined in",id:"defined-in-48",level:4},{value:"getTextContentSize",id:"gettextcontentsize",level:3},{value:"Returns",id:"returns-48",level:4},{value:"Inherited from",id:"inherited-from-21",level:4},{value:"Defined in",id:"defined-in-49",level:4},{value:"getTopLevelElement",id:"gettoplevelelement",level:3},{value:"Returns",id:"returns-49",level:4},{value:"Inherited from",id:"inherited-from-22",level:4},{value:"Defined in",id:"defined-in-50",level:4},{value:"getTopLevelElementOrThrow",id:"gettoplevelelementorthrow",level:3},{value:"Returns",id:"returns-50",level:4},{value:"Inherited from",id:"inherited-from-23",level:4},{value:"Defined in",id:"defined-in-51",level:4},{value:"getType",id:"gettype",level:3},{value:"Returns",id:"returns-51",level:4},{value:"Inherited from",id:"inherited-from-24",level:4},{value:"Defined in",id:"defined-in-52",level:4},{value:"getWritable",id:"getwritable",level:3},{value:"Returns",id:"returns-52",level:4},{value:"Inherited from",id:"inherited-from-25",level:4},{value:"Defined in",id:"defined-in-53",level:4},{value:"hasFormat",id:"hasformat",level:3},{value:"Parameters",id:"parameters-12",level:4},{value:"Returns",id:"returns-53",level:4},{value:"Defined in",id:"defined-in-54",level:4},{value:"insertAfter",id:"insertafter",level:3},{value:"Parameters",id:"parameters-13",level:4},{value:"Returns",id:"returns-54",level:4},{value:"Inherited from",id:"inherited-from-26",level:4},{value:"Defined in",id:"defined-in-55",level:4},{value:"insertBefore",id:"insertbefore",level:3},{value:"Parameters",id:"parameters-14",level:4},{value:"Returns",id:"returns-55",level:4},{value:"Inherited from",id:"inherited-from-27",level:4},{value:"Defined in",id:"defined-in-56",level:4},{value:"insertNewAfter",id:"insertnewafter",level:3},{value:"Parameters",id:"parameters-15",level:4},{value:"Returns",id:"returns-56",level:4},{value:"Defined in",id:"defined-in-57",level:4},{value:"is",id:"is",level:3},{value:"Parameters",id:"parameters-16",level:4},{value:"Returns",id:"returns-57",level:4},{value:"Inherited from",id:"inherited-from-28",level:4},{value:"Defined in",id:"defined-in-58",level:4},{value:"isAttached",id:"isattached",level:3},{value:"Returns",id:"returns-58",level:4},{value:"Inherited from",id:"inherited-from-29",level:4},{value:"Defined in",id:"defined-in-59",level:4},{value:"isBefore",id:"isbefore",level:3},{value:"Parameters",id:"parameters-17",level:4},{value:"Returns",id:"returns-59",level:4},{value:"Inherited from",id:"inherited-from-30",level:4},{value:"Defined in",id:"defined-in-60",level:4},{value:"isDirty",id:"isdirty",level:3},{value:"Returns",id:"returns-60",level:4},{value:"Inherited from",id:"inherited-from-31",level:4},{value:"Defined in",id:"defined-in-61",level:4},{value:"isEmpty",id:"isempty",level:3},{value:"Returns",id:"returns-61",level:4},{value:"Defined in",id:"defined-in-62",level:4},{value:"isInline",id:"isinline",level:3},{value:"Returns",id:"returns-62",level:4},{value:"Inherited from",id:"inherited-from-32",level:4},{value:"Defined in",id:"defined-in-63",level:4},{value:"isLastChild",id:"islastchild",level:3},{value:"Returns",id:"returns-63",level:4},{value:"Defined in",id:"defined-in-64",level:4},{value:"isParentOf",id:"isparentof",level:3},{value:"Parameters",id:"parameters-18",level:4},{value:"Returns",id:"returns-64",level:4},{value:"Inherited from",id:"inherited-from-33",level:4},{value:"Defined in",id:"defined-in-65",level:4},{value:"isParentRequired",id:"isparentrequired",level:3},{value:"Returns",id:"returns-65",level:4},{value:"Inherited from",id:"inherited-from-34",level:4},{value:"Defined in",id:"defined-in-66",level:4},{value:"isSelected",id:"isselected",level:3},{value:"Parameters",id:"parameters-19",level:4},{value:"Returns",id:"returns-66",level:4},{value:"Inherited from",id:"inherited-from-35",level:4},{value:"Defined in",id:"defined-in-67",level:4},{value:"isShadowRoot",id:"isshadowroot",level:3},{value:"Returns",id:"returns-67",level:4},{value:"Defined in",id:"defined-in-68",level:4},{value:"markDirty",id:"markdirty",level:3},{value:"Returns",id:"returns-68",level:4},{value:"Inherited from",id:"inherited-from-36",level:4},{value:"Defined in",id:"defined-in-69",level:4},{value:"remove",id:"remove",level:3},{value:"Parameters",id:"parameters-20",level:4},{value:"Returns",id:"returns-69",level:4},{value:"Inherited from",id:"inherited-from-37",level:4},{value:"Defined in",id:"defined-in-70",level:4},{value:"replace",id:"replace",level:3},{value:"Type parameters",id:"type-parameters-16",level:4},{value:"Parameters",id:"parameters-21",level:4},{value:"Returns",id:"returns-70",level:4},{value:"Inherited from",id:"inherited-from-38",level:4},{value:"Defined in",id:"defined-in-71",level:4},{value:"select",id:"select",level:3},{value:"Parameters",id:"parameters-22",level:4},{value:"Returns",id:"returns-71",level:4},{value:"Defined in",id:"defined-in-72",level:4},{value:"selectEnd",id:"selectend",level:3},{value:"Returns",id:"returns-72",level:4},{value:"Inherited from",id:"inherited-from-39",level:4},{value:"Defined in",id:"defined-in-73",level:4},{value:"selectNext",id:"selectnext",level:3},{value:"Parameters",id:"parameters-23",level:4},{value:"Returns",id:"returns-73",level:4},{value:"Inherited from",id:"inherited-from-40",level:4},{value:"Defined in",id:"defined-in-74",level:4},{value:"selectPrevious",id:"selectprevious",level:3},{value:"Parameters",id:"parameters-24",level:4},{value:"Returns",id:"returns-74",level:4},{value:"Inherited from",id:"inherited-from-41",level:4},{value:"Defined in",id:"defined-in-75",level:4},{value:"selectStart",id:"selectstart",level:3},{value:"Returns",id:"returns-75",level:4},{value:"Inherited from",id:"inherited-from-42",level:4},{value:"Defined in",id:"defined-in-76",level:4},{value:"setDirection",id:"setdirection",level:3},{value:"Parameters",id:"parameters-25",level:4},{value:"Returns",id:"returns-76",level:4},{value:"Defined in",id:"defined-in-77",level:4},{value:"setFormat",id:"setformat",level:3},{value:"Parameters",id:"parameters-26",level:4},{value:"Returns",id:"returns-77",level:4},{value:"Defined in",id:"defined-in-78",level:4},{value:"setIndent",id:"setindent",level:3},{value:"Parameters",id:"parameters-27",level:4},{value:"Returns",id:"returns-78",level:4},{value:"Defined in",id:"defined-in-79",level:4},{value:"setStyle",id:"setstyle",level:3},{value:"Parameters",id:"parameters-28",level:4},{value:"Returns",id:"returns-79",level:4},{value:"Defined in",id:"defined-in-80",level:4},{value:"splice",id:"splice",level:3},{value:"Parameters",id:"parameters-29",level:4},{value:"Returns",id:"returns-80",level:4},{value:"Defined in",id:"defined-in-81",level:4},{value:"updateDOM",id:"updatedom",level:3},{value:"Parameters",id:"parameters-30",level:4},{value:"Returns",id:"returns-81",level:4},{value:"Inherited from",id:"inherited-from-43",level:4},{value:"Defined in",id:"defined-in-82",level:4},{value:"clone",id:"clone",level:3},{value:"Parameters",id:"parameters-31",level:4},{value:"Returns",id:"returns-82",level:4},{value:"Inherited from",id:"inherited-from-44",level:4},{value:"Defined in",id:"defined-in-83",level:4},{value:"getType",id:"gettype-1",level:3},{value:"Returns",id:"returns-83",level:4},{value:"Inherited from",id:"inherited-from-45",level:4},{value:"Defined in",id:"defined-in-84",level:4},{value:"importJSON",id:"importjson",level:3},{value:"Parameters",id:"parameters-32",level:4},{value:"Returns",id:"returns-84",level:4},{value:"Inherited from",id:"inherited-from-46",level:4},{value:"Defined in",id:"defined-in-85",level:4},{value:"transform",id:"transform",level:3},{value:"Returns",id:"returns-85",level:4},{value:"Inherited from",id:"inherited-from-47",level:4},{value:"Defined in",id:"defined-in-86",level:4}];function h(e){const l={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",h5:"h5",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/modules/lexical",children:"lexical"}),".ElementNode"]}),"\n",(0,n.jsx)(l.h2,{id:"hierarchy",children:"Hierarchy"}),"\n",(0,n.jsxs)(l.ul,{children:["\n",(0,n.jsxs)(l.li,{children:["\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(l.code,{children:"LexicalNode"})})}),"\n",(0,n.jsxs)(l.p,{children:["\u21b3 ",(0,n.jsx)(l.strong,{children:(0,n.jsx)(l.code,{children:"ElementNode"})})]}),"\n",(0,n.jsxs)(l.p,{children:["\u21b3\u21b3 ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical_link.LinkNode",children:(0,n.jsx)(l.code,{children:"LinkNode"})})]}),"\n",(0,n.jsxs)(l.p,{children:["\u21b3\u21b3 ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical_overflow.OverflowNode",children:(0,n.jsx)(l.code,{children:"OverflowNode"})})]}),"\n",(0,n.jsxs)(l.p,{children:["\u21b3\u21b3 ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical_rich_text.QuoteNode",children:(0,n.jsx)(l.code,{children:"QuoteNode"})})]}),"\n",(0,n.jsxs)(l.p,{children:["\u21b3\u21b3 ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical_rich_text.HeadingNode",children:(0,n.jsx)(l.code,{children:"HeadingNode"})})]}),"\n",(0,n.jsxs)(l.p,{children:["\u21b3\u21b3 ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ArtificialNode__DO_NOT_USE",children:(0,n.jsx)(l.code,{children:"ArtificialNode__DO_NOT_USE"})})]}),"\n",(0,n.jsxs)(l.p,{children:["\u21b3\u21b3 ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ParagraphNode",children:(0,n.jsx)(l.code,{children:"ParagraphNode"})})]}),"\n",(0,n.jsxs)(l.p,{children:["\u21b3\u21b3 ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.RootNode",children:(0,n.jsx)(l.code,{children:"RootNode"})})]}),"\n",(0,n.jsxs)(l.p,{children:["\u21b3\u21b3 ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical_code.CodeNode",children:(0,n.jsx)(l.code,{children:"CodeNode"})})]}),"\n",(0,n.jsxs)(l.p,{children:["\u21b3\u21b3 ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical_list.ListItemNode",children:(0,n.jsx)(l.code,{children:"ListItemNode"})})]}),"\n",(0,n.jsxs)(l.p,{children:["\u21b3\u21b3 ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical_list.ListNode",children:(0,n.jsx)(l.code,{children:"ListNode"})})]}),"\n",(0,n.jsxs)(l.p,{children:["\u21b3\u21b3 ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical_mark.MarkNode",children:(0,n.jsx)(l.code,{children:"MarkNode"})})]}),"\n",(0,n.jsxs)(l.p,{children:["\u21b3\u21b3 ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical_table.TableCellNode",children:(0,n.jsx)(l.code,{children:"TableCellNode"})})]}),"\n",(0,n.jsxs)(l.p,{children:["\u21b3\u21b3 ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical_table.TableNode",children:(0,n.jsx)(l.code,{children:"TableNode"})})]}),"\n",(0,n.jsxs)(l.p,{children:["\u21b3\u21b3 ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical_table.TableRowNode",children:(0,n.jsx)(l.code,{children:"TableRowNode"})})]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(l.h2,{id:"constructors",children:"Constructors"}),"\n",(0,n.jsx)(l.h3,{id:"constructor",children:"constructor"}),"\n",(0,n.jsxs)(l.p,{children:["\u2022 ",(0,n.jsx)(l.strong,{children:"new ElementNode"}),"(",(0,n.jsx)(l.code,{children:"key?"}),"): ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode",children:(0,n.jsx)(l.code,{children:"ElementNode"})})]}),"\n",(0,n.jsx)(l.h4,{id:"parameters",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"key?"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"string"})})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode",children:(0,n.jsx)(l.code,{children:"ElementNode"})})}),"\n",(0,n.jsx)(l.h4,{id:"inherited-from",children:"Inherited from"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:"LexicalNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode#constructor",children:"constructor"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalElementNode.ts#L85",children:"packages/lexical/src/nodes/LexicalElementNode.ts:85"})}),"\n",(0,n.jsx)(l.h2,{id:"properties",children:"Properties"}),"\n",(0,n.jsx)(l.h3,{id:"constructor-1",children:"constructor"}),"\n",(0,n.jsxs)(l.p,{children:["\u2022 ",(0,n.jsx)(l.strong,{children:"constructor"}),": ",(0,n.jsx)(l.a,{href:"/docs/api/modules/lexical#klassconstructor",children:(0,n.jsx)(l.code,{children:"KlassConstructor"})}),"<typeof ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode",children:(0,n.jsx)(l.code,{children:"ElementNode"})}),">"]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-1",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalElementNode.ts#L69",children:"packages/lexical/src/nodes/LexicalElementNode.ts:69"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"importdom",children:"importDOM"}),"\n",(0,n.jsxs)(l.p,{children:["\u25aa ",(0,n.jsx)(l.code,{children:"Static"})," ",(0,n.jsx)(l.code,{children:"Optional"})," ",(0,n.jsx)(l.strong,{children:"importDOM"}),": () => ",(0,n.jsx)(l.code,{children:"null"})," | ",(0,n.jsx)(l.a,{href:"/docs/api/modules/lexical#domconversionmap",children:(0,n.jsx)(l.code,{children:"DOMConversionMap"})}),"<",(0,n.jsx)(l.code,{children:"any"}),">"]}),"\n",(0,n.jsx)(l.h4,{id:"type-declaration",children:"Type declaration"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 (): ",(0,n.jsx)(l.code,{children:"null"})," | ",(0,n.jsx)(l.a,{href:"/docs/api/modules/lexical#domconversionmap",children:(0,n.jsx)(l.code,{children:"DOMConversionMap"})}),"<",(0,n.jsx)(l.code,{children:"any"}),">"]}),"\n",(0,n.jsx)(l.h5,{id:"returns-1",children:"Returns"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.code,{children:"null"})," | ",(0,n.jsx)(l.a,{href:"/docs/api/modules/lexical#domconversionmap",children:(0,n.jsx)(l.code,{children:"DOMConversionMap"})}),"<",(0,n.jsx)(l.code,{children:"any"}),">"]}),"\n",(0,n.jsx)(l.h4,{id:"inherited-from-1",children:"Inherited from"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:"LexicalNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode#importdom",children:"importDOM"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-2",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L265",children:"packages/lexical/src/LexicalNode.ts:265"})}),"\n",(0,n.jsx)(l.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(l.h3,{id:"afterclonefrom",children:"afterCloneFrom"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"afterCloneFrom"}),"(",(0,n.jsx)(l.code,{children:"prevNode"}),"): ",(0,n.jsx)(l.code,{children:"void"})]}),"\n",(0,n.jsxs)(l.p,{children:["Perform any state updates on the clone of prevNode that are not already\r\nhandled by the constructor call in the static clone method. If you have\r\nstate to update in your clone that is not handled directly by the\r\nconstructor, it is advisable to override this method but it is required\r\nto include a call to ",(0,n.jsx)(l.code,{children:"super.afterCloneFrom(prevNode)"})," in your\r\nimplementation. This is only intended to be called by\r\n",(0,n.jsx)(l.a,{href:"/docs/api/modules/lexical#clonewithproperties",children:"$cloneWithProperties"})," function or via a super call."]}),"\n",(0,n.jsx)(l.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"prevNode"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"this"})})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-2",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"void"})}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.strong,{children:(0,n.jsx)(l.code,{children:"Example"})})}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-ts",children:"class ClassesTextNode extends TextNode {\r\n  // Not shown: static getType, static importJSON, exportJSON, createDOM, updateDOM\r\n  __classes = new Set<string>();\r\n  static clone(node: ClassesTextNode): ClassesTextNode {\r\n    // The inherited TextNode constructor is used here, so\r\n    // classes is not set by this method.\r\n    return new ClassesTextNode(node.__text, node.__key);\r\n  }\r\n  afterCloneFrom(node: this): void {\r\n    // This calls TextNode.afterCloneFrom and LexicalNode.afterCloneFrom\r\n    // for necessary state updates\r\n    super.afterCloneFrom(node);\r\n    this.__addClasses(node.__classes);\r\n  }\r\n  // This method is a private implementation detail, it is not\r\n  // suitable for the public API because it does not call getWritable\r\n  __addClasses(classNames: Iterable<string>): this {\r\n    for (const className of classNames) {\r\n      this.__classes.add(className);\r\n    }\r\n    return this;\r\n  }\r\n  addClass(...classNames: string[]): this {\r\n    return this.getWritable().__addClasses(classNames);\r\n  }\r\n  removeClass(...classNames: string[]): this {\r\n    const node = this.getWritable();\r\n    for (const className of classNames) {\r\n      this.__classes.delete(className);\r\n    }\r\n    return this;\r\n  }\r\n  getClasses(): Set<string> {\r\n    return this.getLatest().__classes;\r\n  }\r\n}\n"})}),"\n",(0,n.jsx)(l.h4,{id:"inherited-from-2",children:"Inherited from"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:"LexicalNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode#afterclonefrom",children:"afterCloneFrom"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-3",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalElementNode.ts#L96",children:"packages/lexical/src/nodes/LexicalElementNode.ts:96"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"append",children:"append"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"append"}),"(",(0,n.jsx)(l.code,{children:"...nodesToAppend"}),"): ",(0,n.jsx)(l.code,{children:"this"})]}),"\n",(0,n.jsx)(l.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"...nodesToAppend"})}),(0,n.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(l.code,{children:"LexicalNode"})}),"[]"]})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-3",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"this"})}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-4",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalElementNode.ts#L373",children:"packages/lexical/src/nodes/LexicalElementNode.ts:373"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"canbeempty",children:"canBeEmpty"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"canBeEmpty"}),"(): ",(0,n.jsx)(l.code,{children:"boolean"})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-4",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"boolean"})}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-5",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalElementNode.ts#L566",children:"packages/lexical/src/nodes/LexicalElementNode.ts:566"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"canindent",children:"canIndent"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"canIndent"}),"(): ",(0,n.jsx)(l.code,{children:"boolean"})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-5",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"boolean"})}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-6",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalElementNode.ts#L544",children:"packages/lexical/src/nodes/LexicalElementNode.ts:544"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"caninserttextafter",children:"canInsertTextAfter"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"canInsertTextAfter"}),"(): ",(0,n.jsx)(l.code,{children:"boolean"})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-6",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"boolean"})}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-7",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalElementNode.ts#L572",children:"packages/lexical/src/nodes/LexicalElementNode.ts:572"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"caninserttextbefore",children:"canInsertTextBefore"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"canInsertTextBefore"}),"(): ",(0,n.jsx)(l.code,{children:"boolean"})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-7",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"boolean"})}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-8",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalElementNode.ts#L569",children:"packages/lexical/src/nodes/LexicalElementNode.ts:569"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"canmergewhenempty",children:"canMergeWhenEmpty"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"canMergeWhenEmpty"}),"(): ",(0,n.jsx)(l.code,{children:"boolean"})]}),"\n",(0,n.jsx)(l.p,{children:"Determines whether this node, when empty, can merge with a first block\r\nof nodes being inserted."}),"\n",(0,n.jsxs)(l.p,{children:["This method is specifically called in ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.RangeSelection#insertnodes",children:"RangeSelection.insertNodes"}),"\r\nto determine merging behavior during nodes insertion."]}),"\n",(0,n.jsx)(l.h4,{id:"returns-8",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"boolean"})}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.strong,{children:(0,n.jsx)(l.code,{children:"Example"})})}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-ts",children:"// In a ListItemNode or QuoteNode implementation:\r\ncanMergeWhenEmpty(): true {\r\n return true;\r\n}\n"})}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-9",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalElementNode.ts#L610",children:"packages/lexical/src/nodes/LexicalElementNode.ts:610"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"clear",children:"clear"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"clear"}),"(): ",(0,n.jsx)(l.code,{children:"this"})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-9",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"this"})}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-10",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalElementNode.ts#L367",children:"packages/lexical/src/nodes/LexicalElementNode.ts:367"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"collapseatstart",children:"collapseAtStart"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"collapseAtStart"}),"(",(0,n.jsx)(l.code,{children:"selection"}),"): ",(0,n.jsx)(l.code,{children:"boolean"})]}),"\n",(0,n.jsx)(l.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"selection"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.RangeSelection",children:(0,n.jsx)(l.code,{children:"RangeSelection"})})})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-10",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"boolean"})}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-11",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalElementNode.ts#L552",children:"packages/lexical/src/nodes/LexicalElementNode.ts:552"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"createdom",children:"createDOM"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"createDOM"}),"(",(0,n.jsx)(l.code,{children:"_config"}),", ",(0,n.jsx)(l.code,{children:"_editor"}),"): ",(0,n.jsx)(l.code,{children:"HTMLElement"})]}),"\n",(0,n.jsx)(l.p,{children:"Called during the reconciliation process to determine which nodes\r\nto insert into the DOM for this Lexical Node."}),"\n",(0,n.jsx)(l.p,{children:"This method must return exactly one HTMLElement. Nested elements are not supported."}),"\n",(0,n.jsx)(l.p,{children:"Do not attempt to update the Lexical EditorState during this phase of the update lifecyle."}),"\n",(0,n.jsx)(l.h4,{id:"parameters-4",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,n.jsxs)(l.tbody,{children:[(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"_config"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.a,{href:"/docs/api/modules/lexical#editorconfig",children:(0,n.jsx)(l.code,{children:"EditorConfig"})})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:"allows access to things like the EditorTheme (to apply classes) during reconciliation."})]}),(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"_editor"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalEditor",children:(0,n.jsx)(l.code,{children:"LexicalEditor"})})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:"allows access to the editor for context during reconciliation."})]})]})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-11",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"HTMLElement"})}),"\n",(0,n.jsx)(l.h4,{id:"inherited-from-3",children:"Inherited from"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:"LexicalNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode#createdom",children:"createDOM"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-12",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L815",children:"packages/lexical/src/LexicalNode.ts:815"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"createparentelementnode",children:"createParentElementNode"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"createParentElementNode"}),"(): ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode",children:(0,n.jsx)(l.code,{children:"ElementNode"})})]}),"\n",(0,n.jsxs)(l.p,{children:["The creation logic for any required parent. Should be implemented if ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode#isparentrequired",children:"isParentRequired"})," returns true."]}),"\n",(0,n.jsx)(l.h4,{id:"returns-12",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode",children:(0,n.jsx)(l.code,{children:"ElementNode"})})}),"\n",(0,n.jsx)(l.h4,{id:"inherited-from-4",children:"Inherited from"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:"LexicalNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode#createparentelementnode",children:"createParentElementNode"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-13",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L1094",children:"packages/lexical/src/LexicalNode.ts:1094"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"excludefromcopy",children:"excludeFromCopy"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"excludeFromCopy"}),"(",(0,n.jsx)(l.code,{children:"destination?"}),"): ",(0,n.jsx)(l.code,{children:"boolean"})]}),"\n",(0,n.jsx)(l.h4,{id:"parameters-5",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"destination?"})}),(0,n.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,n.jsx)(l.code,{children:'"html"'})," | ",(0,n.jsx)(l.code,{children:'"clone"'})]})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-13",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"boolean"})}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-14",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalElementNode.ts#L555",children:"packages/lexical/src/nodes/LexicalElementNode.ts:555"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"exportdom",children:"exportDOM"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"exportDOM"}),"(",(0,n.jsx)(l.code,{children:"editor"}),"): ",(0,n.jsx)(l.a,{href:"/docs/api/modules/lexical#domexportoutput",children:(0,n.jsx)(l.code,{children:"DOMExportOutput"})})]}),"\n",(0,n.jsxs)(l.p,{children:["Controls how the this node is serialized to HTML. This is important for\r\ncopy and paste between Lexical and non-Lexical editors, or Lexical editors with different namespaces,\r\nin which case the primary transfer format is HTML. It's also important if you're serializing\r\nto HTML for any other reason via ",(0,n.jsx)(l.a,{href:"/docs/api/modules/lexical_html#generatehtmlfromnodes",children:"$generateHtmlFromNodes"}),". You could\r\nalso use this method to build your own HTML renderer."]}),"\n",(0,n.jsx)(l.h4,{id:"parameters-6",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"editor"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalEditor",children:(0,n.jsx)(l.code,{children:"LexicalEditor"})})})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-14",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"/docs/api/modules/lexical#domexportoutput",children:(0,n.jsx)(l.code,{children:"DOMExportOutput"})})}),"\n",(0,n.jsx)(l.h4,{id:"inherited-from-5",children:"Inherited from"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:"LexicalNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode#exportdom",children:"exportDOM"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-15",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L845",children:"packages/lexical/src/LexicalNode.ts:845"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"exportjson",children:"exportJSON"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"exportJSON"}),"(): ",(0,n.jsx)(l.a,{href:"/docs/api/modules/lexical#serializedelementnode",children:(0,n.jsx)(l.code,{children:"SerializedElementNode"})}),"<",(0,n.jsx)(l.a,{href:"/docs/api/modules/lexical#serializedlexicalnode",children:(0,n.jsx)(l.code,{children:"SerializedLexicalNode"})}),">"]}),"\n",(0,n.jsxs)(l.p,{children:["Controls how the this node is serialized to JSON. This is important for\r\ncopy and paste between Lexical editors sharing the same namespace. It's also important\r\nif you're serializing to JSON for persistent storage somewhere.\r\nSee ",(0,n.jsx)(l.a,{href:"https://lexical.dev/docs/concepts/serialization#lexical---html",children:"Serialization & Deserialization"}),"."]}),"\n",(0,n.jsx)(l.h4,{id:"returns-15",children:"Returns"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/modules/lexical#serializedelementnode",children:(0,n.jsx)(l.code,{children:"SerializedElementNode"})}),"<",(0,n.jsx)(l.a,{href:"/docs/api/modules/lexical#serializedlexicalnode",children:(0,n.jsx)(l.code,{children:"SerializedLexicalNode"})}),">"]}),"\n",(0,n.jsx)(l.h4,{id:"inherited-from-6",children:"Inherited from"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:"LexicalNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode#exportjson",children:"exportJSON"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-16",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalElementNode.ts#L527",children:"packages/lexical/src/nodes/LexicalElementNode.ts:527"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"extractwithchild",children:"extractWithChild"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"extractWithChild"}),"(",(0,n.jsx)(l.code,{children:"child"}),", ",(0,n.jsx)(l.code,{children:"selection"}),", ",(0,n.jsx)(l.code,{children:"destination"}),"): ",(0,n.jsx)(l.code,{children:"boolean"})]}),"\n",(0,n.jsx)(l.h4,{id:"parameters-7",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsxs)(l.tbody,{children:[(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"child"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(l.code,{children:"LexicalNode"})})})]}),(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"selection"})}),(0,n.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,n.jsx)(l.code,{children:"null"})," | ",(0,n.jsx)(l.a,{href:"/docs/api/interfaces/lexical.BaseSelection",children:(0,n.jsx)(l.code,{children:"BaseSelection"})})]})]}),(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"destination"})}),(0,n.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,n.jsx)(l.code,{children:'"html"'})," | ",(0,n.jsx)(l.code,{children:'"clone"'})]})]})]})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-16",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"boolean"})}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-17",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalElementNode.ts#L589",children:"packages/lexical/src/nodes/LexicalElementNode.ts:589"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"getalltextnodes",children:"getAllTextNodes"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"getAllTextNodes"}),"(): ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.TextNode",children:(0,n.jsx)(l.code,{children:"TextNode"})}),"[]"]}),"\n",(0,n.jsx)(l.h4,{id:"returns-17",children:"Returns"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.TextNode",children:(0,n.jsx)(l.code,{children:"TextNode"})}),"[]"]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-18",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalElementNode.ts#L158",children:"packages/lexical/src/nodes/LexicalElementNode.ts:158"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"getchildatindex",children:"getChildAtIndex"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"getChildAtIndex"}),"<",(0,n.jsx)(l.code,{children:"T"}),">(",(0,n.jsx)(l.code,{children:"index"}),"): ",(0,n.jsx)(l.code,{children:"null"})," | ",(0,n.jsx)(l.code,{children:"T"})]}),"\n",(0,n.jsx)(l.h4,{id:"type-parameters",children:"Type parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"T"})}),(0,n.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(l.code,{children:"LexicalNode"})})]})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"parameters-8",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"index"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"number"})})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-18",children:"Returns"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.code,{children:"null"})," | ",(0,n.jsx)(l.code,{children:"T"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-19",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalElementNode.ts#L239",children:"packages/lexical/src/nodes/LexicalElementNode.ts:239"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"getchildren",children:"getChildren"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"getChildren"}),"<",(0,n.jsx)(l.code,{children:"T"}),">(): ",(0,n.jsx)(l.code,{children:"T"}),"[]"]}),"\n",(0,n.jsx)(l.h4,{id:"type-parameters-1",children:"Type parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"T"})}),(0,n.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(l.code,{children:"LexicalNode"})})]})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-19",children:"Returns"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.code,{children:"T"}),"[]"]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-20",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalElementNode.ts#L123",children:"packages/lexical/src/nodes/LexicalElementNode.ts:123"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"getchildrenkeys",children:"getChildrenKeys"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"getChildrenKeys"}),"(): ",(0,n.jsx)(l.code,{children:"string"}),"[]"]}),"\n",(0,n.jsx)(l.h4,{id:"returns-20",children:"Returns"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.code,{children:"string"}),"[]"]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-21",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalElementNode.ts#L132",children:"packages/lexical/src/nodes/LexicalElementNode.ts:132"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"getchildrensize",children:"getChildrenSize"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"getChildrenSize"}),"(): ",(0,n.jsx)(l.code,{children:"number"})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-21",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"number"})}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-22",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalElementNode.ts#L141",children:"packages/lexical/src/nodes/LexicalElementNode.ts:141"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"getcommonancestor",children:"getCommonAncestor"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"getCommonAncestor"}),"<",(0,n.jsx)(l.code,{children:"T"}),">(",(0,n.jsx)(l.code,{children:"node"}),"): ",(0,n.jsx)(l.code,{children:"null"})," | ",(0,n.jsx)(l.code,{children:"T"})]}),"\n",(0,n.jsx)(l.p,{children:"Returns the closest common ancestor of this node and the provided one or null\r\nif one cannot be found."}),"\n",(0,n.jsx)(l.h4,{id:"type-parameters-2",children:"Type parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"T"})}),(0,n.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode",children:(0,n.jsx)(l.code,{children:"ElementNode"})})," = ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode",children:(0,n.jsx)(l.code,{children:"ElementNode"})})]})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"parameters-9",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"node"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(l.code,{children:"LexicalNode"})})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:"the other node to find the common ancestor of."})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-22",children:"Returns"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.code,{children:"null"})," | ",(0,n.jsx)(l.code,{children:"T"})]}),"\n",(0,n.jsx)(l.h4,{id:"inherited-from-7",children:"Inherited from"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:"LexicalNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode#getcommonancestor",children:"getCommonAncestor"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-23",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L553",children:"packages/lexical/src/LexicalNode.ts:553"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"getdescendantbyindex",children:"getDescendantByIndex"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"getDescendantByIndex"}),"<",(0,n.jsx)(l.code,{children:"T"}),">(",(0,n.jsx)(l.code,{children:"index"}),"): ",(0,n.jsx)(l.code,{children:"null"})," | ",(0,n.jsx)(l.code,{children:"T"})]}),"\n",(0,n.jsx)(l.h4,{id:"type-parameters-3",children:"Type parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"T"})}),(0,n.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(l.code,{children:"LexicalNode"})})]})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"parameters-10",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"index"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"number"})})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-23",children:"Returns"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.code,{children:"null"})," | ",(0,n.jsx)(l.code,{children:"T"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-24",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalElementNode.ts#L195",children:"packages/lexical/src/nodes/LexicalElementNode.ts:195"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"getdirection",children:"getDirection"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"getDirection"}),"(): ",(0,n.jsx)(l.code,{children:"null"})," | ",(0,n.jsx)(l.code,{children:'"rtl"'})," | ",(0,n.jsx)(l.code,{children:'"ltr"'})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-24",children:"Returns"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.code,{children:"null"})," | ",(0,n.jsx)(l.code,{children:'"rtl"'})," | ",(0,n.jsx)(l.code,{children:'"ltr"'})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-25",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalElementNode.ts#L300",children:"packages/lexical/src/nodes/LexicalElementNode.ts:300"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"getfirstchild",children:"getFirstChild"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"getFirstChild"}),"<",(0,n.jsx)(l.code,{children:"T"}),">(): ",(0,n.jsx)(l.code,{children:"null"})," | ",(0,n.jsx)(l.code,{children:"T"})]}),"\n",(0,n.jsx)(l.h4,{id:"type-parameters-4",children:"Type parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"T"})}),(0,n.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(l.code,{children:"LexicalNode"})})]})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-25",children:"Returns"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.code,{children:"null"})," | ",(0,n.jsx)(l.code,{children:"T"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-26",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalElementNode.ts#L215",children:"packages/lexical/src/nodes/LexicalElementNode.ts:215"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"getfirstchildorthrow",children:"getFirstChildOrThrow"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"getFirstChildOrThrow"}),"<",(0,n.jsx)(l.code,{children:"T"}),">(): ",(0,n.jsx)(l.code,{children:"T"})]}),"\n",(0,n.jsx)(l.h4,{id:"type-parameters-5",children:"Type parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"T"})}),(0,n.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(l.code,{children:"LexicalNode"})})]})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-26",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"T"})}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-27",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalElementNode.ts#L220",children:"packages/lexical/src/nodes/LexicalElementNode.ts:220"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"getfirstdescendant",children:"getFirstDescendant"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"getFirstDescendant"}),"<",(0,n.jsx)(l.code,{children:"T"}),">(): ",(0,n.jsx)(l.code,{children:"null"})," | ",(0,n.jsx)(l.code,{children:"T"})]}),"\n",(0,n.jsx)(l.h4,{id:"type-parameters-6",children:"Type parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"T"})}),(0,n.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(l.code,{children:"LexicalNode"})})]})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-27",children:"Returns"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.code,{children:"null"})," | ",(0,n.jsx)(l.code,{children:"T"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-28",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalElementNode.ts#L173",children:"packages/lexical/src/nodes/LexicalElementNode.ts:173"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"getformat",children:"getFormat"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"getFormat"}),"(): ",(0,n.jsx)(l.code,{children:"number"})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-28",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"number"})}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-29",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalElementNode.ts#L107",children:"packages/lexical/src/nodes/LexicalElementNode.ts:107"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"getformattype",children:"getFormatType"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"getFormatType"}),"(): ",(0,n.jsx)(l.a,{href:"/docs/api/modules/lexical#elementformattype",children:(0,n.jsx)(l.code,{children:"ElementFormatType"})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-29",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"/docs/api/modules/lexical#elementformattype",children:(0,n.jsx)(l.code,{children:"ElementFormatType"})})}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-30",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalElementNode.ts#L111",children:"packages/lexical/src/nodes/LexicalElementNode.ts:111"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"getindent",children:"getIndent"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"getIndent"}),"(): ",(0,n.jsx)(l.code,{children:"number"})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-30",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"number"})}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-31",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalElementNode.ts#L119",children:"packages/lexical/src/nodes/LexicalElementNode.ts:119"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"getindexwithinparent",children:"getIndexWithinParent"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"getIndexWithinParent"}),"(): ",(0,n.jsx)(l.code,{children:"number"})]}),"\n",(0,n.jsx)(l.p,{children:"Returns the zero-based index of this node within the parent."}),"\n",(0,n.jsx)(l.h4,{id:"returns-31",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"number"})}),"\n",(0,n.jsx)(l.h4,{id:"inherited-from-8",children:"Inherited from"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:"LexicalNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode#getindexwithinparent",children:"getIndexWithinParent"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-32",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L381",children:"packages/lexical/src/LexicalNode.ts:381"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"getkey",children:"getKey"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"getKey"}),"(): ",(0,n.jsx)(l.code,{children:"string"})]}),"\n",(0,n.jsx)(l.p,{children:"Returns this nodes key."}),"\n",(0,n.jsx)(l.h4,{id:"returns-32",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"string"})}),"\n",(0,n.jsx)(l.h4,{id:"inherited-from-9",children:"Inherited from"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:"LexicalNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode#getkey",children:"getKey"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-33",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L373",children:"packages/lexical/src/LexicalNode.ts:373"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"getlastchild",children:"getLastChild"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"getLastChild"}),"<",(0,n.jsx)(l.code,{children:"T"}),">(): ",(0,n.jsx)(l.code,{children:"null"})," | ",(0,n.jsx)(l.code,{children:"T"})]}),"\n",(0,n.jsx)(l.h4,{id:"type-parameters-7",children:"Type parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"T"})}),(0,n.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(l.code,{children:"LexicalNode"})})]})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-33",children:"Returns"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.code,{children:"null"})," | ",(0,n.jsx)(l.code,{children:"T"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-34",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalElementNode.ts#L227",children:"packages/lexical/src/nodes/LexicalElementNode.ts:227"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"getlastchildorthrow",children:"getLastChildOrThrow"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"getLastChildOrThrow"}),"<",(0,n.jsx)(l.code,{children:"T"}),">(): ",(0,n.jsx)(l.code,{children:"T"})]}),"\n",(0,n.jsx)(l.h4,{id:"type-parameters-8",children:"Type parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"T"})}),(0,n.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(l.code,{children:"LexicalNode"})})]})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-34",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"T"})}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-35",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalElementNode.ts#L232",children:"packages/lexical/src/nodes/LexicalElementNode.ts:232"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"getlastdescendant",children:"getLastDescendant"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"getLastDescendant"}),"<",(0,n.jsx)(l.code,{children:"T"}),">(): ",(0,n.jsx)(l.code,{children:"null"})," | ",(0,n.jsx)(l.code,{children:"T"})]}),"\n",(0,n.jsx)(l.h4,{id:"type-parameters-9",children:"Type parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"T"})}),(0,n.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(l.code,{children:"LexicalNode"})})]})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-35",children:"Returns"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.code,{children:"null"})," | ",(0,n.jsx)(l.code,{children:"T"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-36",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalElementNode.ts#L184",children:"packages/lexical/src/nodes/LexicalElementNode.ts:184"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"getlatest",children:"getLatest"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"getLatest"}),"(): ",(0,n.jsx)(l.code,{children:"this"})]}),"\n",(0,n.jsx)(l.p,{children:"Returns the latest version of the node from the active EditorState.\r\nThis is used to avoid getting values from stale node references."}),"\n",(0,n.jsx)(l.h4,{id:"returns-36",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"this"})}),"\n",(0,n.jsx)(l.h4,{id:"inherited-from-10",children:"Inherited from"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:"LexicalNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode#getlatest",children:"getLatest"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-37",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L739",children:"packages/lexical/src/LexicalNode.ts:739"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"getnextsibling",children:"getNextSibling"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"getNextSibling"}),"<",(0,n.jsx)(l.code,{children:"T"}),">(): ",(0,n.jsx)(l.code,{children:"null"})," | ",(0,n.jsx)(l.code,{children:"T"})]}),"\n",(0,n.jsx)(l.p,{children:'Returns the "next" siblings - that is, the node that comes\r\nafter this one in the same parent'}),"\n",(0,n.jsx)(l.h4,{id:"type-parameters-10",children:"Type parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"T"})}),(0,n.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(l.code,{children:"LexicalNode"})})]})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-37",children:"Returns"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.code,{children:"null"})," | ",(0,n.jsx)(l.code,{children:"T"})]}),"\n",(0,n.jsx)(l.h4,{id:"inherited-from-11",children:"Inherited from"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:"LexicalNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode#getnextsibling",children:"getNextSibling"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-38",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L526",children:"packages/lexical/src/LexicalNode.ts:526"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"getnextsiblings",children:"getNextSiblings"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"getNextSiblings"}),"<",(0,n.jsx)(l.code,{children:"T"}),">(): ",(0,n.jsx)(l.code,{children:"T"}),"[]"]}),"\n",(0,n.jsx)(l.p,{children:'Returns all "next" siblings - that is, the nodes that come between this\r\none and the last child of it\'s parent, inclusive.'}),"\n",(0,n.jsx)(l.h4,{id:"type-parameters-11",children:"Type parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"T"})}),(0,n.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(l.code,{children:"LexicalNode"})})]})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-38",children:"Returns"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.code,{children:"T"}),"[]"]}),"\n",(0,n.jsx)(l.h4,{id:"inherited-from-12",children:"Inherited from"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:"LexicalNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode#getnextsiblings",children:"getNextSiblings"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-39",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L537",children:"packages/lexical/src/LexicalNode.ts:537"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"getnodesbetween",children:"getNodesBetween"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"getNodesBetween"}),"(",(0,n.jsx)(l.code,{children:"targetNode"}),"): ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(l.code,{children:"LexicalNode"})}),"[]"]}),"\n",(0,n.jsx)(l.p,{children:"Returns a list of nodes that are between this node and\r\nthe target node in the EditorState."}),"\n",(0,n.jsx)(l.h4,{id:"parameters-11",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"targetNode"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(l.code,{children:"LexicalNode"})})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:"the node that marks the other end of the range of nodes to be returned."})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-39",children:"Returns"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(l.code,{children:"LexicalNode"})}),"[]"]}),"\n",(0,n.jsx)(l.h4,{id:"inherited-from-13",children:"Inherited from"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:"LexicalNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode#getnodesbetween",children:"getNodesBetween"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-40",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L658",children:"packages/lexical/src/LexicalNode.ts:658"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"getparent",children:"getParent"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"getParent"}),"<",(0,n.jsx)(l.code,{children:"T"}),">(): ",(0,n.jsx)(l.code,{children:"null"})," | ",(0,n.jsx)(l.code,{children:"T"})]}),"\n",(0,n.jsx)(l.p,{children:"Returns the parent of this node, or null if none is found."}),"\n",(0,n.jsx)(l.h4,{id:"type-parameters-12",children:"Type parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"T"})}),(0,n.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode",children:(0,n.jsx)(l.code,{children:"ElementNode"})})]})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-40",children:"Returns"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.code,{children:"null"})," | ",(0,n.jsx)(l.code,{children:"T"})]}),"\n",(0,n.jsx)(l.h4,{id:"inherited-from-14",children:"Inherited from"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:"LexicalNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode#getparent",children:"getParent"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-41",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L401",children:"packages/lexical/src/LexicalNode.ts:401"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"getparentkeys",children:"getParentKeys"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"getParentKeys"}),"(): ",(0,n.jsx)(l.code,{children:"string"}),"[]"]}),"\n",(0,n.jsx)(l.p,{children:"Returns a list of the keys of every ancestor of this node,\r\nall the way up to the RootNode."}),"\n",(0,n.jsx)(l.h4,{id:"returns-41",children:"Returns"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.code,{children:"string"}),"[]"]}),"\n",(0,n.jsx)(l.h4,{id:"inherited-from-15",children:"Inherited from"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:"LexicalNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode#getparentkeys",children:"getParentKeys"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-42",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L478",children:"packages/lexical/src/LexicalNode.ts:478"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"getparentorthrow",children:"getParentOrThrow"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"getParentOrThrow"}),"<",(0,n.jsx)(l.code,{children:"T"}),">(): ",(0,n.jsx)(l.code,{children:"T"})]}),"\n",(0,n.jsx)(l.p,{children:"Returns the parent of this node, or throws if none is found."}),"\n",(0,n.jsx)(l.h4,{id:"type-parameters-13",children:"Type parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"T"})}),(0,n.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode",children:(0,n.jsx)(l.code,{children:"ElementNode"})})]})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-42",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"T"})}),"\n",(0,n.jsx)(l.h4,{id:"inherited-from-16",children:"Inherited from"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:"LexicalNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode#getparentorthrow",children:"getParentOrThrow"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-43",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L412",children:"packages/lexical/src/LexicalNode.ts:412"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"getparents",children:"getParents"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"getParents"}),"(): ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode",children:(0,n.jsx)(l.code,{children:"ElementNode"})}),"[]"]}),"\n",(0,n.jsx)(l.p,{children:"Returns a list of the every ancestor of this node,\r\nall the way up to the RootNode."}),"\n",(0,n.jsx)(l.h4,{id:"returns-43",children:"Returns"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode",children:(0,n.jsx)(l.code,{children:"ElementNode"})}),"[]"]}),"\n",(0,n.jsx)(l.h4,{id:"inherited-from-17",children:"Inherited from"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:"LexicalNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode#getparents",children:"getParents"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-44",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L463",children:"packages/lexical/src/LexicalNode.ts:463"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"getprevioussibling",children:"getPreviousSibling"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"getPreviousSibling"}),"<",(0,n.jsx)(l.code,{children:"T"}),">(): ",(0,n.jsx)(l.code,{children:"null"})," | ",(0,n.jsx)(l.code,{children:"T"})]}),"\n",(0,n.jsx)(l.p,{children:'Returns the "previous" siblings - that is, the node that comes\r\nbefore this one in the same parent.'}),"\n",(0,n.jsx)(l.h4,{id:"type-parameters-14",children:"Type parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"T"})}),(0,n.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(l.code,{children:"LexicalNode"})})]})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-44",children:"Returns"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.code,{children:"null"})," | ",(0,n.jsx)(l.code,{children:"T"})]}),"\n",(0,n.jsx)(l.h4,{id:"inherited-from-18",children:"Inherited from"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:"LexicalNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode#getprevioussibling",children:"getPreviousSibling"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-45",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L493",children:"packages/lexical/src/LexicalNode.ts:493"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"getprevioussiblings",children:"getPreviousSiblings"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"getPreviousSiblings"}),"<",(0,n.jsx)(l.code,{children:"T"}),">(): ",(0,n.jsx)(l.code,{children:"T"}),"[]"]}),"\n",(0,n.jsx)(l.p,{children:'Returns the "previous" siblings - that is, the nodes that come between\r\nthis one and the first child of it\'s parent, inclusive.'}),"\n",(0,n.jsx)(l.h4,{id:"type-parameters-15",children:"Type parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"T"})}),(0,n.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(l.code,{children:"LexicalNode"})})]})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-45",children:"Returns"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.code,{children:"T"}),"[]"]}),"\n",(0,n.jsx)(l.h4,{id:"inherited-from-19",children:"Inherited from"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:"LexicalNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode#getprevioussiblings",children:"getPreviousSiblings"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-46",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L504",children:"packages/lexical/src/LexicalNode.ts:504"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"getstyle",children:"getStyle"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"getStyle"}),"(): ",(0,n.jsx)(l.code,{children:"string"})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-46",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"string"})}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-47",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalElementNode.ts#L115",children:"packages/lexical/src/nodes/LexicalElementNode.ts:115"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"gettextcontent",children:"getTextContent"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"getTextContent"}),"(): ",(0,n.jsx)(l.code,{children:"string"})]}),"\n",(0,n.jsx)(l.p,{children:"Returns the text content of the node. Override this for\r\ncustom nodes that should have a representation in plain text\r\nformat (for copy + paste, for example)"}),"\n",(0,n.jsx)(l.h4,{id:"returns-47",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"string"})}),"\n",(0,n.jsx)(l.h4,{id:"inherited-from-20",children:"Inherited from"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:"LexicalNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode#gettextcontent",children:"getTextContent"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-48",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalElementNode.ts#L266",children:"packages/lexical/src/nodes/LexicalElementNode.ts:266"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"gettextcontentsize",children:"getTextContentSize"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"getTextContentSize"}),"(): ",(0,n.jsx)(l.code,{children:"number"})]}),"\n",(0,n.jsx)(l.p,{children:"Returns the length of the string produced by calling getTextContent on this node."}),"\n",(0,n.jsx)(l.h4,{id:"returns-48",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"number"})}),"\n",(0,n.jsx)(l.h4,{id:"inherited-from-21",children:"Inherited from"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:"LexicalNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode#gettextcontentsize",children:"getTextContentSize"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-49",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalElementNode.ts#L283",children:"packages/lexical/src/nodes/LexicalElementNode.ts:283"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"gettoplevelelement",children:"getTopLevelElement"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"getTopLevelElement"}),"(): ",(0,n.jsx)(l.code,{children:"null"})," | ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode",children:(0,n.jsx)(l.code,{children:"ElementNode"})})]}),"\n",(0,n.jsxs)(l.p,{children:["Returns the highest (in the EditorState tree)\r\nnon-root ancestor of this node, or null if none is found. See ",(0,n.jsx)(l.a,{href:"/docs/api/modules/lexical#isrootorshadowroot",children:"$isRootOrShadowRoot"}),'\r\nfor more information on which Elements comprise "roots".']}),"\n",(0,n.jsx)(l.h4,{id:"returns-49",children:"Returns"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.code,{children:"null"})," | ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode",children:(0,n.jsx)(l.code,{children:"ElementNode"})})]}),"\n",(0,n.jsx)(l.h4,{id:"inherited-from-22",children:"Inherited from"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:"LexicalNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode#gettoplevelelement",children:"getTopLevelElement"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-50",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalElementNode.ts#L62",children:"packages/lexical/src/nodes/LexicalElementNode.ts:62"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"gettoplevelelementorthrow",children:"getTopLevelElementOrThrow"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"getTopLevelElementOrThrow"}),"(): ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode",children:(0,n.jsx)(l.code,{children:"ElementNode"})})]}),"\n",(0,n.jsxs)(l.p,{children:["Returns the highest (in the EditorState tree)\r\nnon-root ancestor of this node, or throws if none is found. See ",(0,n.jsx)(l.a,{href:"/docs/api/modules/lexical#isrootorshadowroot",children:"$isRootOrShadowRoot"}),'\r\nfor more information on which Elements comprise "roots".']}),"\n",(0,n.jsx)(l.h4,{id:"returns-50",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode",children:(0,n.jsx)(l.code,{children:"ElementNode"})})}),"\n",(0,n.jsx)(l.h4,{id:"inherited-from-23",children:"Inherited from"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:"LexicalNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode#gettoplevelelementorthrow",children:"getTopLevelElementOrThrow"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-51",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalElementNode.ts#L63",children:"packages/lexical/src/nodes/LexicalElementNode.ts:63"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"gettype",children:"getType"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"getType"}),"(): ",(0,n.jsx)(l.code,{children:"string"})]}),"\n",(0,n.jsx)(l.p,{children:"Returns the string type of this node."}),"\n",(0,n.jsx)(l.h4,{id:"returns-51",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"string"})}),"\n",(0,n.jsx)(l.h4,{id:"inherited-from-24",children:"Inherited from"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:"LexicalNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode#gettype",children:"getType"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-52",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L286",children:"packages/lexical/src/LexicalNode.ts:286"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"getwritable",children:"getWritable"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"getWritable"}),"(): ",(0,n.jsx)(l.code,{children:"this"})]}),"\n",(0,n.jsxs)(l.p,{children:["Returns a mutable version of the node using ",(0,n.jsx)(l.a,{href:"/docs/api/modules/lexical#clonewithproperties",children:"$cloneWithProperties"}),"\r\nif necessary. Will throw an error if called outside of a Lexical Editor\r\n",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalEditor#update",children:"LexicalEditor.update"})," callback."]}),"\n",(0,n.jsx)(l.h4,{id:"returns-52",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"this"})}),"\n",(0,n.jsx)(l.h4,{id:"inherited-from-25",children:"Inherited from"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:"LexicalNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode#getwritable",children:"getWritable"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-53",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L756",children:"packages/lexical/src/LexicalNode.ts:756"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"hasformat",children:"hasFormat"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"hasFormat"}),"(",(0,n.jsx)(l.code,{children:"type"}),"): ",(0,n.jsx)(l.code,{children:"boolean"})]}),"\n",(0,n.jsx)(l.h4,{id:"parameters-12",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"type"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.a,{href:"/docs/api/modules/lexical#elementformattype",children:(0,n.jsx)(l.code,{children:"ElementFormatType"})})})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-53",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"boolean"})}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-54",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalElementNode.ts#L304",children:"packages/lexical/src/nodes/LexicalElementNode.ts:304"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"insertafter",children:"insertAfter"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"insertAfter"}),"(",(0,n.jsx)(l.code,{children:"nodeToInsert"}),", ",(0,n.jsx)(l.code,{children:"restoreSelection?"}),"): ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(l.code,{children:"LexicalNode"})})]}),"\n",(0,n.jsx)(l.p,{children:"Inserts a node after this LexicalNode (as the next sibling)."}),"\n",(0,n.jsx)(l.h4,{id:"parameters-13",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Default value"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,n.jsxs)(l.tbody,{children:[(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"nodeToInsert"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(l.code,{children:"LexicalNode"})})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"undefined"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:"The node to insert after this one."})]}),(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"restoreSelection"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"boolean"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"true"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:"Whether or not to attempt to resolve the selection to the appropriate place after the operation is complete."})]})]})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-54",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(l.code,{children:"LexicalNode"})})}),"\n",(0,n.jsx)(l.h4,{id:"inherited-from-26",children:"Inherited from"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:"LexicalNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode#insertafter",children:"insertAfter"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-55",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L979",children:"packages/lexical/src/LexicalNode.ts:979"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"insertbefore",children:"insertBefore"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"insertBefore"}),"(",(0,n.jsx)(l.code,{children:"nodeToInsert"}),", ",(0,n.jsx)(l.code,{children:"restoreSelection?"}),"): ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(l.code,{children:"LexicalNode"})})]}),"\n",(0,n.jsx)(l.p,{children:"Inserts a node before this LexicalNode (as the previous sibling)."}),"\n",(0,n.jsx)(l.h4,{id:"parameters-14",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Default value"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,n.jsxs)(l.tbody,{children:[(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"nodeToInsert"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(l.code,{children:"LexicalNode"})})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"undefined"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:"The node to insert before this one."})]}),(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"restoreSelection"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"boolean"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"true"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:"Whether or not to attempt to resolve the selection to the appropriate place after the operation is complete."})]})]})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-55",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(l.code,{children:"LexicalNode"})})}),"\n",(0,n.jsx)(l.h4,{id:"inherited-from-27",children:"Inherited from"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:"LexicalNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode#insertbefore",children:"insertBefore"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-56",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L1046",children:"packages/lexical/src/LexicalNode.ts:1046"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"insertnewafter",children:"insertNewAfter"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"insertNewAfter"}),"(",(0,n.jsx)(l.code,{children:"selection"}),", ",(0,n.jsx)(l.code,{children:"restoreSelection?"}),"): ",(0,n.jsx)(l.code,{children:"null"})," | ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(l.code,{children:"LexicalNode"})})]}),"\n",(0,n.jsx)(l.h4,{id:"parameters-15",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsxs)(l.tbody,{children:[(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"selection"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.RangeSelection",children:(0,n.jsx)(l.code,{children:"RangeSelection"})})})]}),(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"restoreSelection?"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"boolean"})})]})]})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-56",children:"Returns"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.code,{children:"null"})," | ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(l.code,{children:"LexicalNode"})})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-57",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalElementNode.ts#L538",children:"packages/lexical/src/nodes/LexicalElementNode.ts:538"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"is",children:"is"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"is"}),"(",(0,n.jsx)(l.code,{children:"object"}),"): ",(0,n.jsx)(l.code,{children:"boolean"})]}),"\n",(0,n.jsx)(l.p,{children:"Returns true if the provided node is the exact same one as this node, from Lexical's perspective.\r\nAlways use this instead of referential equality."}),"\n",(0,n.jsx)(l.h4,{id:"parameters-16",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"object"})}),(0,n.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,n.jsx)(l.code,{children:"undefined"})," | ",(0,n.jsx)(l.code,{children:"null"})," | ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(l.code,{children:"LexicalNode"})})]}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:"the node to perform the equality comparison on."})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-57",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"boolean"})}),"\n",(0,n.jsx)(l.h4,{id:"inherited-from-28",children:"Inherited from"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:"LexicalNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode#is",children:"is"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-58",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L585",children:"packages/lexical/src/LexicalNode.ts:585"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"isattached",children:"isAttached"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"isAttached"}),"(): ",(0,n.jsx)(l.code,{children:"boolean"})]}),"\n",(0,n.jsx)(l.p,{children:'Returns true if there is a path between this node and the RootNode, false otherwise.\r\nThis is a way of determining if the node is "attached" EditorState. Unattached nodes\r\nwon\'t be reconciled and will ultimatelt be cleaned up by the Lexical GC.'}),"\n",(0,n.jsx)(l.h4,{id:"returns-58",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"boolean"})}),"\n",(0,n.jsx)(l.h4,{id:"inherited-from-29",children:"Inherited from"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:"LexicalNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode#isattached",children:"isAttached"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-59",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L303",children:"packages/lexical/src/LexicalNode.ts:303"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"isbefore",children:"isBefore"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"isBefore"}),"(",(0,n.jsx)(l.code,{children:"targetNode"}),"): ",(0,n.jsx)(l.code,{children:"boolean"})]}),"\n",(0,n.jsx)(l.p,{children:"Returns true if this node logical precedes the target node in the editor state."}),"\n",(0,n.jsx)(l.h4,{id:"parameters-17",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"targetNode"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(l.code,{children:"LexicalNode"})})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:"the node we're testing to see if it's after this one."})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-59",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"boolean"})}),"\n",(0,n.jsx)(l.h4,{id:"inherited-from-30",children:"Inherited from"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:"LexicalNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode#isbefore",children:"isBefore"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-60",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L597",children:"packages/lexical/src/LexicalNode.ts:597"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"isdirty",children:"isDirty"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"isDirty"}),"(): ",(0,n.jsx)(l.code,{children:"boolean"})]}),"\n",(0,n.jsx)(l.p,{children:"Returns true if this node has been marked dirty during this update cycle."}),"\n",(0,n.jsx)(l.h4,{id:"returns-60",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"boolean"})}),"\n",(0,n.jsx)(l.h4,{id:"inherited-from-31",children:"Inherited from"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:"LexicalNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode#isdirty",children:"isDirty"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-61",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalElementNode.ts#L148",children:"packages/lexical/src/nodes/LexicalElementNode.ts:148"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"isempty",children:"isEmpty"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"isEmpty"}),"(): ",(0,n.jsx)(l.code,{children:"boolean"})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-61",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"boolean"})}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-62",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalElementNode.ts#L145",children:"packages/lexical/src/nodes/LexicalElementNode.ts:145"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"isinline",children:"isInline"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"isInline"}),"(): ",(0,n.jsx)(l.code,{children:"boolean"})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-62",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"boolean"})}),"\n",(0,n.jsx)(l.h4,{id:"inherited-from-32",children:"Inherited from"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:"LexicalNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode#isinline",children:"isInline"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-63",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalElementNode.ts#L575",children:"packages/lexical/src/nodes/LexicalElementNode.ts:575"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"islastchild",children:"isLastChild"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"isLastChild"}),"(): ",(0,n.jsx)(l.code,{children:"boolean"})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-63",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"boolean"})}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-64",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalElementNode.ts#L153",children:"packages/lexical/src/nodes/LexicalElementNode.ts:153"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"isparentof",children:"isParentOf"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"isParentOf"}),"(",(0,n.jsx)(l.code,{children:"targetNode"}),"): ",(0,n.jsx)(l.code,{children:"boolean"})]}),"\n",(0,n.jsx)(l.p,{children:"Returns true if this node is the parent of the target node, false otherwise."}),"\n",(0,n.jsx)(l.h4,{id:"parameters-18",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"targetNode"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(l.code,{children:"LexicalNode"})})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:"the would-be child node."})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-64",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"boolean"})}),"\n",(0,n.jsx)(l.h4,{id:"inherited-from-33",children:"Inherited from"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:"LexicalNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode#isparentof",children:"isParentOf"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-65",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L636",children:"packages/lexical/src/LexicalNode.ts:636"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"isparentrequired",children:"isParentRequired"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"isParentRequired"}),"(): ",(0,n.jsx)(l.code,{children:"boolean"})]}),"\n",(0,n.jsx)(l.p,{children:"Whether or not this node has a required parent. Used during copy + paste operations\r\nto normalize nodes that would otherwise be orphaned. For example, ListItemNodes without\r\na ListNode parent or TextNodes with a ParagraphNode parent."}),"\n",(0,n.jsx)(l.h4,{id:"returns-65",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"boolean"})}),"\n",(0,n.jsx)(l.h4,{id:"inherited-from-34",children:"Inherited from"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:"LexicalNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode#isparentrequired",children:"isParentRequired"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-66",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L1086",children:"packages/lexical/src/LexicalNode.ts:1086"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"isselected",children:"isSelected"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"isSelected"}),"(",(0,n.jsx)(l.code,{children:"selection?"}),"): ",(0,n.jsx)(l.code,{children:"boolean"})]}),"\n",(0,n.jsxs)(l.p,{children:["Returns true if this node is contained within the provided Selection., false otherwise.\r\nRelies on the algorithms implemented in ",(0,n.jsx)(l.a,{href:"/docs/api/interfaces/lexical.BaseSelection#getnodes",children:"BaseSelection.getNodes"})," to determine\r\nwhat's included."]}),"\n",(0,n.jsx)(l.h4,{id:"parameters-19",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"selection?"})}),(0,n.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,n.jsx)(l.code,{children:"null"})," | ",(0,n.jsx)(l.a,{href:"/docs/api/interfaces/lexical.BaseSelection",children:(0,n.jsx)(l.code,{children:"BaseSelection"})})]}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:"The selection that we want to determine if the node is in."})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-66",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"boolean"})}),"\n",(0,n.jsx)(l.h4,{id:"inherited-from-35",children:"Inherited from"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:"LexicalNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode#isselected",children:"isSelected"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-67",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L327",children:"packages/lexical/src/LexicalNode.ts:327"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"isshadowroot",children:"isShadowRoot"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"isShadowRoot"}),"(): ",(0,n.jsx)(l.code,{children:"boolean"})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-67",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"boolean"})}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-68",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalElementNode.ts#L582",children:"packages/lexical/src/nodes/LexicalElementNode.ts:582"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"markdirty",children:"markDirty"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"markDirty"}),"(): ",(0,n.jsx)(l.code,{children:"void"})]}),"\n",(0,n.jsx)(l.p,{children:"Marks a node dirty, triggering transforms and\r\nforcing it to be reconciled during the update cycle."}),"\n",(0,n.jsx)(l.h4,{id:"returns-68",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"void"})}),"\n",(0,n.jsx)(l.h4,{id:"inherited-from-36",children:"Inherited from"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:"LexicalNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode#markdirty",children:"markDirty"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-69",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L1155",children:"packages/lexical/src/LexicalNode.ts:1155"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"remove",children:"remove"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"remove"}),"(",(0,n.jsx)(l.code,{children:"preserveEmptyParent?"}),"): ",(0,n.jsx)(l.code,{children:"void"})]}),"\n",(0,n.jsx)(l.p,{children:"Removes this LexicalNode from the EditorState. If the node isn't re-inserted\r\nsomewhere, the Lexical garbage collector will eventually clean it up."}),"\n",(0,n.jsx)(l.h4,{id:"parameters-20",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"preserveEmptyParent?"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"boolean"})}),(0,n.jsxs)(l.td,{style:{textAlign:"left"},children:["If falsy, the node's parent will be removed if it's empty after the removal operation. This is the default behavior, subject to other node heuristics such as ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode#canbeempty",children:"ElementNode#canBeEmpty"})]})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-69",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"void"})}),"\n",(0,n.jsx)(l.h4,{id:"inherited-from-37",children:"Inherited from"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:"LexicalNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode#remove",children:"remove"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-70",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L898",children:"packages/lexical/src/LexicalNode.ts:898"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"replace",children:"replace"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"replace"}),"<",(0,n.jsx)(l.code,{children:"N"}),">(",(0,n.jsx)(l.code,{children:"replaceWith"}),", ",(0,n.jsx)(l.code,{children:"includeChildren?"}),"): ",(0,n.jsx)(l.code,{children:"N"})]}),"\n",(0,n.jsx)(l.p,{children:"Replaces this LexicalNode with the provided node, optionally transferring the children\r\nof the replaced node to the replacing node."}),"\n",(0,n.jsx)(l.h4,{id:"type-parameters-16",children:"Type parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"N"})}),(0,n.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(l.code,{children:"LexicalNode"})})]})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"parameters-21",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,n.jsxs)(l.tbody,{children:[(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"replaceWith"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"N"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:"The node to replace this one with."})]}),(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"includeChildren?"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"boolean"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:"Whether or not to transfer the children of this node to the replacing node."})]})]})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-70",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"N"})}),"\n",(0,n.jsx)(l.h4,{id:"inherited-from-38",children:"Inherited from"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:"LexicalNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode#replace",children:"replace"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-71",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L909",children:"packages/lexical/src/LexicalNode.ts:909"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"select",children:"select"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"select"}),"(",(0,n.jsx)(l.code,{children:"_anchorOffset?"}),", ",(0,n.jsx)(l.code,{children:"_focusOffset?"}),"): ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.RangeSelection",children:(0,n.jsx)(l.code,{children:"RangeSelection"})})]}),"\n",(0,n.jsx)(l.h4,{id:"parameters-22",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsxs)(l.tbody,{children:[(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"_anchorOffset?"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"number"})})]}),(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"_focusOffset?"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"number"})})]})]})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-71",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.RangeSelection",children:(0,n.jsx)(l.code,{children:"RangeSelection"})})}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-72",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalElementNode.ts#L314",children:"packages/lexical/src/nodes/LexicalElementNode.ts:314"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"selectend",children:"selectEnd"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"selectEnd"}),"(): ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.RangeSelection",children:(0,n.jsx)(l.code,{children:"RangeSelection"})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-72",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.RangeSelection",children:(0,n.jsx)(l.code,{children:"RangeSelection"})})}),"\n",(0,n.jsx)(l.h4,{id:"inherited-from-39",children:"Inherited from"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:"LexicalNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode#selectend",children:"selectEnd"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-73",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalElementNode.ts#L363",children:"packages/lexical/src/nodes/LexicalElementNode.ts:363"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"selectnext",children:"selectNext"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"selectNext"}),"(",(0,n.jsx)(l.code,{children:"anchorOffset?"}),", ",(0,n.jsx)(l.code,{children:"focusOffset?"}),"): ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.RangeSelection",children:(0,n.jsx)(l.code,{children:"RangeSelection"})})]}),"\n",(0,n.jsx)(l.p,{children:"Moves selection to the next sibling of this node, at the specified offsets."}),"\n",(0,n.jsx)(l.h4,{id:"parameters-23",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,n.jsxs)(l.tbody,{children:[(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"anchorOffset?"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"number"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:"The anchor offset for selection."})]}),(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"focusOffset?"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"number"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:"The focus offset for selection"})]})]})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-73",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.RangeSelection",children:(0,n.jsx)(l.code,{children:"RangeSelection"})})}),"\n",(0,n.jsx)(l.h4,{id:"inherited-from-40",children:"Inherited from"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:"LexicalNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode#selectnext",children:"selectNext"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-74",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L1134",children:"packages/lexical/src/LexicalNode.ts:1134"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"selectprevious",children:"selectPrevious"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"selectPrevious"}),"(",(0,n.jsx)(l.code,{children:"anchorOffset?"}),", ",(0,n.jsx)(l.code,{children:"focusOffset?"}),"): ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.RangeSelection",children:(0,n.jsx)(l.code,{children:"RangeSelection"})})]}),"\n",(0,n.jsx)(l.p,{children:"Moves selection to the previous sibling of this node, at the specified offsets."}),"\n",(0,n.jsx)(l.h4,{id:"parameters-24",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,n.jsxs)(l.tbody,{children:[(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"anchorOffset?"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"number"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:"The anchor offset for selection."})]}),(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"focusOffset?"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"number"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:"The focus offset for selection"})]})]})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-74",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.RangeSelection",children:(0,n.jsx)(l.code,{children:"RangeSelection"})})}),"\n",(0,n.jsx)(l.h4,{id:"inherited-from-41",children:"Inherited from"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:"LexicalNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode#selectprevious",children:"selectPrevious"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-75",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L1112",children:"packages/lexical/src/LexicalNode.ts:1112"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"selectstart",children:"selectStart"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"selectStart"}),"(): ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.RangeSelection",children:(0,n.jsx)(l.code,{children:"RangeSelection"})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-75",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.RangeSelection",children:(0,n.jsx)(l.code,{children:"RangeSelection"})})}),"\n",(0,n.jsx)(l.h4,{id:"inherited-from-42",children:"Inherited from"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:"LexicalNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode#selectstart",children:"selectStart"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-76",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalElementNode.ts#L359",children:"packages/lexical/src/nodes/LexicalElementNode.ts:359"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"setdirection",children:"setDirection"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"setDirection"}),"(",(0,n.jsx)(l.code,{children:"direction"}),"): ",(0,n.jsx)(l.code,{children:"this"})]}),"\n",(0,n.jsx)(l.h4,{id:"parameters-25",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"direction"})}),(0,n.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,n.jsx)(l.code,{children:"null"})," | ",(0,n.jsx)(l.code,{children:'"rtl"'})," | ",(0,n.jsx)(l.code,{children:'"ltr"'})]})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-76",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"this"})}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-77",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalElementNode.ts#L376",children:"packages/lexical/src/nodes/LexicalElementNode.ts:376"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"setformat",children:"setFormat"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"setFormat"}),"(",(0,n.jsx)(l.code,{children:"type"}),"): ",(0,n.jsx)(l.code,{children:"this"})]}),"\n",(0,n.jsx)(l.h4,{id:"parameters-26",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"type"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.a,{href:"/docs/api/modules/lexical#elementformattype",children:(0,n.jsx)(l.code,{children:"ElementFormatType"})})})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-77",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"this"})}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-78",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalElementNode.ts#L381",children:"packages/lexical/src/nodes/LexicalElementNode.ts:381"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"setindent",children:"setIndent"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"setIndent"}),"(",(0,n.jsx)(l.code,{children:"indentLevel"}),"): ",(0,n.jsx)(l.code,{children:"this"})]}),"\n",(0,n.jsx)(l.h4,{id:"parameters-27",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"indentLevel"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"number"})})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-78",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"this"})}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-79",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalElementNode.ts#L391",children:"packages/lexical/src/nodes/LexicalElementNode.ts:391"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"setstyle",children:"setStyle"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"setStyle"}),"(",(0,n.jsx)(l.code,{children:"style"}),"): ",(0,n.jsx)(l.code,{children:"this"})]}),"\n",(0,n.jsx)(l.h4,{id:"parameters-28",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"style"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"string"})})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-79",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"this"})}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-80",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalElementNode.ts#L386",children:"packages/lexical/src/nodes/LexicalElementNode.ts:386"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"splice",children:"splice"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"splice"}),"(",(0,n.jsx)(l.code,{children:"start"}),", ",(0,n.jsx)(l.code,{children:"deleteCount"}),", ",(0,n.jsx)(l.code,{children:"nodesToInsert"}),"): ",(0,n.jsx)(l.code,{children:"this"})]}),"\n",(0,n.jsx)(l.h4,{id:"parameters-29",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsxs)(l.tbody,{children:[(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"start"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"number"})})]}),(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"deleteCount"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"number"})})]}),(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"nodesToInsert"})}),(0,n.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(l.code,{children:"LexicalNode"})}),"[]"]})]})]})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-80",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"this"})}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-81",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalElementNode.ts#L396",children:"packages/lexical/src/nodes/LexicalElementNode.ts:396"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"updatedom",children:"updateDOM"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"updateDOM"}),"(",(0,n.jsx)(l.code,{children:"_prevNode"}),", ",(0,n.jsx)(l.code,{children:"_dom"}),", ",(0,n.jsx)(l.code,{children:"_config"}),"): ",(0,n.jsx)(l.code,{children:"boolean"})]}),"\n",(0,n.jsx)(l.p,{children:"Called when a node changes and should update the DOM\r\nin whatever way is necessary to make it align with any changes that might\r\nhave happened during the update."}),"\n",(0,n.jsx)(l.p,{children:'Returning "true" here will cause lexical to unmount and recreate the DOM node\r\n(by calling createDOM). You would need to do this if the element tag changes,\r\nfor instance.'}),"\n",(0,n.jsx)(l.h4,{id:"parameters-30",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsxs)(l.tbody,{children:[(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"_prevNode"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"unknown"})})]}),(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"_dom"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"HTMLElement"})})]}),(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"_config"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.a,{href:"/docs/api/modules/lexical#editorconfig",children:(0,n.jsx)(l.code,{children:"EditorConfig"})})})]})]})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-81",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"boolean"})}),"\n",(0,n.jsx)(l.h4,{id:"inherited-from-43",children:"Inherited from"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:"LexicalNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode#updatedom",children:"updateDOM"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-82",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L829",children:"packages/lexical/src/LexicalNode.ts:829"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"clone",children:"clone"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"clone"}),"(",(0,n.jsx)(l.code,{children:"_data"}),"): ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(l.code,{children:"LexicalNode"})})]}),"\n",(0,n.jsx)(l.p,{children:"Clones this node, creating a new node with a different key\r\nand adding it to the EditorState (but not attaching it anywhere!). All nodes must\r\nimplement this method."}),"\n",(0,n.jsx)(l.h4,{id:"parameters-31",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"_data"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"unknown"})})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-82",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(l.code,{children:"LexicalNode"})})}),"\n",(0,n.jsx)(l.h4,{id:"inherited-from-44",children:"Inherited from"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:"LexicalNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode#clone",children:"clone"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-83",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L200",children:"packages/lexical/src/LexicalNode.ts:200"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"gettype-1",children:"getType"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"getType"}),"(): ",(0,n.jsx)(l.code,{children:"string"})]}),"\n",(0,n.jsx)(l.p,{children:"Returns the string type of this node. Every node must\r\nimplement this and it MUST BE UNIQUE amongst nodes registered\r\non the editor."}),"\n",(0,n.jsx)(l.h4,{id:"returns-83",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"string"})}),"\n",(0,n.jsx)(l.h4,{id:"inherited-from-45",children:"Inherited from"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:"LexicalNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode#gettype-1",children:"getType"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-84",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L186",children:"packages/lexical/src/LexicalNode.ts:186"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"importjson",children:"importJSON"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"importJSON"}),"(",(0,n.jsx)(l.code,{children:"_serializedNode"}),"): ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(l.code,{children:"LexicalNode"})})]}),"\n",(0,n.jsxs)(l.p,{children:["Controls how the this node is deserialized from JSON. This is usually boilerplate,\r\nbut provides an abstraction between the node implementation and serialized interface that can\r\nbe important if you ever make breaking changes to a node schema (by adding or removing properties).\r\nSee ",(0,n.jsx)(l.a,{href:"https://lexical.dev/docs/concepts/serialization#lexical---html",children:"Serialization & Deserialization"}),"."]}),"\n",(0,n.jsx)(l.h4,{id:"parameters-32",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"_serializedNode"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.a,{href:"/docs/api/modules/lexical#serializedlexicalnode",children:(0,n.jsx)(l.code,{children:"SerializedLexicalNode"})})})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-84",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(l.code,{children:"LexicalNode"})})}),"\n",(0,n.jsx)(l.h4,{id:"inherited-from-46",children:"Inherited from"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:"LexicalNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode#importjson",children:"importJSON"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-85",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L868",children:"packages/lexical/src/LexicalNode.ts:868"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"transform",children:"transform"}),"\n",(0,n.jsxs)(l.p,{children:["\u25b8 ",(0,n.jsx)(l.strong,{children:"transform"}),"(): ",(0,n.jsx)(l.code,{children:"null"})," | (",(0,n.jsx)(l.code,{children:"node"}),": ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(l.code,{children:"LexicalNode"})}),") => ",(0,n.jsx)(l.code,{children:"void"})]}),"\n",(0,n.jsxs)(l.p,{children:["Registers the returned function as a transform on the node during\r\nEditor initialization. Most such use cases should be addressed via\r\nthe ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalEditor#registernodetransform",children:"LexicalEditor.registerNodeTransform"})," API."]}),"\n",(0,n.jsx)(l.p,{children:"Experimental - use at your own risk."}),"\n",(0,n.jsx)(l.h4,{id:"returns-85",children:"Returns"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.code,{children:"null"})," | (",(0,n.jsx)(l.code,{children:"node"}),": ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(l.code,{children:"LexicalNode"})}),") => ",(0,n.jsx)(l.code,{children:"void"})]}),"\n",(0,n.jsx)(l.h4,{id:"inherited-from-47",children:"Inherited from"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:"LexicalNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode#transform",children:"transform"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-86",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L884",children:"packages/lexical/src/LexicalNode.ts:884"})})]})}function x(e={}){const{wrapper:l}={...(0,s.R)(),...e.components};return l?(0,n.jsx)(l,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},71184:(e,l,i)=>{i.d(l,{R:()=>r,x:()=>t});var n=i(14041);const s={},d=n.createContext(s);function r(e){const l=n.useContext(d);return n.useMemo((function(){return"function"==typeof e?e(l):{...l,...e}}),[l,e])}function t(e){let l;return l=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),n.createElement(d.Provider,{value:l},e.children)}}}]);