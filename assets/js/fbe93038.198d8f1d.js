"use strict";(self.webpackChunk_lexical_website=self.webpackChunk_lexical_website||[]).push([[1133],{21937:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var s=n(31085),i=n(71184);const r={},l="Testing",o={id:"testing",title:"Testing",description:"Lexical relies on tests to ensure that changes don't break anything, using a mix of unit and end-to-end tests.",source:"@site/docs/testing.md",sourceDirName:".",slug:"/testing",permalink:"/docs/testing",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/lexical/tree/main/packages/lexical-website/docs/testing.md",tags:[],version:"current",frontMatter:{}},a={},c=[{value:"Unit tests",id:"unit-tests",level:2},{value:"End-to-end (E2E) tests",id:"end-to-end-e2e-tests",level:2},{value:"General guidelines",id:"general-guidelines",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"testing",children:"Testing"})}),"\n",(0,s.jsx)(t.p,{children:"Lexical relies on tests to ensure that changes don't break anything, using a mix of unit and end-to-end tests."}),"\n",(0,s.jsx)(t.h2,{id:"unit-tests",children:"Unit tests"}),"\n",(0,s.jsxs)(t.p,{children:["We use Jest to run unit tests in core (",(0,s.jsx)(t.code,{children:"lexical"})," package). The goal is to have a well tested API, enabling us to add or modify features without breaking it."]}),"\n",(0,s.jsx)(t.p,{children:"To run the tests use:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"npm run test-unit\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Unit tests can be found in ",(0,s.jsx)(t.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/__tests__",children:"this directory"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"end-to-end-e2e-tests",children:"End-to-end (E2E) tests"}),"\n",(0,s.jsxs)(t.p,{children:["We use ",(0,s.jsx)(t.a,{href:"https://playwright.dev/",children:"Playwright"})," for running E2E tests in Chromium, Firefox and WebKit. Before running these tests, make sure to install the necessary browsers using the following command:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"npx playwright install\n"})}),"\n",(0,s.jsxs)(t.p,{children:["These tests run in the ",(0,s.jsx)(t.code,{children:"lexical-playground"})," package and are divided into proactive and reactive tests (",(0,s.jsx)(t.code,{children:"e2e"})," and ",(0,s.jsx)(t.code,{children:"regression"})," directories)."]}),"\n",(0,s.jsx)(t.p,{children:"The goal for this type of test is to validate the behavior of Lexical in a browser, without necessarily knowing how the internals work."}),"\n",(0,s.jsx)(t.p,{children:"To run E2E tests use:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"npm run start &\r\nnpm run test-e2e-chromium # or -firefox, -webkit\n"})}),"\n",(0,s.jsxs)(t.p,{children:["E2E tests can be found in ",(0,s.jsx)(t.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical-playground/__tests__",children:"this directory"})]}),"\n",(0,s.jsx)(t.h2,{id:"general-guidelines",children:"General guidelines"}),"\n",(0,s.jsx)(t.p,{children:"When writing tests, please follow these practices:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"New features must include tests."}),"\n",(0,s.jsx)(t.li,{children:"No test is too small or too big to be included. If it can break, add a test."}),"\n",(0,s.jsx)(t.li,{children:"Do not merge pull requests with failing tests, this can block other people and releases."}),"\n",(0,s.jsx)(t.li,{children:"Be mindful with your abstractions: sometimes it's convenient to create abstractions/utils to make test files smaller and less repetitive. Please make sure that they are simple and easy to follow."}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},71184:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>o});var s=n(14041);const i={},r=s.createContext(i);function l(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);