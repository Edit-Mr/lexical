"use strict";(self.webpackChunk_lexical_website=self.webpackChunk_lexical_website||[]).push([[8911],{83051:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>d,metadata:()=>s,toc:()=>l});var o=t(31085),i=t(71184);const d={},r="Read Mode / Edit Mode",s={id:"concepts/read-only",title:"Read Mode / Edit Mode",description:"Lexical supports two modes:",source:"@site/docs/concepts/read-only.md",sourceDirName:"concepts",slug:"/concepts/read-only",permalink:"/docs/concepts/read-only",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/lexical/tree/main/packages/lexical-website/docs/concepts/read-only.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Selection",permalink:"/docs/concepts/selection"},next:{title:"useHistory",permalink:"/docs/concepts/history"}},c={},l=[{value:"Setting the mode",id:"setting-the-mode",level:2},{value:"Reading the mode",id:"reading-the-mode",level:2}];function a(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"read-mode--edit-mode",children:"Read Mode / Edit Mode"})}),"\n",(0,o.jsx)(n.p,{children:"Lexical supports two modes:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Read mode"}),"\n",(0,o.jsx)(n.li,{children:"Edit mode"}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["The default behavior for Lexical is edit mode, or more accurately not read only mode. Under-the-hood, the main\r\nimplementation detail is that the ",(0,o.jsx)(n.code,{children:"contentEditable"})," is being set to ",(0,o.jsx)(n.code,{children:'"false"'})," or ",(0,o.jsx)(n.code,{children:'"true"'})," depending on the mode.\r\nSpecific plugins can listen to the mode change too \u2013 allowing them to customize parts of the UI depending on the\r\nmode."]}),"\n",(0,o.jsx)(n.h2,{id:"setting-the-mode",children:"Setting the mode"}),"\n",(0,o.jsx)(n.p,{children:"In order to set the mode, this can be done on creation of the editor:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"const editor = createEditor({\r\n  editable: true,\r\n  ...\r\n})\n"})}),"\n",(0,o.jsxs)(n.p,{children:["If you're using ",(0,o.jsx)(n.code,{children:"@lexical/react"})," this can be done on the ",(0,o.jsx)(n.code,{children:"initialConfig"})," passed to ",(0,o.jsx)(n.code,{children:"<LexicalComposer>"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"<LexicalComposer initialConfig={{editable: true}}>\r\n  ...\r\n</LexicalComposer>\n"})}),"\n",(0,o.jsx)(n.p,{children:"After an editor is created, the mode can be changed imperatively:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"editor.setEditable(true);\n"})}),"\n",(0,o.jsx)(n.h2,{id:"reading-the-mode",children:"Reading the mode"}),"\n",(0,o.jsx)(n.p,{children:"In order to find the current mode of the editor you can use:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"const isEditable = editor.isEditable(); // Returns true or false\n"})}),"\n",(0,o.jsx)(n.p,{children:"You can also get notified when the editor's read only mode has changed:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"const removeEditableListener = editor.registerEditableListener(\r\n  (isEditable) => {\r\n    // The editor's mode is passed in!\r\n    console.log(isEditable);\r\n  },\r\n);\r\n\r\n// Do not forget to unregister the listener when no longer needed!\r\nremoveEditableListener();\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}},71184:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var o=t(14041);const i={},d=o.createContext(i);function r(e){const n=o.useContext(d);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(d.Provider,{value:n},e.children)}}}]);