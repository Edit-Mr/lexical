"use strict";(self.webpackChunk_lexical_website=self.webpackChunk_lexical_website||[]).push([[1965],{71738:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var i=n(31085),o=n(71184);const r={},s="Lexical's Design",a={id:"design",title:"Lexical's Design",description:"Note: this document is still a work-in-progress and things are likely still in flux.",source:"@site/docs/design.md",sourceDirName:".",slug:"/design",permalink:"/docs/design",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/lexical/tree/main/packages/lexical-website/docs/design.md",tags:[],version:"current",frontMatter:{}},c={},l=[];function d(e){const t={blockquote:"blockquote",code:"code",h1:"h1",header:"header",li:"li",p:"p",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"lexicals-design",children:"Lexical's Design"})}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsx)(t.p,{children:"Note: this document is still a work-in-progress and things are likely still in flux."}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Lexical was built from the ground up to be a lean and extensible text-editing framework."}),"\n",(0,i.jsx)(t.p,{children:"You can think of Lexical as more of a text editing engine, rather than a monolithic text\r\neditor that provides everything out-of-the-box. It might help to think of Lexical as\r\na framework like React \u2013 where React provides some hooks and a reconciler, and then you\r\nbuild the things you need on top, rather than have them included by default."}),"\n",(0,i.jsx)(t.p,{children:'The main concept of Lexical is the editor state. Lexical uses a double-buffering technique\r\nto ensure consistency and reliability. There are never more than two editor states in play.\r\nThe "current" editor state represents what you can visibly see on screen and the "pending"\r\neditor state is what is currently being constructed to be shown in the future. Once the\r\n"pending" editor state is ready, it swaps and becomes the new "current" editor state.'}),"\n",(0,i.jsx)(t.p,{children:"Lexical's core concerns itself with four main concerns:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Updates: the act of making changes to editor state"}),"\n",(0,i.jsx)(t.li,{children:"Node Transforms: the process of acting on ongoing updates"}),"\n",(0,i.jsx)(t.li,{children:"Reconciliation: the process of patching the DOM with the latest editor state"}),"\n",(0,i.jsx)(t.li,{children:"Listening/Commands: the process of reacting to changes that occur internally"}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Additionally, Lexical uses DOM mutation observers to ensure that any outside changes to\r\nthe editor DOM element are either reverted back to Lexical's current editor state, or are\r\ncommunicated as intents that cause further updates to the editor state (text changes)."}),"\n",(0,i.jsx)(t.p,{children:"This separation was done to ensure developers have a way of applying custom logic with the\r\nimplementation and framework of their choice. This makes it possible to use Lexical with\r\nReact, or any other JavaScript web framework/library. This also makes it easier to tackle\r\nproblems around collaboration and undo/redo, where you might have an alternative model involved.\r\nInstead of hoping for the text editor to support what you want, you can work with the editor\r\nto make what you want."}),"\n",(0,i.jsxs)(t.p,{children:["This design can make getting started a bit more complex in certain cases, but as we've been\r\nable to demonstrate with our ",(0,i.jsx)(t.code,{children:"@lexical/react"})," plugins and hooks \u2013 you can get started, in the\r\nform of an out-of-the-box experience."]})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},71184:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>a});var i=n(14041);const o={},r=i.createContext(o);function s(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);