"use strict";(self.webpackChunk_lexical_website=self.webpackChunk_lexical_website||[]).push([[3916],{63517:(e,i,d)=>{d.r(i),d.d(i,{assets:()=>c,contentTitle:()=>r,default:()=>a,frontMatter:()=>n,metadata:()=>t,toc:()=>h});var l=d(31085),s=d(71184);const n={id:"lexical_code.CodeHighlightNode",title:"Class: CodeHighlightNode",custom_edit_url:null},r=void 0,t={id:"api/classes/lexical_code.CodeHighlightNode",title:"Class: CodeHighlightNode",description:"@lexical/code.CodeHighlightNode",source:"@site/docs/api/classes/lexical_code.CodeHighlightNode.md",sourceDirName:"api/classes",slug:"/api/classes/lexical_code.CodeHighlightNode",permalink:"/docs/api/classes/lexical_code.CodeHighlightNode",draft:!1,unlisted:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"lexical_code.CodeHighlightNode",title:"Class: CodeHighlightNode",custom_edit_url:null},sidebar:"api",previous:{title:"TextNode",permalink:"/docs/api/classes/lexical.TextNode"},next:{title:"CodeNode",permalink:"/docs/api/classes/lexical_code.CodeNode"}},c={},h=[{value:"Hierarchy",id:"hierarchy",level:2},{value:"Constructors",id:"constructors",level:2},{value:"constructor",id:"constructor",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Overrides",id:"overrides",level:4},{value:"Defined in",id:"defined-in",level:4},{value:"Methods",id:"methods",level:2},{value:"canHaveFormat",id:"canhaveformat",level:3},{value:"Returns",id:"returns-1",level:4},{value:"Overrides",id:"overrides-1",level:4},{value:"Defined in",id:"defined-in-1",level:4},{value:"createDOM",id:"createdom",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Overrides",id:"overrides-2",level:4},{value:"Defined in",id:"defined-in-2",level:4},{value:"createParentElementNode",id:"createparentelementnode",level:3},{value:"Returns",id:"returns-3",level:4},{value:"Overrides",id:"overrides-3",level:4},{value:"Defined in",id:"defined-in-3",level:4},{value:"exportJSON",id:"exportjson",level:3},{value:"Returns",id:"returns-4",level:4},{value:"Overrides",id:"overrides-4",level:4},{value:"Defined in",id:"defined-in-4",level:4},{value:"getHighlightType",id:"gethighlighttype",level:3},{value:"Returns",id:"returns-5",level:4},{value:"Defined in",id:"defined-in-5",level:4},{value:"isParentRequired",id:"isparentrequired",level:3},{value:"Returns",id:"returns-6",level:4},{value:"Overrides",id:"overrides-5",level:4},{value:"Defined in",id:"defined-in-6",level:4},{value:"setFormat",id:"setformat",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-7",level:4},{value:"Overrides",id:"overrides-6",level:4},{value:"Defined in",id:"defined-in-7",level:4},{value:"updateDOM",id:"updatedom",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-8",level:4},{value:"Overrides",id:"overrides-7",level:4},{value:"Defined in",id:"defined-in-8",level:4},{value:"clone",id:"clone",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-9",level:4},{value:"Overrides",id:"overrides-8",level:4},{value:"Defined in",id:"defined-in-9",level:4},{value:"getType",id:"gettype",level:3},{value:"Returns",id:"returns-10",level:4},{value:"Overrides",id:"overrides-9",level:4},{value:"Defined in",id:"defined-in-10",level:4},{value:"importJSON",id:"importjson",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-11",level:4},{value:"Overrides",id:"overrides-10",level:4},{value:"Defined in",id:"defined-in-11",level:4}];function o(e){const i={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.a,{href:"/docs/api/modules/lexical_code",children:"@lexical/code"}),".CodeHighlightNode"]}),"\n",(0,l.jsx)(i.h2,{id:"hierarchy",children:"Hierarchy"}),"\n",(0,l.jsxs)(i.ul,{children:["\n",(0,l.jsxs)(i.li,{children:["\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.TextNode",children:(0,l.jsx)(i.code,{children:"TextNode"})})}),"\n",(0,l.jsxs)(i.p,{children:["\u21b3 ",(0,l.jsx)(i.strong,{children:(0,l.jsx)(i.code,{children:"CodeHighlightNode"})})]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(i.h2,{id:"constructors",children:"Constructors"}),"\n",(0,l.jsx)(i.h3,{id:"constructor",children:"constructor"}),"\n",(0,l.jsxs)(i.p,{children:["\u2022 ",(0,l.jsx)(i.strong,{children:"new CodeHighlightNode"}),"(",(0,l.jsx)(i.code,{children:"text"}),", ",(0,l.jsx)(i.code,{children:"highlightType?"}),", ",(0,l.jsx)(i.code,{children:"key?"}),"): ",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical_code.CodeHighlightNode",children:(0,l.jsx)(i.code,{children:"CodeHighlightNode"})})]}),"\n",(0,l.jsx)(i.h4,{id:"parameters",children:"Parameters"}),"\n",(0,l.jsxs)(i.table,{children:[(0,l.jsx)(i.thead,{children:(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,l.jsxs)(i.tbody,{children:[(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.code,{children:"text"})}),(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.code,{children:"string"})})]}),(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.code,{children:"highlightType?"})}),(0,l.jsxs)(i.td,{style:{textAlign:"left"},children:[(0,l.jsx)(i.code,{children:"null"})," | ",(0,l.jsx)(i.code,{children:"string"})]})]}),(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.code,{children:"key?"})}),(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.code,{children:"string"})})]})]})]}),"\n",(0,l.jsx)(i.h4,{id:"returns",children:"Returns"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical_code.CodeHighlightNode",children:(0,l.jsx)(i.code,{children:"CodeHighlightNode"})})}),"\n",(0,l.jsx)(i.h4,{id:"overrides",children:"Overrides"}),"\n",(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.TextNode",children:"TextNode"}),".",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.TextNode#constructor",children:"constructor"})]}),"\n",(0,l.jsx)(i.h4,{id:"defined-in",children:"Defined in"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical-code/src/CodeHighlightNode.ts#L100",children:"packages/lexical-code/src/CodeHighlightNode.ts:100"})}),"\n",(0,l.jsx)(i.h2,{id:"methods",children:"Methods"}),"\n",(0,l.jsx)(i.h3,{id:"canhaveformat",children:"canHaveFormat"}),"\n",(0,l.jsxs)(i.p,{children:["\u25b8 ",(0,l.jsx)(i.strong,{children:"canHaveFormat"}),"(): ",(0,l.jsx)(i.code,{children:"boolean"})]}),"\n",(0,l.jsx)(i.h4,{id:"returns-1",children:"Returns"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.code,{children:"boolean"})}),"\n",(0,l.jsx)(i.p,{children:"true if the text node supports font styling, false otherwise."}),"\n",(0,l.jsx)(i.h4,{id:"overrides-1",children:"Overrides"}),"\n",(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.TextNode",children:"TextNode"}),".",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.TextNode#canhaveformat",children:"canHaveFormat"})]}),"\n",(0,l.jsx)(i.h4,{id:"defined-in-1",children:"Defined in"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical-code/src/CodeHighlightNode.ts#L126",children:"packages/lexical-code/src/CodeHighlightNode.ts:126"})}),"\n",(0,l.jsx)(i.hr,{}),"\n",(0,l.jsx)(i.h3,{id:"createdom",children:"createDOM"}),"\n",(0,l.jsxs)(i.p,{children:["\u25b8 ",(0,l.jsx)(i.strong,{children:"createDOM"}),"(",(0,l.jsx)(i.code,{children:"config"}),"): ",(0,l.jsx)(i.code,{children:"HTMLElement"})]}),"\n",(0,l.jsx)(i.p,{children:"Called during the reconciliation process to determine which nodes\r\nto insert into the DOM for this Lexical Node."}),"\n",(0,l.jsx)(i.p,{children:"This method must return exactly one HTMLElement. Nested elements are not supported."}),"\n",(0,l.jsx)(i.p,{children:"Do not attempt to update the Lexical EditorState during this phase of the update lifecyle."}),"\n",(0,l.jsx)(i.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,l.jsxs)(i.table,{children:[(0,l.jsx)(i.thead,{children:(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(i.th,{style:{textAlign:"left"},children:"Type"}),(0,l.jsx)(i.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,l.jsx)(i.tbody,{children:(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.code,{children:"config"})}),(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.a,{href:"/docs/api/modules/lexical#editorconfig",children:(0,l.jsx)(i.code,{children:"EditorConfig"})})}),(0,l.jsx)(i.td,{style:{textAlign:"left"},children:"allows access to things like the EditorTheme (to apply classes) during reconciliation."})]})})]}),"\n",(0,l.jsx)(i.h4,{id:"returns-2",children:"Returns"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.code,{children:"HTMLElement"})}),"\n",(0,l.jsx)(i.h4,{id:"overrides-2",children:"Overrides"}),"\n",(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.TextNode",children:"TextNode"}),".",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.TextNode#createdom",children:"createDOM"})]}),"\n",(0,l.jsx)(i.h4,{id:"defined-in-2",children:"Defined in"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical-code/src/CodeHighlightNode.ts#L130",children:"packages/lexical-code/src/CodeHighlightNode.ts:130"})}),"\n",(0,l.jsx)(i.hr,{}),"\n",(0,l.jsx)(i.h3,{id:"createparentelementnode",children:"createParentElementNode"}),"\n",(0,l.jsxs)(i.p,{children:["\u25b8 ",(0,l.jsx)(i.strong,{children:"createParentElementNode"}),"(): ",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode",children:(0,l.jsx)(i.code,{children:"ElementNode"})})]}),"\n",(0,l.jsxs)(i.p,{children:["The creation logic for any required parent. Should be implemented if ",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode#isparentrequired",children:"isParentRequired"})," returns true."]}),"\n",(0,l.jsx)(i.h4,{id:"returns-3",children:"Returns"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode",children:(0,l.jsx)(i.code,{children:"ElementNode"})})}),"\n",(0,l.jsx)(i.h4,{id:"overrides-3",children:"Overrides"}),"\n",(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.TextNode",children:"TextNode"}),".",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.TextNode#createparentelementnode",children:"createParentElementNode"})]}),"\n",(0,l.jsx)(i.h4,{id:"defined-in-3",children:"Defined in"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical-code/src/CodeHighlightNode.ts#L197",children:"packages/lexical-code/src/CodeHighlightNode.ts:197"})}),"\n",(0,l.jsx)(i.hr,{}),"\n",(0,l.jsx)(i.h3,{id:"exportjson",children:"exportJSON"}),"\n",(0,l.jsxs)(i.p,{children:["\u25b8 ",(0,l.jsx)(i.strong,{children:"exportJSON"}),"(): ",(0,l.jsx)(i.code,{children:"SerializedCodeHighlightNode"})]}),"\n",(0,l.jsxs)(i.p,{children:["Controls how the this node is serialized to JSON. This is important for\r\ncopy and paste between Lexical editors sharing the same namespace. It's also important\r\nif you're serializing to JSON for persistent storage somewhere.\r\nSee ",(0,l.jsx)(i.a,{href:"https://lexical.dev/docs/concepts/serialization#lexical---html",children:"Serialization & Deserialization"}),"."]}),"\n",(0,l.jsx)(i.h4,{id:"returns-4",children:"Returns"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.code,{children:"SerializedCodeHighlightNode"})}),"\n",(0,l.jsx)(i.h4,{id:"overrides-4",children:"Overrides"}),"\n",(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.TextNode",children:"TextNode"}),".",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.TextNode#exportjson",children:"exportJSON"})]}),"\n",(0,l.jsx)(i.h4,{id:"defined-in-4",children:"Defined in"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical-code/src/CodeHighlightNode.ts#L179",children:"packages/lexical-code/src/CodeHighlightNode.ts:179"})}),"\n",(0,l.jsx)(i.hr,{}),"\n",(0,l.jsx)(i.h3,{id:"gethighlighttype",children:"getHighlightType"}),"\n",(0,l.jsxs)(i.p,{children:["\u25b8 ",(0,l.jsx)(i.strong,{children:"getHighlightType"}),"(): ",(0,l.jsx)(i.code,{children:"undefined"})," | ",(0,l.jsx)(i.code,{children:"null"})," | ",(0,l.jsx)(i.code,{children:"string"})]}),"\n",(0,l.jsx)(i.h4,{id:"returns-5",children:"Returns"}),"\n",(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.code,{children:"undefined"})," | ",(0,l.jsx)(i.code,{children:"null"})," | ",(0,l.jsx)(i.code,{children:"string"})]}),"\n",(0,l.jsx)(i.h4,{id:"defined-in-5",children:"Defined in"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical-code/src/CodeHighlightNode.ts#L121",children:"packages/lexical-code/src/CodeHighlightNode.ts:121"})}),"\n",(0,l.jsx)(i.hr,{}),"\n",(0,l.jsx)(i.h3,{id:"isparentrequired",children:"isParentRequired"}),"\n",(0,l.jsxs)(i.p,{children:["\u25b8 ",(0,l.jsx)(i.strong,{children:"isParentRequired"}),"(): ",(0,l.jsx)(i.code,{children:"true"})]}),"\n",(0,l.jsx)(i.p,{children:"Whether or not this node has a required parent. Used during copy + paste operations\r\nto normalize nodes that would otherwise be orphaned. For example, ListItemNodes without\r\na ListNode parent or TextNodes with a ParagraphNode parent."}),"\n",(0,l.jsx)(i.h4,{id:"returns-6",children:"Returns"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.code,{children:"true"})}),"\n",(0,l.jsx)(i.h4,{id:"overrides-5",children:"Overrides"}),"\n",(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.TextNode",children:"TextNode"}),".",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.TextNode#isparentrequired",children:"isParentRequired"})]}),"\n",(0,l.jsx)(i.h4,{id:"defined-in-6",children:"Defined in"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical-code/src/CodeHighlightNode.ts#L193",children:"packages/lexical-code/src/CodeHighlightNode.ts:193"})}),"\n",(0,l.jsx)(i.hr,{}),"\n",(0,l.jsx)(i.h3,{id:"setformat",children:"setFormat"}),"\n",(0,l.jsxs)(i.p,{children:["\u25b8 ",(0,l.jsx)(i.strong,{children:"setFormat"}),"(",(0,l.jsx)(i.code,{children:"format"}),"): ",(0,l.jsx)(i.code,{children:"this"})]}),"\n",(0,l.jsxs)(i.p,{children:["Sets the node format to the provided TextFormatType or 32-bit integer. Note that the TextFormatType\r\nversion of the argument can only specify one format and doing so will remove all other formats that\r\nmay be applied to the node. For toggling behavior, consider using ",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.TextNode#toggleformat",children:"TextNode.toggleFormat"})]}),"\n",(0,l.jsx)(i.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,l.jsxs)(i.table,{children:[(0,l.jsx)(i.thead,{children:(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(i.th,{style:{textAlign:"left"},children:"Type"}),(0,l.jsx)(i.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,l.jsx)(i.tbody,{children:(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.code,{children:"format"})}),(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.code,{children:"number"})}),(0,l.jsx)(i.td,{style:{textAlign:"left"},children:"TextFormatType or 32-bit integer representing the node format."})]})})]}),"\n",(0,l.jsx)(i.h4,{id:"returns-7",children:"Returns"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.code,{children:"this"})}),"\n",(0,l.jsxs)(i.p,{children:["this TextNode.\r\n// TODO 0.12 This should just be a ",(0,l.jsx)(i.code,{children:"string"}),"."]}),"\n",(0,l.jsx)(i.h4,{id:"overrides-6",children:"Overrides"}),"\n",(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.TextNode",children:"TextNode"}),".",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.TextNode#setformat",children:"setFormat"})]}),"\n",(0,l.jsx)(i.h4,{id:"defined-in-7",children:"Defined in"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical-code/src/CodeHighlightNode.ts#L189",children:"packages/lexical-code/src/CodeHighlightNode.ts:189"})}),"\n",(0,l.jsx)(i.hr,{}),"\n",(0,l.jsx)(i.h3,{id:"updatedom",children:"updateDOM"}),"\n",(0,l.jsxs)(i.p,{children:["\u25b8 ",(0,l.jsx)(i.strong,{children:"updateDOM"}),"(",(0,l.jsx)(i.code,{children:"prevNode"}),", ",(0,l.jsx)(i.code,{children:"dom"}),", ",(0,l.jsx)(i.code,{children:"config"}),"): ",(0,l.jsx)(i.code,{children:"boolean"})]}),"\n",(0,l.jsx)(i.p,{children:"Called when a node changes and should update the DOM\r\nin whatever way is necessary to make it align with any changes that might\r\nhave happened during the update."}),"\n",(0,l.jsx)(i.p,{children:'Returning "true" here will cause lexical to unmount and recreate the DOM node\r\n(by calling createDOM). You would need to do this if the element tag changes,\r\nfor instance.'}),"\n",(0,l.jsx)(i.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,l.jsxs)(i.table,{children:[(0,l.jsx)(i.thead,{children:(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,l.jsxs)(i.tbody,{children:[(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.code,{children:"prevNode"})}),(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical_code.CodeHighlightNode",children:(0,l.jsx)(i.code,{children:"CodeHighlightNode"})})})]}),(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.code,{children:"dom"})}),(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.code,{children:"HTMLElement"})})]}),(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.code,{children:"config"})}),(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.a,{href:"/docs/api/modules/lexical#editorconfig",children:(0,l.jsx)(i.code,{children:"EditorConfig"})})})]})]})]}),"\n",(0,l.jsx)(i.h4,{id:"returns-8",children:"Returns"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.code,{children:"boolean"})}),"\n",(0,l.jsx)(i.h4,{id:"overrides-7",children:"Overrides"}),"\n",(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.TextNode",children:"TextNode"}),".",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.TextNode#updatedom",children:"updateDOM"})]}),"\n",(0,l.jsx)(i.h4,{id:"defined-in-8",children:"Defined in"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical-code/src/CodeHighlightNode.ts#L140",children:"packages/lexical-code/src/CodeHighlightNode.ts:140"})}),"\n",(0,l.jsx)(i.hr,{}),"\n",(0,l.jsx)(i.h3,{id:"clone",children:"clone"}),"\n",(0,l.jsxs)(i.p,{children:["\u25b8 ",(0,l.jsx)(i.strong,{children:"clone"}),"(",(0,l.jsx)(i.code,{children:"node"}),"): ",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical_code.CodeHighlightNode",children:(0,l.jsx)(i.code,{children:"CodeHighlightNode"})})]}),"\n",(0,l.jsx)(i.p,{children:"Clones this node, creating a new node with a different key\r\nand adding it to the EditorState (but not attaching it anywhere!). All nodes must\r\nimplement this method."}),"\n",(0,l.jsx)(i.h4,{id:"parameters-4",children:"Parameters"}),"\n",(0,l.jsxs)(i.table,{children:[(0,l.jsx)(i.thead,{children:(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,l.jsx)(i.tbody,{children:(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.code,{children:"node"})}),(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical_code.CodeHighlightNode",children:(0,l.jsx)(i.code,{children:"CodeHighlightNode"})})})]})})]}),"\n",(0,l.jsx)(i.h4,{id:"returns-9",children:"Returns"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical_code.CodeHighlightNode",children:(0,l.jsx)(i.code,{children:"CodeHighlightNode"})})}),"\n",(0,l.jsx)(i.h4,{id:"overrides-8",children:"Overrides"}),"\n",(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.TextNode",children:"TextNode"}),".",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.TextNode#clone",children:"clone"})]}),"\n",(0,l.jsx)(i.h4,{id:"defined-in-9",children:"Defined in"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical-code/src/CodeHighlightNode.ts#L113",children:"packages/lexical-code/src/CodeHighlightNode.ts:113"})}),"\n",(0,l.jsx)(i.hr,{}),"\n",(0,l.jsx)(i.h3,{id:"gettype",children:"getType"}),"\n",(0,l.jsxs)(i.p,{children:["\u25b8 ",(0,l.jsx)(i.strong,{children:"getType"}),"(): ",(0,l.jsx)(i.code,{children:"string"})]}),"\n",(0,l.jsx)(i.p,{children:"Returns the string type of this node. Every node must\r\nimplement this and it MUST BE UNIQUE amongst nodes registered\r\non the editor."}),"\n",(0,l.jsx)(i.h4,{id:"returns-10",children:"Returns"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.code,{children:"string"})}),"\n",(0,l.jsx)(i.h4,{id:"overrides-9",children:"Overrides"}),"\n",(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.TextNode",children:"TextNode"}),".",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.TextNode#gettype-1",children:"getType"})]}),"\n",(0,l.jsx)(i.h4,{id:"defined-in-10",children:"Defined in"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical-code/src/CodeHighlightNode.ts#L109",children:"packages/lexical-code/src/CodeHighlightNode.ts:109"})}),"\n",(0,l.jsx)(i.hr,{}),"\n",(0,l.jsx)(i.h3,{id:"importjson",children:"importJSON"}),"\n",(0,l.jsxs)(i.p,{children:["\u25b8 ",(0,l.jsx)(i.strong,{children:"importJSON"}),"(",(0,l.jsx)(i.code,{children:"serializedNode"}),"): ",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical_code.CodeHighlightNode",children:(0,l.jsx)(i.code,{children:"CodeHighlightNode"})})]}),"\n",(0,l.jsxs)(i.p,{children:["Controls how the this node is deserialized from JSON. This is usually boilerplate,\r\nbut provides an abstraction between the node implementation and serialized interface that can\r\nbe important if you ever make breaking changes to a node schema (by adding or removing properties).\r\nSee ",(0,l.jsx)(i.a,{href:"https://lexical.dev/docs/concepts/serialization#lexical---html",children:"Serialization & Deserialization"}),"."]}),"\n",(0,l.jsx)(i.h4,{id:"parameters-5",children:"Parameters"}),"\n",(0,l.jsxs)(i.table,{children:[(0,l.jsx)(i.thead,{children:(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,l.jsx)(i.tbody,{children:(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.code,{children:"serializedNode"})}),(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.code,{children:"SerializedCodeHighlightNode"})})]})})]}),"\n",(0,l.jsx)(i.h4,{id:"returns-11",children:"Returns"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical_code.CodeHighlightNode",children:(0,l.jsx)(i.code,{children:"CodeHighlightNode"})})}),"\n",(0,l.jsx)(i.h4,{id:"overrides-10",children:"Overrides"}),"\n",(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.TextNode",children:"TextNode"}),".",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.TextNode#importjson",children:"importJSON"})]}),"\n",(0,l.jsx)(i.h4,{id:"defined-in-11",children:"Defined in"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical-code/src/CodeHighlightNode.ts#L165",children:"packages/lexical-code/src/CodeHighlightNode.ts:165"})})]})}function a(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,l.jsx)(i,{...e,children:(0,l.jsx)(o,{...e})}):o(e)}},71184:(e,i,d)=>{d.d(i,{R:()=>r,x:()=>t});var l=d(14041);const s={},n=l.createContext(s);function r(e){const i=l.useContext(n);return l.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function t(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),l.createElement(n.Provider,{value:i},e.children)}}}]);