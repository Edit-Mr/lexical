"use strict";(self.webpackChunk_lexical_website=self.webpackChunk_lexical_website||[]).push([[4268],{33988:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>l,toc:()=>o});var r=i(31085),s=i(71184);const t={},a="Maintainers' Guide",l={id:"maintainers-guide",title:"Maintainers' Guide",description:"This is the grimoire of arcane knowledge covering the overall organization",source:"@site/docs/maintainers-guide.md",sourceDirName:".",slug:"/maintainers-guide",permalink:"/docs/maintainers-guide",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/lexical/tree/main/packages/lexical-website/docs/maintainers-guide.md",tags:[],version:"current",frontMatter:{}},c={},o=[{value:"Monorepo Organization",id:"monorepo-organization",level:2},{value:"Workspaces",id:"workspaces",level:3},{value:"Private",id:"private",level:3},{value:"Package naming conventions",id:"package-naming-conventions",level:2},{value:"Overall",id:"overall",level:3},{value:"Multiple module export (@lexical/react)",id:"multiple-module-export-lexicalreact",level:3},{value:"Creating a new package",id:"creating-a-new-package",level:2},{value:"Create the workspace",id:"create-the-workspace",level:3},{value:"Create the initial source file",id:"create-the-initial-source-file",level:3},{value:"Run update-packages to generate boilerplate docs &amp; config",id:"run-update-packages-to-generate-boilerplate-docs--config",level:3},{value:"Create an initial unit test",id:"create-an-initial-unit-test",level:3},{value:"Scripts for development",id:"scripts-for-development",level:2},{value:"npm run update-packages",id:"npm-run-update-packages",level:3},{value:"npm run prepare-release",id:"npm-run-prepare-release",level:3},{value:"npm run ci-check",id:"npm-run-ci-check",level:3},{value:"npm run flow",id:"npm-run-flow",level:3},{value:"npm run tsc",id:"npm-run-tsc",level:3},{value:"npm run tsc-extension",id:"npm-run-tsc-extension",level:3},{value:"npm run test-unit",id:"npm-run-test-unit",level:3},{value:"npm run lint",id:"npm-run-lint",level:3},{value:"Scripts for release managers",id:"scripts-for-release-managers",level:2},{value:"npm run extract-codes",id:"npm-run-extract-codes",level:3},{value:"npm run increment-version",id:"npm-run-increment-version",level:3},{value:"npm run changelog",id:"npm-run-changelog",level:3},{value:"npm run release",id:"npm-run-release",level:3},{value:"Release Procedure",id:"release-procedure",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components},{Details:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"maintainers-guide",children:"Maintainers' Guide"})}),"\n",(0,r.jsx)(n.p,{children:"This is the grimoire of arcane knowledge covering the overall organization\r\nof the Lexical monorepo, including its conventions, quirks, and\r\nconfigurations."}),"\n",(0,r.jsx)(n.h2,{id:"monorepo-organization",children:"Monorepo Organization"}),"\n",(0,r.jsx)(n.h3,{id:"workspaces",children:"Workspaces"}),"\n",(0,r.jsxs)(n.p,{children:["The top-level ",(0,r.jsx)(n.code,{children:"package.json"})," uses\r\n",(0,r.jsx)(n.a,{href:"https://docs.npmjs.com/cli/v10/using-npm/workspaces",children:"npm workspaces"})," to\r\nconfigure the monorepo. This mostly means that all packages share a\r\ntop-level ",(0,r.jsx)(n.code,{children:"package-lock.json"})," and ",(0,r.jsx)(n.code,{children:"npm run {command} -w {package}"})," is often\r\nused to run a command from a nested package's package.json."]}),"\n",(0,r.jsx)(n.h3,{id:"private",children:"Private"}),"\n",(0,r.jsx)(n.p,{children:"Some packages in the monorepo do not get published to npm, for example:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"packages/lexical-devtools"})," - browser extension for working with Lexical\r\nsites"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"packages/lexical-playground"})," - the\r\n",(0,r.jsx)(n.a,{href:"https://playground.lexical.dev/",children:"playground.lexical.dev"})," demo site"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"packages/lexical-website"})," - the ",(0,r.jsx)(n.a,{href:"https://lexical.dev/",children:"lexical.dev"}),"\r\ndocusaurus website that you may even be reading right now"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"packages/shared"})," - internal code that is used by more than one repository\r\nbut should not be a public API"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["It is required that these packages, and any other package that should not be\r\npublished to npm, have a ",(0,r.jsx)(n.code,{children:'"private": true'})," property in their ",(0,r.jsx)(n.code,{children:"package.json"}),".\r\nIf you have an in-progress package that will eventually be public, but is\r\nnot ready for consumption, it should probably still be set to\r\n",(0,r.jsx)(n.code,{children:'"private": true'})," otherwise the tooling will find it and publish it."]}),"\n",(0,r.jsx)(n.h2,{id:"package-naming-conventions",children:"Package naming conventions"}),"\n",(0,r.jsx)(n.h3,{id:"overall",children:"Overall"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Usage"}),(0,r.jsx)(n.th,{children:"Convention"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Directory name"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"packages/lexical-package-name"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Entrypoint"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"packages/lexical-package-name/src/index.{ts,tsx}"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Flow types"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"packages/lexical-package/flow/LexicalPackageName.js.flow"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"package.json name"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"@lexical/package-name"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Documentation"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"packages/lexical-package-name/README.md"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Unit Tests"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"packages/lexical-package-name/src/__tests__/unit/LexicalPackageName.test.{ts,tsx}"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"dist (gitignore'd build product)"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"packages/lexical-package-name/dist"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"npm (gitignore'd prerelease product)"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"packages/lexical-package-name/npm"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"www entrypoint"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"packages/lexical-package-name/LexicalPackageName.js"})})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"multiple-module-export-lexicalreact",children:"Multiple module export (@lexical/react)"}),"\n",(0,r.jsxs)(n.p,{children:["Instead of having a single module, some packages may have many modules\r\n(currently only ",(0,r.jsx)(n.code,{children:"@lexical/react"}),") that are each exported separately.\r\nIn that scenario, there should be no ",(0,r.jsx)(n.code,{children:"index.ts"})," entrypoint file and every module\r\nat the top-level should be an entrypoint. All entrypoints should be a\r\nTypeScript file, not a subdirectory containing an index.ts file."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.a,{href:"#npm-run-update-packages",children:"update-packages"})," script will ensure that the\r\nexports match the files on disk."]}),"\n",(0,r.jsx)(n.h2,{id:"creating-a-new-package",children:"Creating a new package"}),"\n",(0,r.jsxs)(n.p,{children:["The first step in creating a new package is to create the workspace, there\r\nis a ",(0,r.jsx)(n.a,{href:"https://docs.npmjs.com/cli/v10/commands/npm-init",children:"npm-init"})," template\r\nthat will fill in some of the defaults for you based on conventions."]}),"\n",(0,r.jsxs)(n.p,{children:["The example we will use is the steps that were used to create the\r\n",(0,r.jsx)(n.code,{children:"lexical-eslint-plugin"}),", which will be published to npm as\r\n",(0,r.jsx)(n.code,{children:"@lexical/eslint-plugin"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"create-the-workspace",children:"Create the workspace"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npm init -w packages/lexical-eslint-plugin\n"})}),"\n",(0,r.jsx)(n.p,{children:"This only automates the first step, creating a single file:"}),"\n",(0,r.jsxs)(i,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"packages/lexical-eslint-plugin/package.json"})})}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\r\n  "name": "@lexical/eslint-plugin",\r\n  "description": "",\r\n  "keywords": [\r\n    "lexical",\r\n    "editor"\r\n  ],\r\n  "version": "0.14.3",\r\n  "license": "MIT",\r\n  "repository": {\r\n    "type": "git",\r\n    "url": "git+https://github.com/facebook/lexical.git",\r\n    "directory": "packages/lexical-eslint-plugin"\r\n  },\r\n  "main": "LexicalEslintPlugin.js",\r\n  "types": "index.d.ts",\r\n  "bugs": {\r\n    "url": "https://github.com/facebook/lexical/issues"\r\n  },\r\n  "homepage": "https://github.com/facebook/lexical#readme"\r\n}\n'})})]}),"\n",(0,r.jsx)(n.p,{children:"Some next steps for this package.json before moving on:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Update the description"}),"\n",(0,r.jsx)(n.li,{children:"Add appropriate keywords"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"create-the-initial-source-file",children:"Create the initial source file"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"mkdir -p packages/lexical-eslint-plugin/src\r\ncode packages/lexical-eslint-plugin/src/index.ts\n"})}),"\n",(0,r.jsx)(n.p,{children:"Here are some minimal examples of those files that you might start out with.\r\nI've elided the license header, the eslint header/header fixer will help you\r\nwith that!"}),"\n",(0,r.jsxs)(i,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"packages/lexical-eslint-plugin/src/index.ts"})})}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import {name, version} from '../package.json';\r\n\r\nconst plugin = {\r\n  meta: {name, version},\r\n  rules: {},\r\n};\r\n\r\nexport default plugin;\n"})})]}),"\n",(0,r.jsx)(n.h3,{id:"run-update-packages-to-generate-boilerplate-docs--config",children:"Run update-packages to generate boilerplate docs & config"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npm run update-packages\n"})}),"\n",(0,r.jsx)(n.p,{children:"This will set up the tsconfig, flow, etc. configuration to recognize your\r\nnew module. It will also create an initial README.md using only the\r\ndescription from the package.json."}),"\n",(0,r.jsx)(n.h3,{id:"create-an-initial-unit-test",children:"Create an initial unit test"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"mkdir -p packages/lexical-eslint-plugin/src/__tests__/unit\r\ncode packages/lexical-eslint-plugin/src/__tests__/unit/LexicalEslintPlugin.test.ts\n"})}),"\n",(0,r.jsxs)(i,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"packages/lexical-eslint-plugin/src/__tests__/unit/LexicalEslintPlugin.test.ts"})})}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import plugin from '@lexical/eslint-plugin';\r\n\r\ndescribe('LexicalEslintPlugin', () => {\r\n  it('exports a plugin with meta and rules', () => {\r\n    expect(Object.keys(plugin).sort()).toMatchObject(['meta', 'rules']);\r\n  });\r\n});\n"})})]}),"\n",(0,r.jsx)(n.h2,{id:"scripts-for-development",children:"Scripts for development"}),"\n",(0,r.jsx)(n.h3,{id:"npm-run-update-packages",children:"npm run update-packages"}),"\n",(0,r.jsx)(n.p,{children:"This script runs: update-version, update-tsconfig, update-flowconfig,\r\ncreate-docs, and create-www-stubs. This is safe to do at any time and will\r\nensure that package.json files are all at the correct versions, paths are\r\nset up correctly for module resolution of all public exports, and that\r\nvarious defaults are filled in."}),"\n",(0,r.jsx)(n.p,{children:"These scripts can be run individually, but unless you're working on one\r\nof these scripts you might as well run them all."}),"\n",(0,r.jsx)(n.h3,{id:"npm-run-prepare-release",children:"npm run prepare-release"}),"\n",(0,r.jsxs)(n.p,{children:["This runs all of the pre-release steps and will let you inspect the artifacts\r\nthat would be uploaded to npm. Each public package will have a npm directory, e.g.\r\n",(0,r.jsx)(n.code,{children:"packages/lexical/npm"})," that contains those artifacts."]}),"\n",(0,r.jsx)(n.p,{children:"This will also update scripts/error-codes/codes.json, the mapping of\r\nproduction error codes to error messages. It's imperative to commit the result\r\nof this before tagging a release."}),"\n",(0,r.jsx)(n.h3,{id:"npm-run-ci-check",children:"npm run ci-check"}),"\n",(0,r.jsx)(n.p,{children:"Check flow, TypeScript, prettier and eslint for issues. A good command to run\r\nafter committing (which will auto-fix most prettier issues) and before pushing\r\na PR."}),"\n",(0,r.jsx)(n.h3,{id:"npm-run-flow",children:"npm run flow"}),"\n",(0,r.jsx)(n.p,{children:"Check the Flow types"}),"\n",(0,r.jsx)(n.h3,{id:"npm-run-tsc",children:"npm run tsc"}),"\n",(0,r.jsx)(n.p,{children:"Check the TypeScript types"}),"\n",(0,r.jsx)(n.h3,{id:"npm-run-tsc-extension",children:"npm run tsc-extension"}),"\n",(0,r.jsx)(n.p,{children:"Check the TypeScript types of the lexical-devtools extension"}),"\n",(0,r.jsx)(n.h3,{id:"npm-run-test-unit",children:"npm run test-unit"}),"\n",(0,r.jsx)(n.p,{children:"Run the unit tests"}),"\n",(0,r.jsx)(n.h3,{id:"npm-run-lint",children:"npm run lint"}),"\n",(0,r.jsx)(n.p,{children:"Run eslint"}),"\n",(0,r.jsx)(n.h2,{id:"scripts-for-release-managers",children:"Scripts for release managers"}),"\n",(0,r.jsx)(n.h3,{id:"npm-run-extract-codes",children:"npm run extract-codes"}),"\n",(0,r.jsx)(n.p,{children:"This will run a build that also extracts the generated error codes.json file."}),"\n",(0,r.jsx)(n.p,{children:"This should be done, at minimum, before each release, but not in any PR as\r\nit would cause conflicts between serial numbers."}),"\n",(0,r.jsx)(n.p,{children:"It's safe and probably advisable to do this more often, possibly any time a\r\nbranch is merged to main."}),"\n",(0,r.jsx)(n.p,{children:"The codes.json file is also updated any time a release build is generated\r\nas a failsafe to ensure that these codes are up to date in a release.\r\nThis command runs a development build to extract the codes which is much\r\nfaster as it is not doing any optimization/minification steps."}),"\n",(0,r.jsx)(n.h3,{id:"npm-run-increment-version",children:"npm run increment-version"}),"\n",(0,r.jsxs)(n.p,{children:["Increment the monorepo version. The ",(0,r.jsx)(n.code,{children:"-i"})," argument must be one of\r\n",(0,r.jsx)(n.code,{children:"minor"})," | ",(0,r.jsx)(n.code,{children:"patch"})," | ",(0,r.jsx)(n.code,{children:"prerelease"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"The postversion script will:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Create a local ",(0,r.jsx)(n.code,{children:"${npm_package_version}__release"})," branch"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"npm run update-version"})," to update example and sub-package monorepo dependencies"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"npm install"})," to update the package-lock.json"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"npm run update-packages"})," to update other generated config"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"npm run extract-codes"})," to extract the error codes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"npm run update-changelog"})," to update the changelog (if it's not a prerelease)"]}),"\n",(0,r.jsx)(n.li,{children:"Create a version commit and tag from the branch"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["This is typically executed through the ",(0,r.jsx)(n.code,{children:"version.yml"})," GitHub Workflow which\r\nwill also push the tag and branch."]}),"\n",(0,r.jsx)(n.h3,{id:"npm-run-changelog",children:"npm run changelog"}),"\n",(0,r.jsx)(n.p,{children:"Update the changelog from git history."}),"\n",(0,r.jsx)(n.h3,{id:"npm-run-release",children:"npm run release"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"Prerequisites:"})," all of the previous release manager scripts,\r\nplus creating a tag in git, and likely other steps."]}),"\n",(0,r.jsx)(n.p,{children:"Runs prepare-release to do a full build and then uploads to npm."}),"\n",(0,r.jsx)(n.h2,{id:"release-procedure",children:"Release Procedure"}),"\n",(0,r.jsx)(n.p,{children:"This is the current release procedure for public releases, at least as of\r\nMay 2024 (~0.15.0)."}),"\n",(0,r.jsx)(n.p,{children:'The main branch should be "frozen" during this procedure (no other PRs should\r\nbe merged during this time). This avoids a mismatch between the contents of\r\nthe GitHub release (created from main in step 1) and the NPM release (created\r\nfrom main in step 4).'}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:['Create a new version with the Github Actions "Create New Release Branch" workflow (',(0,r.jsx)(n.code,{children:"version.yml"}),")"]}),"\n",(0,r.jsx)(n.li,{children:"Raise a PR against version branch created by that action"}),"\n",(0,r.jsx)(n.li,{children:"After PR is approved with passing tests, merge PR"}),"\n",(0,r.jsxs)(n.li,{children:['After PR is merged to main, publish to NPM with the Github Actions "Publish to NPM" workflow (',(0,r.jsx)(n.code,{children:"pre-release.yml"}),")"]}),"\n",(0,r.jsx)(n.li,{children:"Create a GitHub release from the tag created in step 1, manually editing the release notes"}),"\n",(0,r.jsx)(n.li,{children:"Announce the release in #announcements on Discord"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},71184:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>l});var r=i(14041);const s={},t=r.createContext(s);function a(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);