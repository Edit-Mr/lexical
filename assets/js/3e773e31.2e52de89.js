"use strict";(self.webpackChunk_lexical_website=self.webpackChunk_lexical_website||[]).push([[7773],{94014:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var i=t(31085),o=t(71184);const a={custom_edit_url:"https://github.com/facebook/lexical/tree/main/packages/lexical-html/README.md"},r="@lexical/html",s={id:"packages/lexical-html",title:"@lexical/html",description:"See API Documentation",source:"@site/docs/packages/lexical-html.md",sourceDirName:"packages",slug:"/packages/lexical-html",permalink:"/docs/packages/lexical-html",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/lexical/tree/main/packages/lexical-html/README.md",tags:[],version:"current",frontMatter:{custom_edit_url:"https://github.com/facebook/lexical/tree/main/packages/lexical-html/README.md"},sidebar:"docs",previous:{title:"@lexical/history",permalink:"/docs/packages/lexical-history"},next:{title:"@lexical/link",permalink:"/docs/packages/lexical-link"}},c={},l=[{value:"Exporting",id:"exporting",level:3},{value:"Importing",id:"importing",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h3:"h3",header:"header",img:"img",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"lexicalhtml",children:(0,i.jsx)(n.code,{children:"@lexical/html"})})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://lexical.dev/docs/api/modules/lexical_html",children:(0,i.jsx)(n.img,{src:"https://lexical.dev/img/see-api-documentation.svg",alt:"See API Documentation"})})}),"\n",(0,i.jsx)(n.h1,{id:"html",children:"HTML"}),"\n",(0,i.jsxs)(n.p,{children:["This package exports utility functions for converting ",(0,i.jsx)(n.code,{children:"Lexical"})," -> ",(0,i.jsx)(n.code,{children:"HTML"})," and ",(0,i.jsx)(n.code,{children:"HTML"})," -> ",(0,i.jsx)(n.code,{children:"Lexical"}),". These same functions are also used in the ",(0,i.jsx)(n.code,{children:"lexical-clipboard"})," package for copy and paste."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://lexical.dev/docs/concepts/serialization",children:"Full documentation can be found here."})}),"\n",(0,i.jsx)(n.h3,{id:"exporting",children:"Exporting"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// In a headless mode, you need to initialize a headless browser implementation such as JSDom.\r\nconst dom = new JSDOM();\r\n// @ts-expect-error\r\nglobal.window = dom.window;\r\nglobal.document = dom.window.document;\r\n// You may also need to polyfill DocumentFragment or navigator in certain cases.\r\n\r\n// When converting to HTML you can pass in a selection object to narrow it\r\n// down to a certain part of the editor's contents.\r\nconst htmlString = $generateHtmlFromNodes(editor, selection | null);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"importing",children:"Importing"}),"\n",(0,i.jsx)(n.p,{children:"First we need to parse the HTML string into a DOM instance."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// In the browser you can use the native DOMParser API to parse the HTML string.\r\nconst parser = new DOMParser();\r\nconst dom = parser.parseFromString(htmlString, textHtmlMimeType);\r\n\r\n// In a headless environment you can use a package such as JSDom to parse the HTML string.\r\nconst dom = new JSDOM(htmlString);\n"})}),"\n",(0,i.jsx)(n.p,{children:"And once you have the DOM instance."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const nodes = $generateNodesFromDOM(editor, dom);\r\n\r\n// Once you have the lexical nodes you can initialize an editor instance with the parsed nodes.\r\nconst editor = createEditor({ ...config, nodes });\r\n\r\n// Or insert them at a selection.\r\n$insertNodes(nodes);\n"})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},71184:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var i=t(14041);const o={},a=i.createContext(o);function r(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);