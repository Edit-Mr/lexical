"use strict";(self.webpackChunk_lexical_website=self.webpackChunk_lexical_website||[]).push([[2399],{85421:(e,d,l)=>{l.r(d),l.d(d,{assets:()=>t,contentTitle:()=>r,default:()=>h,frontMatter:()=>n,metadata:()=>c,toc:()=>o});var i=l(31085),s=l(71184);const n={id:"lexical_code.CodeNode",title:"Class: CodeNode",custom_edit_url:null},r=void 0,c={id:"api/classes/lexical_code.CodeNode",title:"Class: CodeNode",description:"@lexical/code.CodeNode",source:"@site/docs/api/classes/lexical_code.CodeNode.md",sourceDirName:"api/classes",slug:"/api/classes/lexical_code.CodeNode",permalink:"/docs/api/classes/lexical_code.CodeNode",draft:!1,unlisted:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"lexical_code.CodeNode",title:"Class: CodeNode",custom_edit_url:null},sidebar:"api",previous:{title:"CodeHighlightNode",permalink:"/docs/api/classes/lexical_code.CodeHighlightNode"},next:{title:"HashtagNode",permalink:"/docs/api/classes/lexical_hashtag.HashtagNode"}},t={},o=[{value:"Hierarchy",id:"hierarchy",level:2},{value:"Constructors",id:"constructors",level:2},{value:"constructor",id:"constructor",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Overrides",id:"overrides",level:4},{value:"Defined in",id:"defined-in",level:4},{value:"Methods",id:"methods",level:2},{value:"canIndent",id:"canindent",level:3},{value:"Returns",id:"returns-1",level:4},{value:"Overrides",id:"overrides-1",level:4},{value:"Defined in",id:"defined-in-1",level:4},{value:"collapseAtStart",id:"collapseatstart",level:3},{value:"Returns",id:"returns-2",level:4},{value:"Overrides",id:"overrides-2",level:4},{value:"Defined in",id:"defined-in-2",level:4},{value:"createDOM",id:"createdom",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Overrides",id:"overrides-3",level:4},{value:"Defined in",id:"defined-in-3",level:4},{value:"exportDOM",id:"exportdom",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-4",level:4},{value:"Overrides",id:"overrides-4",level:4},{value:"Defined in",id:"defined-in-4",level:4},{value:"exportJSON",id:"exportjson",level:3},{value:"Returns",id:"returns-5",level:4},{value:"Overrides",id:"overrides-5",level:4},{value:"Defined in",id:"defined-in-5",level:4},{value:"getIsSyntaxHighlightSupported",id:"getissyntaxhighlightsupported",level:3},{value:"Returns",id:"returns-6",level:4},{value:"Defined in",id:"defined-in-6",level:4},{value:"getLanguage",id:"getlanguage",level:3},{value:"Returns",id:"returns-7",level:4},{value:"Defined in",id:"defined-in-7",level:4},{value:"insertNewAfter",id:"insertnewafter",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-8",level:4},{value:"Overrides",id:"overrides-6",level:4},{value:"Defined in",id:"defined-in-8",level:4},{value:"setLanguage",id:"setlanguage",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-9",level:4},{value:"Defined in",id:"defined-in-9",level:4},{value:"updateDOM",id:"updatedom",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-10",level:4},{value:"Overrides",id:"overrides-7",level:4},{value:"Defined in",id:"defined-in-10",level:4},{value:"clone",id:"clone",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-11",level:4},{value:"Overrides",id:"overrides-8",level:4},{value:"Defined in",id:"defined-in-11",level:4},{value:"getType",id:"gettype",level:3},{value:"Returns",id:"returns-12",level:4},{value:"Overrides",id:"overrides-9",level:4},{value:"Defined in",id:"defined-in-12",level:4},{value:"importDOM",id:"importdom",level:3},{value:"Returns",id:"returns-13",level:4},{value:"Overrides",id:"overrides-10",level:4},{value:"Defined in",id:"defined-in-13",level:4},{value:"importJSON",id:"importjson",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"Returns",id:"returns-14",level:4},{value:"Overrides",id:"overrides-11",level:4},{value:"Defined in",id:"defined-in-14",level:4}];function a(e){const d={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(d.p,{children:[(0,i.jsx)(d.a,{href:"/docs/api/modules/lexical_code",children:"@lexical/code"}),".CodeNode"]}),"\n",(0,i.jsx)(d.h2,{id:"hierarchy",children:"Hierarchy"}),"\n",(0,i.jsxs)(d.ul,{children:["\n",(0,i.jsxs)(d.li,{children:["\n",(0,i.jsx)(d.p,{children:(0,i.jsx)(d.a,{href:"/docs/api/classes/lexical.ElementNode",children:(0,i.jsx)(d.code,{children:"ElementNode"})})}),"\n",(0,i.jsxs)(d.p,{children:["\u21b3 ",(0,i.jsx)(d.strong,{children:(0,i.jsx)(d.code,{children:"CodeNode"})})]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(d.h2,{id:"constructors",children:"Constructors"}),"\n",(0,i.jsx)(d.h3,{id:"constructor",children:"constructor"}),"\n",(0,i.jsxs)(d.p,{children:["\u2022 ",(0,i.jsx)(d.strong,{children:"new CodeNode"}),"(",(0,i.jsx)(d.code,{children:"language?"}),", ",(0,i.jsx)(d.code,{children:"key?"}),"): ",(0,i.jsx)(d.a,{href:"/docs/api/classes/lexical_code.CodeNode",children:(0,i.jsx)(d.code,{children:"CodeNode"})})]}),"\n",(0,i.jsx)(d.h4,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(d.table,{children:[(0,i.jsx)(d.thead,{children:(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.th,{style:{textAlign:"left"},children:"Name"}),(0,i.jsx)(d.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,i.jsxs)(d.tbody,{children:[(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{style:{textAlign:"left"},children:(0,i.jsx)(d.code,{children:"language?"})}),(0,i.jsxs)(d.td,{style:{textAlign:"left"},children:[(0,i.jsx)(d.code,{children:"null"})," | ",(0,i.jsx)(d.code,{children:"string"})]})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{style:{textAlign:"left"},children:(0,i.jsx)(d.code,{children:"key?"})}),(0,i.jsx)(d.td,{style:{textAlign:"left"},children:(0,i.jsx)(d.code,{children:"string"})})]})]})]}),"\n",(0,i.jsx)(d.h4,{id:"returns",children:"Returns"}),"\n",(0,i.jsx)(d.p,{children:(0,i.jsx)(d.a,{href:"/docs/api/classes/lexical_code.CodeNode",children:(0,i.jsx)(d.code,{children:"CodeNode"})})}),"\n",(0,i.jsx)(d.h4,{id:"overrides",children:"Overrides"}),"\n",(0,i.jsxs)(d.p,{children:[(0,i.jsx)(d.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,i.jsx)(d.a,{href:"/docs/api/classes/lexical.ElementNode#constructor",children:"constructor"})]}),"\n",(0,i.jsx)(d.h4,{id:"defined-in",children:"Defined in"}),"\n",(0,i.jsx)(d.p,{children:(0,i.jsx)(d.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical-code/src/CodeNode.ts#L90",children:"packages/lexical-code/src/CodeNode.ts:90"})}),"\n",(0,i.jsx)(d.h2,{id:"methods",children:"Methods"}),"\n",(0,i.jsx)(d.h3,{id:"canindent",children:"canIndent"}),"\n",(0,i.jsxs)(d.p,{children:["\u25b8 ",(0,i.jsx)(d.strong,{children:"canIndent"}),"(): ",(0,i.jsx)(d.code,{children:"false"})]}),"\n",(0,i.jsx)(d.h4,{id:"returns-1",children:"Returns"}),"\n",(0,i.jsx)(d.p,{children:(0,i.jsx)(d.code,{children:"false"})}),"\n",(0,i.jsx)(d.h4,{id:"overrides-1",children:"Overrides"}),"\n",(0,i.jsxs)(d.p,{children:[(0,i.jsx)(d.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,i.jsx)(d.a,{href:"/docs/api/classes/lexical.ElementNode#canindent",children:"canIndent"})]}),"\n",(0,i.jsx)(d.h4,{id:"defined-in-1",children:"Defined in"}),"\n",(0,i.jsx)(d.p,{children:(0,i.jsx)(d.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical-code/src/CodeNode.ts#L315",children:"packages/lexical-code/src/CodeNode.ts:315"})}),"\n",(0,i.jsx)(d.hr,{}),"\n",(0,i.jsx)(d.h3,{id:"collapseatstart",children:"collapseAtStart"}),"\n",(0,i.jsxs)(d.p,{children:["\u25b8 ",(0,i.jsx)(d.strong,{children:"collapseAtStart"}),"(): ",(0,i.jsx)(d.code,{children:"boolean"})]}),"\n",(0,i.jsx)(d.h4,{id:"returns-2",children:"Returns"}),"\n",(0,i.jsx)(d.p,{children:(0,i.jsx)(d.code,{children:"boolean"})}),"\n",(0,i.jsx)(d.h4,{id:"overrides-2",children:"Overrides"}),"\n",(0,i.jsxs)(d.p,{children:[(0,i.jsx)(d.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,i.jsx)(d.a,{href:"/docs/api/classes/lexical.ElementNode#collapseatstart",children:"collapseAtStart"})]}),"\n",(0,i.jsx)(d.h4,{id:"defined-in-2",children:"Defined in"}),"\n",(0,i.jsx)(d.p,{children:(0,i.jsx)(d.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical-code/src/CodeNode.ts#L319",children:"packages/lexical-code/src/CodeNode.ts:319"})}),"\n",(0,i.jsx)(d.hr,{}),"\n",(0,i.jsx)(d.h3,{id:"createdom",children:"createDOM"}),"\n",(0,i.jsxs)(d.p,{children:["\u25b8 ",(0,i.jsx)(d.strong,{children:"createDOM"}),"(",(0,i.jsx)(d.code,{children:"config"}),"): ",(0,i.jsx)(d.code,{children:"HTMLElement"})]}),"\n",(0,i.jsx)(d.p,{children:"Called during the reconciliation process to determine which nodes\r\nto insert into the DOM for this Lexical Node."}),"\n",(0,i.jsx)(d.p,{children:"This method must return exactly one HTMLElement. Nested elements are not supported."}),"\n",(0,i.jsx)(d.p,{children:"Do not attempt to update the Lexical EditorState during this phase of the update lifecyle."}),"\n",(0,i.jsx)(d.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,i.jsxs)(d.table,{children:[(0,i.jsx)(d.thead,{children:(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.th,{style:{textAlign:"left"},children:"Name"}),(0,i.jsx)(d.th,{style:{textAlign:"left"},children:"Type"}),(0,i.jsx)(d.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,i.jsx)(d.tbody,{children:(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{style:{textAlign:"left"},children:(0,i.jsx)(d.code,{children:"config"})}),(0,i.jsx)(d.td,{style:{textAlign:"left"},children:(0,i.jsx)(d.a,{href:"/docs/api/modules/lexical#editorconfig",children:(0,i.jsx)(d.code,{children:"EditorConfig"})})}),(0,i.jsx)(d.td,{style:{textAlign:"left"},children:"allows access to things like the EditorTheme (to apply classes) during reconciliation."})]})})]}),"\n",(0,i.jsx)(d.h4,{id:"returns-3",children:"Returns"}),"\n",(0,i.jsx)(d.p,{children:(0,i.jsx)(d.code,{children:"HTMLElement"})}),"\n",(0,i.jsx)(d.h4,{id:"overrides-3",children:"Overrides"}),"\n",(0,i.jsxs)(d.p,{children:[(0,i.jsx)(d.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,i.jsx)(d.a,{href:"/docs/api/classes/lexical.ElementNode#createdom",children:"createDOM"})]}),"\n",(0,i.jsx)(d.h4,{id:"defined-in-3",children:"Defined in"}),"\n",(0,i.jsx)(d.p,{children:(0,i.jsx)(d.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical-code/src/CodeNode.ts#L97",children:"packages/lexical-code/src/CodeNode.ts:97"})}),"\n",(0,i.jsx)(d.hr,{}),"\n",(0,i.jsx)(d.h3,{id:"exportdom",children:"exportDOM"}),"\n",(0,i.jsxs)(d.p,{children:["\u25b8 ",(0,i.jsx)(d.strong,{children:"exportDOM"}),"(",(0,i.jsx)(d.code,{children:"editor"}),"): ",(0,i.jsx)(d.a,{href:"/docs/api/modules/lexical#domexportoutput",children:(0,i.jsx)(d.code,{children:"DOMExportOutput"})})]}),"\n",(0,i.jsxs)(d.p,{children:["Controls how the this node is serialized to HTML. This is important for\r\ncopy and paste between Lexical and non-Lexical editors, or Lexical editors with different namespaces,\r\nin which case the primary transfer format is HTML. It's also important if you're serializing\r\nto HTML for any other reason via ",(0,i.jsx)(d.a,{href:"/docs/api/modules/lexical_html#generatehtmlfromnodes",children:"$generateHtmlFromNodes"}),". You could\r\nalso use this method to build your own HTML renderer."]}),"\n",(0,i.jsx)(d.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,i.jsxs)(d.table,{children:[(0,i.jsx)(d.thead,{children:(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.th,{style:{textAlign:"left"},children:"Name"}),(0,i.jsx)(d.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,i.jsx)(d.tbody,{children:(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{style:{textAlign:"left"},children:(0,i.jsx)(d.code,{children:"editor"})}),(0,i.jsx)(d.td,{style:{textAlign:"left"},children:(0,i.jsx)(d.a,{href:"/docs/api/classes/lexical.LexicalEditor",children:(0,i.jsx)(d.code,{children:"LexicalEditor"})})})]})})]}),"\n",(0,i.jsx)(d.h4,{id:"returns-4",children:"Returns"}),"\n",(0,i.jsx)(d.p,{children:(0,i.jsx)(d.a,{href:"/docs/api/modules/lexical#domexportoutput",children:(0,i.jsx)(d.code,{children:"DOMExportOutput"})})}),"\n",(0,i.jsx)(d.h4,{id:"overrides-4",children:"Overrides"}),"\n",(0,i.jsxs)(d.p,{children:[(0,i.jsx)(d.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,i.jsx)(d.a,{href:"/docs/api/classes/lexical.ElementNode#exportdom",children:"exportDOM"})]}),"\n",(0,i.jsx)(d.h4,{id:"defined-in-4",children:"Defined in"}),"\n",(0,i.jsx)(d.p,{children:(0,i.jsx)(d.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical-code/src/CodeNode.ts#L137",children:"packages/lexical-code/src/CodeNode.ts:137"})}),"\n",(0,i.jsx)(d.hr,{}),"\n",(0,i.jsx)(d.h3,{id:"exportjson",children:"exportJSON"}),"\n",(0,i.jsxs)(d.p,{children:["\u25b8 ",(0,i.jsx)(d.strong,{children:"exportJSON"}),"(): ",(0,i.jsx)(d.a,{href:"/docs/api/modules/lexical_code#serializedcodenode",children:(0,i.jsx)(d.code,{children:"SerializedCodeNode"})})]}),"\n",(0,i.jsxs)(d.p,{children:["Controls how the this node is serialized to JSON. This is important for\r\ncopy and paste between Lexical editors sharing the same namespace. It's also important\r\nif you're serializing to JSON for persistent storage somewhere.\r\nSee ",(0,i.jsx)(d.a,{href:"https://lexical.dev/docs/concepts/serialization#lexical---html",children:"Serialization & Deserialization"}),"."]}),"\n",(0,i.jsx)(d.h4,{id:"returns-5",children:"Returns"}),"\n",(0,i.jsx)(d.p,{children:(0,i.jsx)(d.a,{href:"/docs/api/modules/lexical_code#serializedcodenode",children:(0,i.jsx)(d.code,{children:"SerializedCodeNode"})})}),"\n",(0,i.jsx)(d.h4,{id:"overrides-5",children:"Overrides"}),"\n",(0,i.jsxs)(d.p,{children:[(0,i.jsx)(d.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,i.jsx)(d.a,{href:"/docs/api/classes/lexical.ElementNode#exportjson",children:"exportJSON"})]}),"\n",(0,i.jsx)(d.h4,{id:"defined-in-5",children:"Defined in"}),"\n",(0,i.jsx)(d.p,{children:(0,i.jsx)(d.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical-code/src/CodeNode.ts#L227",children:"packages/lexical-code/src/CodeNode.ts:227"})}),"\n",(0,i.jsx)(d.hr,{}),"\n",(0,i.jsx)(d.h3,{id:"getissyntaxhighlightsupported",children:"getIsSyntaxHighlightSupported"}),"\n",(0,i.jsxs)(d.p,{children:["\u25b8 ",(0,i.jsx)(d.strong,{children:"getIsSyntaxHighlightSupported"}),"(): ",(0,i.jsx)(d.code,{children:"boolean"})]}),"\n",(0,i.jsx)(d.h4,{id:"returns-6",children:"Returns"}),"\n",(0,i.jsx)(d.p,{children:(0,i.jsx)(d.code,{children:"boolean"})}),"\n",(0,i.jsx)(d.h4,{id:"defined-in-6",children:"Defined in"}),"\n",(0,i.jsx)(d.p,{children:(0,i.jsx)(d.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical-code/src/CodeNode.ts#L338",children:"packages/lexical-code/src/CodeNode.ts:338"})}),"\n",(0,i.jsx)(d.hr,{}),"\n",(0,i.jsx)(d.h3,{id:"getlanguage",children:"getLanguage"}),"\n",(0,i.jsxs)(d.p,{children:["\u25b8 ",(0,i.jsx)(d.strong,{children:"getLanguage"}),"(): ",(0,i.jsx)(d.code,{children:"undefined"})," | ",(0,i.jsx)(d.code,{children:"null"})," | ",(0,i.jsx)(d.code,{children:"string"})]}),"\n",(0,i.jsx)(d.h4,{id:"returns-7",children:"Returns"}),"\n",(0,i.jsxs)(d.p,{children:[(0,i.jsx)(d.code,{children:"undefined"})," | ",(0,i.jsx)(d.code,{children:"null"})," | ",(0,i.jsx)(d.code,{children:"string"})]}),"\n",(0,i.jsx)(d.h4,{id:"defined-in-7",children:"Defined in"}),"\n",(0,i.jsx)(d.p,{children:(0,i.jsx)(d.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical-code/src/CodeNode.ts#L334",children:"packages/lexical-code/src/CodeNode.ts:334"})}),"\n",(0,i.jsx)(d.hr,{}),"\n",(0,i.jsx)(d.h3,{id:"insertnewafter",children:"insertNewAfter"}),"\n",(0,i.jsxs)(d.p,{children:["\u25b8 ",(0,i.jsx)(d.strong,{children:"insertNewAfter"}),"(",(0,i.jsx)(d.code,{children:"selection"}),", ",(0,i.jsx)(d.code,{children:"restoreSelection?"}),"): ",(0,i.jsx)(d.code,{children:"null"})," | ",(0,i.jsx)(d.a,{href:"/docs/api/classes/lexical.ParagraphNode",children:(0,i.jsx)(d.code,{children:"ParagraphNode"})})," | ",(0,i.jsx)(d.a,{href:"/docs/api/classes/lexical.TabNode",children:(0,i.jsx)(d.code,{children:"TabNode"})})," | ",(0,i.jsx)(d.a,{href:"/docs/api/classes/lexical_code.CodeHighlightNode",children:(0,i.jsx)(d.code,{children:"CodeHighlightNode"})})]}),"\n",(0,i.jsx)(d.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,i.jsxs)(d.table,{children:[(0,i.jsx)(d.thead,{children:(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.th,{style:{textAlign:"left"},children:"Name"}),(0,i.jsx)(d.th,{style:{textAlign:"left"},children:"Type"}),(0,i.jsx)(d.th,{style:{textAlign:"left"},children:"Default value"})]})}),(0,i.jsxs)(d.tbody,{children:[(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{style:{textAlign:"left"},children:(0,i.jsx)(d.code,{children:"selection"})}),(0,i.jsx)(d.td,{style:{textAlign:"left"},children:(0,i.jsx)(d.a,{href:"/docs/api/classes/lexical.RangeSelection",children:(0,i.jsx)(d.code,{children:"RangeSelection"})})}),(0,i.jsx)(d.td,{style:{textAlign:"left"},children:(0,i.jsx)(d.code,{children:"undefined"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{style:{textAlign:"left"},children:(0,i.jsx)(d.code,{children:"restoreSelection"})}),(0,i.jsx)(d.td,{style:{textAlign:"left"},children:(0,i.jsx)(d.code,{children:"boolean"})}),(0,i.jsx)(d.td,{style:{textAlign:"left"},children:(0,i.jsx)(d.code,{children:"true"})})]})]})]}),"\n",(0,i.jsx)(d.h4,{id:"returns-8",children:"Returns"}),"\n",(0,i.jsxs)(d.p,{children:[(0,i.jsx)(d.code,{children:"null"})," | ",(0,i.jsx)(d.a,{href:"/docs/api/classes/lexical.ParagraphNode",children:(0,i.jsx)(d.code,{children:"ParagraphNode"})})," | ",(0,i.jsx)(d.a,{href:"/docs/api/classes/lexical.TabNode",children:(0,i.jsx)(d.code,{children:"TabNode"})})," | ",(0,i.jsx)(d.a,{href:"/docs/api/classes/lexical_code.CodeHighlightNode",children:(0,i.jsx)(d.code,{children:"CodeHighlightNode"})})]}),"\n",(0,i.jsx)(d.h4,{id:"overrides-6",children:"Overrides"}),"\n",(0,i.jsxs)(d.p,{children:[(0,i.jsx)(d.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,i.jsx)(d.a,{href:"/docs/api/classes/lexical.ElementNode#insertnewafter",children:"insertNewAfter"})]}),"\n",(0,i.jsx)(d.h4,{id:"defined-in-8",children:"Defined in"}),"\n",(0,i.jsx)(d.p,{children:(0,i.jsx)(d.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical-code/src/CodeNode.ts#L237",children:"packages/lexical-code/src/CodeNode.ts:237"})}),"\n",(0,i.jsx)(d.hr,{}),"\n",(0,i.jsx)(d.h3,{id:"setlanguage",children:"setLanguage"}),"\n",(0,i.jsxs)(d.p,{children:["\u25b8 ",(0,i.jsx)(d.strong,{children:"setLanguage"}),"(",(0,i.jsx)(d.code,{children:"language"}),"): ",(0,i.jsx)(d.code,{children:"void"})]}),"\n",(0,i.jsx)(d.h4,{id:"parameters-4",children:"Parameters"}),"\n",(0,i.jsxs)(d.table,{children:[(0,i.jsx)(d.thead,{children:(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.th,{style:{textAlign:"left"},children:"Name"}),(0,i.jsx)(d.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,i.jsx)(d.tbody,{children:(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{style:{textAlign:"left"},children:(0,i.jsx)(d.code,{children:"language"})}),(0,i.jsx)(d.td,{style:{textAlign:"left"},children:(0,i.jsx)(d.code,{children:"string"})})]})})]}),"\n",(0,i.jsx)(d.h4,{id:"returns-9",children:"Returns"}),"\n",(0,i.jsx)(d.p,{children:(0,i.jsx)(d.code,{children:"void"})}),"\n",(0,i.jsx)(d.h4,{id:"defined-in-9",children:"Defined in"}),"\n",(0,i.jsx)(d.p,{children:(0,i.jsx)(d.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical-code/src/CodeNode.ts#L327",children:"packages/lexical-code/src/CodeNode.ts:327"})}),"\n",(0,i.jsx)(d.hr,{}),"\n",(0,i.jsx)(d.h3,{id:"updatedom",children:"updateDOM"}),"\n",(0,i.jsxs)(d.p,{children:["\u25b8 ",(0,i.jsx)(d.strong,{children:"updateDOM"}),"(",(0,i.jsx)(d.code,{children:"prevNode"}),", ",(0,i.jsx)(d.code,{children:"dom"}),", ",(0,i.jsx)(d.code,{children:"config"}),"): ",(0,i.jsx)(d.code,{children:"boolean"})]}),"\n",(0,i.jsx)(d.p,{children:"Called when a node changes and should update the DOM\r\nin whatever way is necessary to make it align with any changes that might\r\nhave happened during the update."}),"\n",(0,i.jsx)(d.p,{children:'Returning "true" here will cause lexical to unmount and recreate the DOM node\r\n(by calling createDOM). You would need to do this if the element tag changes,\r\nfor instance.'}),"\n",(0,i.jsx)(d.h4,{id:"parameters-5",children:"Parameters"}),"\n",(0,i.jsxs)(d.table,{children:[(0,i.jsx)(d.thead,{children:(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.th,{style:{textAlign:"left"},children:"Name"}),(0,i.jsx)(d.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,i.jsxs)(d.tbody,{children:[(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{style:{textAlign:"left"},children:(0,i.jsx)(d.code,{children:"prevNode"})}),(0,i.jsx)(d.td,{style:{textAlign:"left"},children:(0,i.jsx)(d.a,{href:"/docs/api/classes/lexical_code.CodeNode",children:(0,i.jsx)(d.code,{children:"CodeNode"})})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{style:{textAlign:"left"},children:(0,i.jsx)(d.code,{children:"dom"})}),(0,i.jsx)(d.td,{style:{textAlign:"left"},children:(0,i.jsx)(d.code,{children:"HTMLElement"})})]}),(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{style:{textAlign:"left"},children:(0,i.jsx)(d.code,{children:"config"})}),(0,i.jsx)(d.td,{style:{textAlign:"left"},children:(0,i.jsx)(d.a,{href:"/docs/api/modules/lexical#editorconfig",children:(0,i.jsx)(d.code,{children:"EditorConfig"})})})]})]})]}),"\n",(0,i.jsx)(d.h4,{id:"returns-10",children:"Returns"}),"\n",(0,i.jsx)(d.p,{children:(0,i.jsx)(d.code,{children:"boolean"})}),"\n",(0,i.jsx)(d.h4,{id:"overrides-7",children:"Overrides"}),"\n",(0,i.jsxs)(d.p,{children:[(0,i.jsx)(d.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,i.jsx)(d.a,{href:"/docs/api/classes/lexical.ElementNode#updatedom",children:"updateDOM"})]}),"\n",(0,i.jsx)(d.h4,{id:"defined-in-10",children:"Defined in"}),"\n",(0,i.jsx)(d.p,{children:(0,i.jsx)(d.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical-code/src/CodeNode.ts#L111",children:"packages/lexical-code/src/CodeNode.ts:111"})}),"\n",(0,i.jsx)(d.hr,{}),"\n",(0,i.jsx)(d.h3,{id:"clone",children:"clone"}),"\n",(0,i.jsxs)(d.p,{children:["\u25b8 ",(0,i.jsx)(d.strong,{children:"clone"}),"(",(0,i.jsx)(d.code,{children:"node"}),"): ",(0,i.jsx)(d.a,{href:"/docs/api/classes/lexical_code.CodeNode",children:(0,i.jsx)(d.code,{children:"CodeNode"})})]}),"\n",(0,i.jsx)(d.p,{children:"Clones this node, creating a new node with a different key\r\nand adding it to the EditorState (but not attaching it anywhere!). All nodes must\r\nimplement this method."}),"\n",(0,i.jsx)(d.h4,{id:"parameters-6",children:"Parameters"}),"\n",(0,i.jsxs)(d.table,{children:[(0,i.jsx)(d.thead,{children:(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.th,{style:{textAlign:"left"},children:"Name"}),(0,i.jsx)(d.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,i.jsx)(d.tbody,{children:(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{style:{textAlign:"left"},children:(0,i.jsx)(d.code,{children:"node"})}),(0,i.jsx)(d.td,{style:{textAlign:"left"},children:(0,i.jsx)(d.a,{href:"/docs/api/classes/lexical_code.CodeNode",children:(0,i.jsx)(d.code,{children:"CodeNode"})})})]})})]}),"\n",(0,i.jsx)(d.h4,{id:"returns-11",children:"Returns"}),"\n",(0,i.jsx)(d.p,{children:(0,i.jsx)(d.a,{href:"/docs/api/classes/lexical_code.CodeNode",children:(0,i.jsx)(d.code,{children:"CodeNode"})})}),"\n",(0,i.jsx)(d.h4,{id:"overrides-8",children:"Overrides"}),"\n",(0,i.jsxs)(d.p,{children:[(0,i.jsx)(d.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,i.jsx)(d.a,{href:"/docs/api/classes/lexical.ElementNode#clone",children:"clone"})]}),"\n",(0,i.jsx)(d.h4,{id:"defined-in-11",children:"Defined in"}),"\n",(0,i.jsx)(d.p,{children:(0,i.jsx)(d.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical-code/src/CodeNode.ts#L86",children:"packages/lexical-code/src/CodeNode.ts:86"})}),"\n",(0,i.jsx)(d.hr,{}),"\n",(0,i.jsx)(d.h3,{id:"gettype",children:"getType"}),"\n",(0,i.jsxs)(d.p,{children:["\u25b8 ",(0,i.jsx)(d.strong,{children:"getType"}),"(): ",(0,i.jsx)(d.code,{children:"string"})]}),"\n",(0,i.jsx)(d.p,{children:"Returns the string type of this node. Every node must\r\nimplement this and it MUST BE UNIQUE amongst nodes registered\r\non the editor."}),"\n",(0,i.jsx)(d.h4,{id:"returns-12",children:"Returns"}),"\n",(0,i.jsx)(d.p,{children:(0,i.jsx)(d.code,{children:"string"})}),"\n",(0,i.jsx)(d.h4,{id:"overrides-9",children:"Overrides"}),"\n",(0,i.jsxs)(d.p,{children:[(0,i.jsx)(d.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,i.jsx)(d.a,{href:"/docs/api/classes/lexical.ElementNode#gettype-1",children:"getType"})]}),"\n",(0,i.jsx)(d.h4,{id:"defined-in-12",children:"Defined in"}),"\n",(0,i.jsx)(d.p,{children:(0,i.jsx)(d.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical-code/src/CodeNode.ts#L82",children:"packages/lexical-code/src/CodeNode.ts:82"})}),"\n",(0,i.jsx)(d.hr,{}),"\n",(0,i.jsx)(d.h3,{id:"importdom",children:"importDOM"}),"\n",(0,i.jsxs)(d.p,{children:["\u25b8 ",(0,i.jsx)(d.strong,{children:"importDOM"}),"(): ",(0,i.jsx)(d.code,{children:"null"})," | ",(0,i.jsx)(d.a,{href:"/docs/api/modules/lexical#domconversionmap",children:(0,i.jsx)(d.code,{children:"DOMConversionMap"})})]}),"\n",(0,i.jsx)(d.h4,{id:"returns-13",children:"Returns"}),"\n",(0,i.jsxs)(d.p,{children:[(0,i.jsx)(d.code,{children:"null"})," | ",(0,i.jsx)(d.a,{href:"/docs/api/modules/lexical#domconversionmap",children:(0,i.jsx)(d.code,{children:"DOMConversionMap"})})]}),"\n",(0,i.jsx)(d.h4,{id:"overrides-10",children:"Overrides"}),"\n",(0,i.jsx)(d.p,{children:"ElementNode.importDOM"}),"\n",(0,i.jsx)(d.h4,{id:"defined-in-13",children:"Defined in"}),"\n",(0,i.jsx)(d.p,{children:(0,i.jsx)(d.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical-code/src/CodeNode.ts#L152",children:"packages/lexical-code/src/CodeNode.ts:152"})}),"\n",(0,i.jsx)(d.hr,{}),"\n",(0,i.jsx)(d.h3,{id:"importjson",children:"importJSON"}),"\n",(0,i.jsxs)(d.p,{children:["\u25b8 ",(0,i.jsx)(d.strong,{children:"importJSON"}),"(",(0,i.jsx)(d.code,{children:"serializedNode"}),"): ",(0,i.jsx)(d.a,{href:"/docs/api/classes/lexical_code.CodeNode",children:(0,i.jsx)(d.code,{children:"CodeNode"})})]}),"\n",(0,i.jsxs)(d.p,{children:["Controls how the this node is deserialized from JSON. This is usually boilerplate,\r\nbut provides an abstraction between the node implementation and serialized interface that can\r\nbe important if you ever make breaking changes to a node schema (by adding or removing properties).\r\nSee ",(0,i.jsx)(d.a,{href:"https://lexical.dev/docs/concepts/serialization#lexical---html",children:"Serialization & Deserialization"}),"."]}),"\n",(0,i.jsx)(d.h4,{id:"parameters-7",children:"Parameters"}),"\n",(0,i.jsxs)(d.table,{children:[(0,i.jsx)(d.thead,{children:(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.th,{style:{textAlign:"left"},children:"Name"}),(0,i.jsx)(d.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,i.jsx)(d.tbody,{children:(0,i.jsxs)(d.tr,{children:[(0,i.jsx)(d.td,{style:{textAlign:"left"},children:(0,i.jsx)(d.code,{children:"serializedNode"})}),(0,i.jsx)(d.td,{style:{textAlign:"left"},children:(0,i.jsx)(d.a,{href:"/docs/api/modules/lexical_code#serializedcodenode",children:(0,i.jsx)(d.code,{children:"SerializedCodeNode"})})})]})})]}),"\n",(0,i.jsx)(d.h4,{id:"returns-14",children:"Returns"}),"\n",(0,i.jsx)(d.p,{children:(0,i.jsx)(d.a,{href:"/docs/api/classes/lexical_code.CodeNode",children:(0,i.jsx)(d.code,{children:"CodeNode"})})}),"\n",(0,i.jsx)(d.h4,{id:"overrides-11",children:"Overrides"}),"\n",(0,i.jsxs)(d.p,{children:[(0,i.jsx)(d.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,i.jsx)(d.a,{href:"/docs/api/classes/lexical.ElementNode#importjson",children:"importJSON"})]}),"\n",(0,i.jsx)(d.h4,{id:"defined-in-14",children:"Defined in"}),"\n",(0,i.jsx)(d.p,{children:(0,i.jsx)(d.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical-code/src/CodeNode.ts#L219",children:"packages/lexical-code/src/CodeNode.ts:219"})})]})}function h(e={}){const{wrapper:d}={...(0,s.R)(),...e.components};return d?(0,i.jsx)(d,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},71184:(e,d,l)=>{l.d(d,{R:()=>r,x:()=>c});var i=l(14041);const s={},n=i.createContext(s);function r(e){const d=i.useContext(n);return i.useMemo((function(){return"function"==typeof e?e(d):{...d,...e}}),[d,e])}function c(e){let d;return d=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(n.Provider,{value:d},e.children)}}}]);