"use strict";(self.webpackChunk_lexical_website=self.webpackChunk_lexical_website||[]).push([[3101],{66055:(e,i,s)=>{s.r(i),s.d(i,{assets:()=>c,contentTitle:()=>r,default:()=>x,frontMatter:()=>d,metadata:()=>t,toc:()=>a});var l=s(31085),n=s(71184);const d={id:"lexical_list.ListNode",title:"Class: ListNode",custom_edit_url:null},r=void 0,t={id:"api/classes/lexical_list.ListNode",title:"Class: ListNode",description:"@lexical/list.ListNode",source:"@site/docs/api/classes/lexical_list.ListNode.md",sourceDirName:"api/classes",slug:"/api/classes/lexical_list.ListNode",permalink:"/docs/api/classes/lexical_list.ListNode",draft:!1,unlisted:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"lexical_list.ListNode",title:"Class: ListNode",custom_edit_url:null},sidebar:"api",previous:{title:"ListItemNode",permalink:"/docs/api/classes/lexical_list.ListItemNode"},next:{title:"MarkNode",permalink:"/docs/api/classes/lexical_mark.MarkNode"}},c={},a=[{value:"Hierarchy",id:"hierarchy",level:2},{value:"Constructors",id:"constructors",level:2},{value:"constructor",id:"constructor",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Overrides",id:"overrides",level:4},{value:"Defined in",id:"defined-in",level:4},{value:"Methods",id:"methods",level:2},{value:"append",id:"append",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Overrides",id:"overrides-1",level:4},{value:"Defined in",id:"defined-in-1",level:4},{value:"canBeEmpty",id:"canbeempty",level:3},{value:"Returns",id:"returns-2",level:4},{value:"Overrides",id:"overrides-2",level:4},{value:"Defined in",id:"defined-in-2",level:4},{value:"canIndent",id:"canindent",level:3},{value:"Returns",id:"returns-3",level:4},{value:"Overrides",id:"overrides-3",level:4},{value:"Defined in",id:"defined-in-3",level:4},{value:"createDOM",id:"createdom",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-4",level:4},{value:"Overrides",id:"overrides-4",level:4},{value:"Defined in",id:"defined-in-4",level:4},{value:"exportDOM",id:"exportdom",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Overrides",id:"overrides-5",level:4},{value:"Defined in",id:"defined-in-5",level:4},{value:"exportJSON",id:"exportjson",level:3},{value:"Returns",id:"returns-6",level:4},{value:"Overrides",id:"overrides-6",level:4},{value:"Defined in",id:"defined-in-6",level:4},{value:"extractWithChild",id:"extractwithchild",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-7",level:4},{value:"Overrides",id:"overrides-7",level:4},{value:"Defined in",id:"defined-in-7",level:4},{value:"getListType",id:"getlisttype",level:3},{value:"Returns",id:"returns-8",level:4},{value:"Defined in",id:"defined-in-8",level:4},{value:"getStart",id:"getstart",level:3},{value:"Returns",id:"returns-9",level:4},{value:"Defined in",id:"defined-in-9",level:4},{value:"getTag",id:"gettag",level:3},{value:"Returns",id:"returns-10",level:4},{value:"Defined in",id:"defined-in-10",level:4},{value:"setListType",id:"setlisttype",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-11",level:4},{value:"Defined in",id:"defined-in-11",level:4},{value:"updateDOM",id:"updatedom",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-12",level:4},{value:"Overrides",id:"overrides-8",level:4},{value:"Defined in",id:"defined-in-12",level:4},{value:"clone",id:"clone",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"Returns",id:"returns-13",level:4},{value:"Overrides",id:"overrides-9",level:4},{value:"Defined in",id:"defined-in-13",level:4},{value:"getType",id:"gettype",level:3},{value:"Returns",id:"returns-14",level:4},{value:"Overrides",id:"overrides-10",level:4},{value:"Defined in",id:"defined-in-14",level:4},{value:"importDOM",id:"importdom",level:3},{value:"Returns",id:"returns-15",level:4},{value:"Overrides",id:"overrides-11",level:4},{value:"Defined in",id:"defined-in-15",level:4},{value:"importJSON",id:"importjson",level:3},{value:"Parameters",id:"parameters-8",level:4},{value:"Returns",id:"returns-16",level:4},{value:"Overrides",id:"overrides-12",level:4},{value:"Defined in",id:"defined-in-16",level:4},{value:"transform",id:"transform",level:3},{value:"Returns",id:"returns-17",level:4},{value:"Parameters",id:"parameters-9",level:5},{value:"Returns",id:"returns-18",level:5},{value:"Overrides",id:"overrides-13",level:4},{value:"Defined in",id:"defined-in-17",level:4}];function h(e){const i={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",h5:"h5",hr:"hr",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,n.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.a,{href:"/docs/api/modules/lexical_list",children:"@lexical/list"}),".ListNode"]}),"\n",(0,l.jsx)(i.h2,{id:"hierarchy",children:"Hierarchy"}),"\n",(0,l.jsxs)(i.ul,{children:["\n",(0,l.jsxs)(i.li,{children:["\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode",children:(0,l.jsx)(i.code,{children:"ElementNode"})})}),"\n",(0,l.jsxs)(i.p,{children:["\u21b3 ",(0,l.jsx)(i.strong,{children:(0,l.jsx)(i.code,{children:"ListNode"})})]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(i.h2,{id:"constructors",children:"Constructors"}),"\n",(0,l.jsx)(i.h3,{id:"constructor",children:"constructor"}),"\n",(0,l.jsxs)(i.p,{children:["\u2022 ",(0,l.jsx)(i.strong,{children:"new ListNode"}),"(",(0,l.jsx)(i.code,{children:"listType"}),", ",(0,l.jsx)(i.code,{children:"start"}),", ",(0,l.jsx)(i.code,{children:"key?"}),"): ",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical_list.ListNode",children:(0,l.jsx)(i.code,{children:"ListNode"})})]}),"\n",(0,l.jsx)(i.h4,{id:"parameters",children:"Parameters"}),"\n",(0,l.jsxs)(i.table,{children:[(0,l.jsx)(i.thead,{children:(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,l.jsxs)(i.tbody,{children:[(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.code,{children:"listType"})}),(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.a,{href:"/docs/api/modules/lexical_list#listtype",children:(0,l.jsx)(i.code,{children:"ListType"})})})]}),(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.code,{children:"start"})}),(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.code,{children:"number"})})]}),(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.code,{children:"key?"})}),(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.code,{children:"string"})})]})]})]}),"\n",(0,l.jsx)(i.h4,{id:"returns",children:"Returns"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical_list.ListNode",children:(0,l.jsx)(i.code,{children:"ListNode"})})}),"\n",(0,l.jsx)(i.h4,{id:"overrides",children:"Overrides"}),"\n",(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode#constructor",children:"constructor"})]}),"\n",(0,l.jsx)(i.h4,{id:"defined-in",children:"Defined in"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical-list/src/LexicalListNode.ts#L72",children:"packages/lexical-list/src/LexicalListNode.ts:72"})}),"\n",(0,l.jsx)(i.h2,{id:"methods",children:"Methods"}),"\n",(0,l.jsx)(i.h3,{id:"append",children:"append"}),"\n",(0,l.jsxs)(i.p,{children:["\u25b8 ",(0,l.jsx)(i.strong,{children:"append"}),"(",(0,l.jsx)(i.code,{children:"...nodesToAppend"}),"): ",(0,l.jsx)(i.code,{children:"this"})]}),"\n",(0,l.jsx)(i.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,l.jsxs)(i.table,{children:[(0,l.jsx)(i.thead,{children:(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,l.jsx)(i.tbody,{children:(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.code,{children:"...nodesToAppend"})}),(0,l.jsxs)(i.td,{style:{textAlign:"left"},children:[(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,l.jsx)(i.code,{children:"LexicalNode"})}),"[]"]})]})})]}),"\n",(0,l.jsx)(i.h4,{id:"returns-1",children:"Returns"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.code,{children:"this"})}),"\n",(0,l.jsx)(i.h4,{id:"overrides-1",children:"Overrides"}),"\n",(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode#append",children:"append"})]}),"\n",(0,l.jsx)(i.h4,{id:"defined-in-1",children:"Defined in"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical-list/src/LexicalListNode.ts#L191",children:"packages/lexical-list/src/LexicalListNode.ts:191"})}),"\n",(0,l.jsx)(i.hr,{}),"\n",(0,l.jsx)(i.h3,{id:"canbeempty",children:"canBeEmpty"}),"\n",(0,l.jsxs)(i.p,{children:["\u25b8 ",(0,l.jsx)(i.strong,{children:"canBeEmpty"}),"(): ",(0,l.jsx)(i.code,{children:"false"})]}),"\n",(0,l.jsx)(i.h4,{id:"returns-2",children:"Returns"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.code,{children:"false"})}),"\n",(0,l.jsx)(i.h4,{id:"overrides-2",children:"Overrides"}),"\n",(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode#canbeempty",children:"canBeEmpty"})]}),"\n",(0,l.jsx)(i.h4,{id:"defined-in-2",children:"Defined in"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical-list/src/LexicalListNode.ts#L183",children:"packages/lexical-list/src/LexicalListNode.ts:183"})}),"\n",(0,l.jsx)(i.hr,{}),"\n",(0,l.jsx)(i.h3,{id:"canindent",children:"canIndent"}),"\n",(0,l.jsxs)(i.p,{children:["\u25b8 ",(0,l.jsx)(i.strong,{children:"canIndent"}),"(): ",(0,l.jsx)(i.code,{children:"false"})]}),"\n",(0,l.jsx)(i.h4,{id:"returns-3",children:"Returns"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.code,{children:"false"})}),"\n",(0,l.jsx)(i.h4,{id:"overrides-3",children:"Overrides"}),"\n",(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode#canindent",children:"canIndent"})]}),"\n",(0,l.jsx)(i.h4,{id:"defined-in-3",children:"Defined in"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical-list/src/LexicalListNode.ts#L187",children:"packages/lexical-list/src/LexicalListNode.ts:187"})}),"\n",(0,l.jsx)(i.hr,{}),"\n",(0,l.jsx)(i.h3,{id:"createdom",children:"createDOM"}),"\n",(0,l.jsxs)(i.p,{children:["\u25b8 ",(0,l.jsx)(i.strong,{children:"createDOM"}),"(",(0,l.jsx)(i.code,{children:"config"}),", ",(0,l.jsx)(i.code,{children:"_editor?"}),"): ",(0,l.jsx)(i.code,{children:"HTMLElement"})]}),"\n",(0,l.jsx)(i.p,{children:"Called during the reconciliation process to determine which nodes\r\nto insert into the DOM for this Lexical Node."}),"\n",(0,l.jsx)(i.p,{children:"This method must return exactly one HTMLElement. Nested elements are not supported."}),"\n",(0,l.jsx)(i.p,{children:"Do not attempt to update the Lexical EditorState during this phase of the update lifecyle."}),"\n",(0,l.jsx)(i.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,l.jsxs)(i.table,{children:[(0,l.jsx)(i.thead,{children:(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(i.th,{style:{textAlign:"left"},children:"Type"}),(0,l.jsx)(i.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,l.jsxs)(i.tbody,{children:[(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.code,{children:"config"})}),(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.a,{href:"/docs/api/modules/lexical#editorconfig",children:(0,l.jsx)(i.code,{children:"EditorConfig"})})}),(0,l.jsx)(i.td,{style:{textAlign:"left"},children:"allows access to things like the EditorTheme (to apply classes) during reconciliation."})]}),(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.code,{children:"_editor?"})}),(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalEditor",children:(0,l.jsx)(i.code,{children:"LexicalEditor"})})}),(0,l.jsx)(i.td,{style:{textAlign:"left"},children:"allows access to the editor for context during reconciliation."})]})]})]}),"\n",(0,l.jsx)(i.h4,{id:"returns-4",children:"Returns"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.code,{children:"HTMLElement"})}),"\n",(0,l.jsx)(i.h4,{id:"overrides-4",children:"Overrides"}),"\n",(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode#createdom",children:"createDOM"})]}),"\n",(0,l.jsx)(i.h4,{id:"defined-in-4",children:"Defined in"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical-list/src/LexicalListNode.ts#L100",children:"packages/lexical-list/src/LexicalListNode.ts:100"})}),"\n",(0,l.jsx)(i.hr,{}),"\n",(0,l.jsx)(i.h3,{id:"exportdom",children:"exportDOM"}),"\n",(0,l.jsxs)(i.p,{children:["\u25b8 ",(0,l.jsx)(i.strong,{children:"exportDOM"}),"(",(0,l.jsx)(i.code,{children:"editor"}),"): ",(0,l.jsx)(i.a,{href:"/docs/api/modules/lexical#domexportoutput",children:(0,l.jsx)(i.code,{children:"DOMExportOutput"})})]}),"\n",(0,l.jsxs)(i.p,{children:["Controls how the this node is serialized to HTML. This is important for\r\ncopy and paste between Lexical and non-Lexical editors, or Lexical editors with different namespaces,\r\nin which case the primary transfer format is HTML. It's also important if you're serializing\r\nto HTML for any other reason via ",(0,l.jsx)(i.a,{href:"/docs/api/modules/lexical_html#generatehtmlfromnodes",children:"$generateHtmlFromNodes"}),". You could\r\nalso use this method to build your own HTML renderer."]}),"\n",(0,l.jsx)(i.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,l.jsxs)(i.table,{children:[(0,l.jsx)(i.thead,{children:(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,l.jsx)(i.tbody,{children:(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.code,{children:"editor"})}),(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalEditor",children:(0,l.jsx)(i.code,{children:"LexicalEditor"})})})]})})]}),"\n",(0,l.jsx)(i.h4,{id:"returns-5",children:"Returns"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"/docs/api/modules/lexical#domexportoutput",children:(0,l.jsx)(i.code,{children:"DOMExportOutput"})})}),"\n",(0,l.jsx)(i.h4,{id:"overrides-5",children:"Overrides"}),"\n",(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode#exportdom",children:"exportDOM"})]}),"\n",(0,l.jsx)(i.h4,{id:"defined-in-5",children:"Defined in"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical-list/src/LexicalListNode.ts#L157",children:"packages/lexical-list/src/LexicalListNode.ts:157"})}),"\n",(0,l.jsx)(i.hr,{}),"\n",(0,l.jsx)(i.h3,{id:"exportjson",children:"exportJSON"}),"\n",(0,l.jsxs)(i.p,{children:["\u25b8 ",(0,l.jsx)(i.strong,{children:"exportJSON"}),"(): ",(0,l.jsx)(i.a,{href:"/docs/api/modules/lexical_list#serializedlistnode",children:(0,l.jsx)(i.code,{children:"SerializedListNode"})})]}),"\n",(0,l.jsxs)(i.p,{children:["Controls how the this node is serialized to JSON. This is important for\r\ncopy and paste between Lexical editors sharing the same namespace. It's also important\r\nif you're serializing to JSON for persistent storage somewhere.\r\nSee ",(0,l.jsx)(i.a,{href:"https://lexical.dev/docs/concepts/serialization#lexical---html",children:"Serialization & Deserialization"}),"."]}),"\n",(0,l.jsx)(i.h4,{id:"returns-6",children:"Returns"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"/docs/api/modules/lexical_list#serializedlistnode",children:(0,l.jsx)(i.code,{children:"SerializedListNode"})})}),"\n",(0,l.jsx)(i.h4,{id:"overrides-6",children:"Overrides"}),"\n",(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode#exportjson",children:"exportJSON"})]}),"\n",(0,l.jsx)(i.h4,{id:"defined-in-6",children:"Defined in"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical-list/src/LexicalListNode.ts#L172",children:"packages/lexical-list/src/LexicalListNode.ts:172"})}),"\n",(0,l.jsx)(i.hr,{}),"\n",(0,l.jsx)(i.h3,{id:"extractwithchild",children:"extractWithChild"}),"\n",(0,l.jsxs)(i.p,{children:["\u25b8 ",(0,l.jsx)(i.strong,{children:"extractWithChild"}),"(",(0,l.jsx)(i.code,{children:"child"}),"): ",(0,l.jsx)(i.code,{children:"boolean"})]}),"\n",(0,l.jsx)(i.h4,{id:"parameters-4",children:"Parameters"}),"\n",(0,l.jsxs)(i.table,{children:[(0,l.jsx)(i.thead,{children:(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,l.jsx)(i.tbody,{children:(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.code,{children:"child"})}),(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,l.jsx)(i.code,{children:"LexicalNode"})})})]})})]}),"\n",(0,l.jsx)(i.h4,{id:"returns-7",children:"Returns"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.code,{children:"boolean"})}),"\n",(0,l.jsx)(i.h4,{id:"overrides-7",children:"Overrides"}),"\n",(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode#extractwithchild",children:"extractWithChild"})]}),"\n",(0,l.jsx)(i.h4,{id:"defined-in-7",children:"Defined in"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical-list/src/LexicalListNode.ts#L214",children:"packages/lexical-list/src/LexicalListNode.ts:214"})}),"\n",(0,l.jsx)(i.hr,{}),"\n",(0,l.jsx)(i.h3,{id:"getlisttype",children:"getListType"}),"\n",(0,l.jsxs)(i.p,{children:["\u25b8 ",(0,l.jsx)(i.strong,{children:"getListType"}),"(): ",(0,l.jsx)(i.a,{href:"/docs/api/modules/lexical_list#listtype",children:(0,l.jsx)(i.code,{children:"ListType"})})]}),"\n",(0,l.jsx)(i.h4,{id:"returns-8",children:"Returns"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"/docs/api/modules/lexical_list#listtype",children:(0,l.jsx)(i.code,{children:"ListType"})})}),"\n",(0,l.jsx)(i.h4,{id:"defined-in-8",children:"Defined in"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical-list/src/LexicalListNode.ts#L90",children:"packages/lexical-list/src/LexicalListNode.ts:90"})}),"\n",(0,l.jsx)(i.hr,{}),"\n",(0,l.jsx)(i.h3,{id:"getstart",children:"getStart"}),"\n",(0,l.jsxs)(i.p,{children:["\u25b8 ",(0,l.jsx)(i.strong,{children:"getStart"}),"(): ",(0,l.jsx)(i.code,{children:"number"})]}),"\n",(0,l.jsx)(i.h4,{id:"returns-9",children:"Returns"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.code,{children:"number"})}),"\n",(0,l.jsx)(i.h4,{id:"defined-in-9",children:"Defined in"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical-list/src/LexicalListNode.ts#L94",children:"packages/lexical-list/src/LexicalListNode.ts:94"})}),"\n",(0,l.jsx)(i.hr,{}),"\n",(0,l.jsx)(i.h3,{id:"gettag",children:"getTag"}),"\n",(0,l.jsxs)(i.p,{children:["\u25b8 ",(0,l.jsx)(i.strong,{children:"getTag"}),"(): ",(0,l.jsx)(i.code,{children:"ListNodeTagType"})]}),"\n",(0,l.jsx)(i.h4,{id:"returns-10",children:"Returns"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.code,{children:"ListNodeTagType"})}),"\n",(0,l.jsx)(i.h4,{id:"defined-in-10",children:"Defined in"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical-list/src/LexicalListNode.ts#L80",children:"packages/lexical-list/src/LexicalListNode.ts:80"})}),"\n",(0,l.jsx)(i.hr,{}),"\n",(0,l.jsx)(i.h3,{id:"setlisttype",children:"setListType"}),"\n",(0,l.jsxs)(i.p,{children:["\u25b8 ",(0,l.jsx)(i.strong,{children:"setListType"}),"(",(0,l.jsx)(i.code,{children:"type"}),"): ",(0,l.jsx)(i.code,{children:"void"})]}),"\n",(0,l.jsx)(i.h4,{id:"parameters-5",children:"Parameters"}),"\n",(0,l.jsxs)(i.table,{children:[(0,l.jsx)(i.thead,{children:(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,l.jsx)(i.tbody,{children:(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.code,{children:"type"})}),(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.a,{href:"/docs/api/modules/lexical_list#listtype",children:(0,l.jsx)(i.code,{children:"ListType"})})})]})})]}),"\n",(0,l.jsx)(i.h4,{id:"returns-11",children:"Returns"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.code,{children:"void"})}),"\n",(0,l.jsx)(i.h4,{id:"defined-in-11",children:"Defined in"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical-list/src/LexicalListNode.ts#L84",children:"packages/lexical-list/src/LexicalListNode.ts:84"})}),"\n",(0,l.jsx)(i.hr,{}),"\n",(0,l.jsx)(i.h3,{id:"updatedom",children:"updateDOM"}),"\n",(0,l.jsxs)(i.p,{children:["\u25b8 ",(0,l.jsx)(i.strong,{children:"updateDOM"}),"(",(0,l.jsx)(i.code,{children:"prevNode"}),", ",(0,l.jsx)(i.code,{children:"dom"}),", ",(0,l.jsx)(i.code,{children:"config"}),"): ",(0,l.jsx)(i.code,{children:"boolean"})]}),"\n",(0,l.jsx)(i.p,{children:"Called when a node changes and should update the DOM\r\nin whatever way is necessary to make it align with any changes that might\r\nhave happened during the update."}),"\n",(0,l.jsx)(i.p,{children:'Returning "true" here will cause lexical to unmount and recreate the DOM node\r\n(by calling createDOM). You would need to do this if the element tag changes,\r\nfor instance.'}),"\n",(0,l.jsx)(i.h4,{id:"parameters-6",children:"Parameters"}),"\n",(0,l.jsxs)(i.table,{children:[(0,l.jsx)(i.thead,{children:(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,l.jsxs)(i.tbody,{children:[(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.code,{children:"prevNode"})}),(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical_list.ListNode",children:(0,l.jsx)(i.code,{children:"ListNode"})})})]}),(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.code,{children:"dom"})}),(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.code,{children:"HTMLElement"})})]}),(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.code,{children:"config"})}),(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.a,{href:"/docs/api/modules/lexical#editorconfig",children:(0,l.jsx)(i.code,{children:"EditorConfig"})})})]})]})]}),"\n",(0,l.jsx)(i.h4,{id:"returns-12",children:"Returns"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.code,{children:"boolean"})}),"\n",(0,l.jsx)(i.h4,{id:"overrides-8",children:"Overrides"}),"\n",(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode#updatedom",children:"updateDOM"})]}),"\n",(0,l.jsx)(i.h4,{id:"defined-in-12",children:"Defined in"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical-list/src/LexicalListNode.ts#L114",children:"packages/lexical-list/src/LexicalListNode.ts:114"})}),"\n",(0,l.jsx)(i.hr,{}),"\n",(0,l.jsx)(i.h3,{id:"clone",children:"clone"}),"\n",(0,l.jsxs)(i.p,{children:["\u25b8 ",(0,l.jsx)(i.strong,{children:"clone"}),"(",(0,l.jsx)(i.code,{children:"node"}),"): ",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical_list.ListNode",children:(0,l.jsx)(i.code,{children:"ListNode"})})]}),"\n",(0,l.jsx)(i.p,{children:"Clones this node, creating a new node with a different key\r\nand adding it to the EditorState (but not attaching it anywhere!). All nodes must\r\nimplement this method."}),"\n",(0,l.jsx)(i.h4,{id:"parameters-7",children:"Parameters"}),"\n",(0,l.jsxs)(i.table,{children:[(0,l.jsx)(i.thead,{children:(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,l.jsx)(i.tbody,{children:(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.code,{children:"node"})}),(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical_list.ListNode",children:(0,l.jsx)(i.code,{children:"ListNode"})})})]})})]}),"\n",(0,l.jsx)(i.h4,{id:"returns-13",children:"Returns"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical_list.ListNode",children:(0,l.jsx)(i.code,{children:"ListNode"})})}),"\n",(0,l.jsx)(i.h4,{id:"overrides-9",children:"Overrides"}),"\n",(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode#clone",children:"clone"})]}),"\n",(0,l.jsx)(i.h4,{id:"defined-in-13",children:"Defined in"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical-list/src/LexicalListNode.ts#L66",children:"packages/lexical-list/src/LexicalListNode.ts:66"})}),"\n",(0,l.jsx)(i.hr,{}),"\n",(0,l.jsx)(i.h3,{id:"gettype",children:"getType"}),"\n",(0,l.jsxs)(i.p,{children:["\u25b8 ",(0,l.jsx)(i.strong,{children:"getType"}),"(): ",(0,l.jsx)(i.code,{children:"string"})]}),"\n",(0,l.jsx)(i.p,{children:"Returns the string type of this node. Every node must\r\nimplement this and it MUST BE UNIQUE amongst nodes registered\r\non the editor."}),"\n",(0,l.jsx)(i.h4,{id:"returns-14",children:"Returns"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.code,{children:"string"})}),"\n",(0,l.jsx)(i.h4,{id:"overrides-10",children:"Overrides"}),"\n",(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode#gettype-1",children:"getType"})]}),"\n",(0,l.jsx)(i.h4,{id:"defined-in-14",children:"Defined in"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical-list/src/LexicalListNode.ts#L62",children:"packages/lexical-list/src/LexicalListNode.ts:62"})}),"\n",(0,l.jsx)(i.hr,{}),"\n",(0,l.jsx)(i.h3,{id:"importdom",children:"importDOM"}),"\n",(0,l.jsxs)(i.p,{children:["\u25b8 ",(0,l.jsx)(i.strong,{children:"importDOM"}),"(): ",(0,l.jsx)(i.code,{children:"null"})," | ",(0,l.jsx)(i.a,{href:"/docs/api/modules/lexical#domconversionmap",children:(0,l.jsx)(i.code,{children:"DOMConversionMap"})})]}),"\n",(0,l.jsx)(i.h4,{id:"returns-15",children:"Returns"}),"\n",(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.code,{children:"null"})," | ",(0,l.jsx)(i.a,{href:"/docs/api/modules/lexical#domconversionmap",children:(0,l.jsx)(i.code,{children:"DOMConversionMap"})})]}),"\n",(0,l.jsx)(i.h4,{id:"overrides-11",children:"Overrides"}),"\n",(0,l.jsx)(i.p,{children:"ElementNode.importDOM"}),"\n",(0,l.jsx)(i.h4,{id:"defined-in-15",children:"Defined in"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical-list/src/LexicalListNode.ts#L136",children:"packages/lexical-list/src/LexicalListNode.ts:136"})}),"\n",(0,l.jsx)(i.hr,{}),"\n",(0,l.jsx)(i.h3,{id:"importjson",children:"importJSON"}),"\n",(0,l.jsxs)(i.p,{children:["\u25b8 ",(0,l.jsx)(i.strong,{children:"importJSON"}),"(",(0,l.jsx)(i.code,{children:"serializedNode"}),"): ",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical_list.ListNode",children:(0,l.jsx)(i.code,{children:"ListNode"})})]}),"\n",(0,l.jsxs)(i.p,{children:["Controls how the this node is deserialized from JSON. This is usually boilerplate,\r\nbut provides an abstraction between the node implementation and serialized interface that can\r\nbe important if you ever make breaking changes to a node schema (by adding or removing properties).\r\nSee ",(0,l.jsx)(i.a,{href:"https://lexical.dev/docs/concepts/serialization#lexical---html",children:"Serialization & Deserialization"}),"."]}),"\n",(0,l.jsx)(i.h4,{id:"parameters-8",children:"Parameters"}),"\n",(0,l.jsxs)(i.table,{children:[(0,l.jsx)(i.thead,{children:(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,l.jsx)(i.tbody,{children:(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.code,{children:"serializedNode"})}),(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.a,{href:"/docs/api/modules/lexical_list#serializedlistnode",children:(0,l.jsx)(i.code,{children:"SerializedListNode"})})})]})})]}),"\n",(0,l.jsx)(i.h4,{id:"returns-16",children:"Returns"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical_list.ListNode",children:(0,l.jsx)(i.code,{children:"ListNode"})})}),"\n",(0,l.jsx)(i.h4,{id:"overrides-12",children:"Overrides"}),"\n",(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode#importjson",children:"importJSON"})]}),"\n",(0,l.jsx)(i.h4,{id:"defined-in-16",children:"Defined in"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical-list/src/LexicalListNode.ts#L149",children:"packages/lexical-list/src/LexicalListNode.ts:149"})}),"\n",(0,l.jsx)(i.hr,{}),"\n",(0,l.jsx)(i.h3,{id:"transform",children:"transform"}),"\n",(0,l.jsxs)(i.p,{children:["\u25b8 ",(0,l.jsx)(i.strong,{children:"transform"}),"(): (",(0,l.jsx)(i.code,{children:"node"}),": ",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,l.jsx)(i.code,{children:"LexicalNode"})}),") => ",(0,l.jsx)(i.code,{children:"void"})]}),"\n",(0,l.jsxs)(i.p,{children:["Registers the returned function as a transform on the node during\r\nEditor initialization. Most such use cases should be addressed via\r\nthe ",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalEditor#registernodetransform",children:"LexicalEditor.registerNodeTransform"})," API."]}),"\n",(0,l.jsx)(i.p,{children:"Experimental - use at your own risk."}),"\n",(0,l.jsx)(i.h4,{id:"returns-17",children:"Returns"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.code,{children:"fn"})}),"\n",(0,l.jsxs)(i.p,{children:["\u25b8 (",(0,l.jsx)(i.code,{children:"node"}),"): ",(0,l.jsx)(i.code,{children:"void"})]}),"\n",(0,l.jsx)(i.h5,{id:"parameters-9",children:"Parameters"}),"\n",(0,l.jsxs)(i.table,{children:[(0,l.jsx)(i.thead,{children:(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,l.jsx)(i.tbody,{children:(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.code,{children:"node"})}),(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,l.jsx)(i.code,{children:"LexicalNode"})})})]})})]}),"\n",(0,l.jsx)(i.h5,{id:"returns-18",children:"Returns"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.code,{children:"void"})}),"\n",(0,l.jsx)(i.h4,{id:"overrides-13",children:"Overrides"}),"\n",(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode#transform",children:"transform"})]}),"\n",(0,l.jsx)(i.h4,{id:"defined-in-17",children:"Defined in"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical-list/src/LexicalListNode.ts#L128",children:"packages/lexical-list/src/LexicalListNode.ts:128"})})]})}function x(e={}){const{wrapper:i}={...(0,n.R)(),...e.components};return i?(0,l.jsx)(i,{...e,children:(0,l.jsx)(h,{...e})}):h(e)}},71184:(e,i,s)=>{s.d(i,{R:()=>r,x:()=>t});var l=s(14041);const n={},d=l.createContext(n);function r(e){const i=l.useContext(d);return l.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function t(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),l.createElement(d.Provider,{value:i},e.children)}}}]);