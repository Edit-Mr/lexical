"use strict";(self.webpackChunk_lexical_website=self.webpackChunk_lexical_website||[]).push([[6119],{37207:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>s,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var i=t(31085),n=t(71184);const r={sidebar_position:1},a="React",l={id:"collaboration/react",title:"React",description:"Lexical provides LexicalCollaborationPlugin and useCollaborationContext hook within @lexical/react to accelerate creation of the collaborative React backed editors.",source:"@site/docs/collaboration/react.md",sourceDirName:"collaboration",slug:"/collaboration/react",permalink:"/docs/collaboration/react",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/lexical/tree/main/packages/lexical-website/docs/collaboration/react.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docs",previous:{title:"React FAQ",permalink:"/docs/react/faq"},next:{title:"Collaboration FAQ",permalink:"/docs/collaboration/faq"}},s={},c=[{value:"Getting started",id:"getting-started",level:2},{value:"See it in action",id:"see-it-in-action",level:2},{value:"Building collaborative plugins",id:"building-collaborative-plugins",level:2},{value:"Yjs providers",id:"yjs-providers",level:2}];function d(e){const o={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,n.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(o.header,{children:(0,i.jsx)(o.h1,{id:"react",children:"React"})}),"\n",(0,i.jsxs)(o.p,{children:["Lexical provides ",(0,i.jsx)(o.code,{children:"LexicalCollaborationPlugin"})," and ",(0,i.jsx)(o.code,{children:"useCollaborationContext"})," hook within ",(0,i.jsx)(o.code,{children:"@lexical/react"})," to accelerate creation of the collaborative React backed editors.\r\nThis is on top of the Yjs bindings provided by ",(0,i.jsx)(o.code,{children:"@lexical/yjs"}),"."]}),"\n",(0,i.jsx)(o.admonition,{type:"tip",children:(0,i.jsxs)(o.p,{children:["Clone ",(0,i.jsx)(o.a,{href:"https://github.com/facebook/lexical",children:"Lexical GitHub repo"}),", run ",(0,i.jsx)(o.code,{children:"npm i && npm run start"})," and open ",(0,i.jsx)(o.a,{href:"http://localhost:3000/split/?isCollab=true",children:(0,i.jsx)(o.code,{children:"http://localhost:3000/split/?isCollab=true"})})," to launch playground in collaborative mode."]})}),"\n",(0,i.jsx)(o.h2,{id:"getting-started",children:"Getting started"}),"\n",(0,i.jsxs)(o.p,{children:["This guide is based on ",(0,i.jsx)(o.a,{href:"https://github.com/facebook/lexical/tree/main/examples/react-rich",children:"examples/react-rich"})," example."]}),"\n",(0,i.jsx)(o.p,{children:(0,i.jsx)(o.strong,{children:"Install minimal set of the required dependencies:"})}),"\n",(0,i.jsx)(o.pre,{children:(0,i.jsx)(o.code,{className:"language-bash",children:"$ npm i -S @lexical/react @lexical/yjs lexical react react-dom y-websocket yjs\n"})}),"\n",(0,i.jsx)(o.admonition,{type:"note",children:(0,i.jsxs)(o.p,{children:[(0,i.jsx)(o.code,{children:"y-websocket"})," is the only officially supported Yjs connection provider at this point. Although other providers may work just fine."]})}),"\n",(0,i.jsx)(o.p,{children:(0,i.jsx)(o.strong,{children:"Get WebSocket server running:"})}),"\n",(0,i.jsxs)(o.p,{children:["This allows different browser windows and different browsers to find each other and sync Lexical state. On top of this ",(0,i.jsx)(o.code,{children:"YPERSISTENCE"})," allows you to save Yjs documents in between server restarts so clients can simply reconnect and keep editing."]}),"\n",(0,i.jsx)(o.pre,{children:(0,i.jsx)(o.code,{className:"language-bash",children:"$ HOST=localhost PORT=1234 YPERSISTENCE=./yjs-wss-db npx y-websocket\n"})}),"\n",(0,i.jsx)(o.p,{children:(0,i.jsx)(o.strong,{children:"Get basic collaborative Lexical setup:"})}),"\n",(0,i.jsx)(o.pre,{children:(0,i.jsx)(o.code,{className:"language-tsx",children:"import {$getRoot, $createParagraphNode, $createTextNode} from 'lexical';\r\nimport {LexicalComposer} from '@lexical/react/LexicalComposer';\r\nimport {ContentEditable} from '@lexical/react/LexicalContentEditable';\r\nimport {LexicalErrorBoundary} from '@lexical/react/LexicalErrorBoundary';\r\nimport {RichTextPlugin} from '@lexical/react/LexicalRichTextPlugin';\r\nimport {CollaborationPlugin} from '@lexical/react/LexicalCollaborationPlugin';\r\nimport * as Y from 'yjs';\r\nimport {$initialEditorState} from './initialEditorState';\r\nimport {WebsocketProvider} from 'y-websocket';\r\n\r\nfunction Editor() {\r\n  const initialConfig = {\r\n    // NOTE: This is critical for collaboration plugin to set editor state to null. It\r\n    // would indicate that the editor should not try to set any default state\r\n    // (not even empty one), and let collaboration plugin do it instead\r\n    editorState: null,\r\n    namespace: 'Demo',\r\n    nodes: [],\r\n    onError: (error: Error) => {\r\n      throw error;\r\n    },\r\n    theme: {},\r\n  };\r\n\r\n  const providerFactory = useCallback(\r\n    (id: string, yjsDocMap: Map<string, Y.Doc>) => {\r\n      const doc = getDocFromMap(id, yjsDocMap);\r\n\r\n      return new WebsocketProvider('ws://localhost:1234', id, doc, {\r\n        connect: false,\r\n      });\r\n    }, [],\r\n  );\r\n\r\n  return (\r\n    <LexicalComposer initialConfig={initialConfig}>\r\n      <RichTextPlugin\r\n        contentEditable={<ContentEditable className=\"editor-input\" />}\r\n        placeholder={<div className=\"editor-placeholder\">Enter some rich text...</div>}\r\n        ErrorBoundary={LexicalErrorBoundary}\r\n      />\r\n      <CollaborationPlugin\r\n        id=\"lexical/react-rich-collab\"\r\n        providerFactory={providerFactory}\r\n        // Optional initial editor state in case collaborative Y.Doc won't\r\n        // have any existing data on server. Then it'll user this value to populate editor.\r\n        // It accepts same type of values as LexicalComposer editorState\r\n        // prop (json string, state object, or a function)\r\n        initialEditorState={$initialEditorState}\r\n        shouldBootstrap={true}\r\n      />\r\n    </LexicalComposer>\r\n  );\r\n}\n"})}),"\n",(0,i.jsx)(o.h2,{id:"see-it-in-action",children:"See it in action"}),"\n",(0,i.jsxs)(o.p,{children:["Source code: ",(0,i.jsx)(o.a,{href:"https://github.com/facebook/lexical/tree/main/examples/react-rich-collab",children:"examples/react-rich-collab"})]}),"\n",(0,i.jsx)("iframe",{width:"100%",height:"600",src:"https://stackblitz.com/github/facebook/lexical/tree/main/examples/react-rich-collab?embed=1&file=src%2FApp.tsx&terminalHeight=0&ctl=1&showSidebar=0&devtoolsheight=0&view=preview",sandbox:"allow-forms allow-modals allow-popups allow-popups-to-escape-sandbox allow-presentation allow-same-origin allow-scripts"}),"\n",(0,i.jsx)(o.h2,{id:"building-collaborative-plugins",children:"Building collaborative plugins"}),"\n",(0,i.jsxs)(o.p,{children:[(0,i.jsx)(o.a,{href:"https://playground.lexical.dev/",children:"Lexical Playground"})," features set of the collaboration enabled plugins that integrate with primary document via ",(0,i.jsx)(o.code,{children:"useCollaborationContext()"})," hook. Notable mentions:"]}),"\n",(0,i.jsxs)(o.ul,{children:["\n",(0,i.jsxs)(o.li,{children:[(0,i.jsx)(o.a,{href:"https://github.com/facebook/lexical/tree/v0.14.5/packages/lexical-playground/src/plugins/CommentPlugin",children:(0,i.jsx)(o.code,{children:"CommentPlugin"})})," - features use of the separate provider and Yjs room to sync comments."]}),"\n",(0,i.jsxs)(o.li,{children:[(0,i.jsx)(o.a,{href:"https://github.com/facebook/lexical/blob/v0.14.5/packages/lexical-playground/src/nodes/ImageComponent.tsx#L390",children:(0,i.jsx)(o.code,{children:"ImageComponent"})})," - features use of the ",(0,i.jsx)(o.code,{children:"LexicalNestedComposer"})," paired with ",(0,i.jsx)(o.code,{children:"CollaborationPlugin"}),"."]}),"\n",(0,i.jsxs)(o.li,{children:[(0,i.jsx)(o.a,{href:"https://github.com/facebook/lexical/blob/v0.14.5/packages/lexical-playground/src/nodes/PollComponent.tsx#L78",children:(0,i.jsx)(o.code,{children:"PollOptionComponent"})})," - showcases poll implementation using ",(0,i.jsx)(o.code,{children:"clientID"})," from Yjs context."]}),"\n",(0,i.jsxs)(o.li,{children:[(0,i.jsx)(o.a,{href:"https://github.com/facebook/lexical/tree/v0.14.5/packages/lexical-playground/src/plugins/StickyPlugin",children:(0,i.jsx)(o.code,{children:"StickyPlugin"})})," - features use of the ",(0,i.jsx)(o.code,{children:"LexicalNestedComposer"})," paired with ",(0,i.jsx)(o.code,{children:"CollaborationPlugin"})," as well as sticky note position real-time sync."]}),"\n"]}),"\n",(0,i.jsx)(o.admonition,{type:"note",children:(0,i.jsx)(o.p,{children:'While these "playground" plugins aren\'t production ready - they serve as a great example of collaborative Lexical capabilities as well as provide a good starting point.'})}),"\n",(0,i.jsx)(o.h2,{id:"yjs-providers",children:"Yjs providers"}),"\n",(0,i.jsx)(o.p,{children:"Setting up the communication between clients, managing awareness information, and storing shared data for offline usage is quite a hassle. Providers manage all that for you and are the perfect starting point for your collaborative app."}),"\n",(0,i.jsxs)(o.p,{children:["See ",(0,i.jsx)(o.a,{href:"https://docs.yjs.dev/ecosystem/connection-provider",children:"Yjs Website"})," for the list of the officially endorsed providers. Although it's not an exhaustive one."]})]})}function h(e={}){const{wrapper:o}={...(0,n.R)(),...e.components};return o?(0,i.jsx)(o,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},71184:(e,o,t)=>{t.d(o,{R:()=>a,x:()=>l});var i=t(14041);const n={},r=i.createContext(n);function a(e){const o=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function l(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),i.createElement(r.Provider,{value:o},e.children)}}}]);