"use strict";(self.webpackChunk_lexical_website=self.webpackChunk_lexical_website||[]).push([[4593],{54347:(e,s,i)=>{i.r(s),i.d(s,{assets:()=>c,contentTitle:()=>t,default:()=>h,frontMatter:()=>r,metadata:()=>d,toc:()=>a});var n=i(31085),l=i(71184);const r={id:"lexical.TabNode",title:"Class: TabNode",custom_edit_url:null},t=void 0,d={id:"api/classes/lexical.TabNode",title:"Class: TabNode",description:"lexical.TabNode",source:"@site/docs/api/classes/lexical.TabNode.md",sourceDirName:"api/classes",slug:"/api/classes/lexical.TabNode",permalink:"/docs/api/classes/lexical.TabNode",draft:!1,unlisted:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"lexical.TabNode",title:"Class: TabNode",custom_edit_url:null},sidebar:"api",previous:{title:"RootNode",permalink:"/docs/api/classes/lexical.RootNode"},next:{title:"TextNode",permalink:"/docs/api/classes/lexical.TextNode"}},c={},a=[{value:"Hierarchy",id:"hierarchy",level:2},{value:"Constructors",id:"constructors",level:2},{value:"constructor",id:"constructor",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Overrides",id:"overrides",level:4},{value:"Defined in",id:"defined-in",level:4},{value:"Methods",id:"methods",level:2},{value:"afterCloneFrom",id:"afterclonefrom",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Overrides",id:"overrides-1",level:4},{value:"Defined in",id:"defined-in-1",level:4},{value:"canInsertTextAfter",id:"caninserttextafter",level:3},{value:"Returns",id:"returns-2",level:4},{value:"Overrides",id:"overrides-2",level:4},{value:"Defined in",id:"defined-in-2",level:4},{value:"canInsertTextBefore",id:"caninserttextbefore",level:3},{value:"Returns",id:"returns-3",level:4},{value:"Overrides",id:"overrides-3",level:4},{value:"Defined in",id:"defined-in-3",level:4},{value:"exportJSON",id:"exportjson",level:3},{value:"Returns",id:"returns-4",level:4},{value:"Overrides",id:"overrides-4",level:4},{value:"Defined in",id:"defined-in-4",level:4},{value:"setDetail",id:"setdetail",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Overrides",id:"overrides-5",level:4},{value:"Defined in",id:"defined-in-5",level:4},{value:"setMode",id:"setmode",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-6",level:4},{value:"Overrides",id:"overrides-6",level:4},{value:"Defined in",id:"defined-in-6",level:4},{value:"setTextContent",id:"settextcontent",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-7",level:4},{value:"Overrides",id:"overrides-7",level:4},{value:"Defined in",id:"defined-in-7",level:4},{value:"clone",id:"clone",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-8",level:4},{value:"Overrides",id:"overrides-8",level:4},{value:"Defined in",id:"defined-in-8",level:4},{value:"getType",id:"gettype",level:3},{value:"Returns",id:"returns-9",level:4},{value:"Overrides",id:"overrides-9",level:4},{value:"Defined in",id:"defined-in-9",level:4},{value:"importDOM",id:"importdom",level:3},{value:"Returns",id:"returns-10",level:4},{value:"Overrides",id:"overrides-10",level:4},{value:"Defined in",id:"defined-in-10",level:4},{value:"importJSON",id:"importjson",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-11",level:4},{value:"Overrides",id:"overrides-11",level:4},{value:"Defined in",id:"defined-in-11",level:4}];function o(e){const s={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.a,{href:"/docs/api/modules/lexical",children:"lexical"}),".TabNode"]}),"\n",(0,n.jsx)(s.h2,{id:"hierarchy",children:"Hierarchy"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.a,{href:"/docs/api/classes/lexical.TextNode",children:(0,n.jsx)(s.code,{children:"TextNode"})})}),"\n",(0,n.jsxs)(s.p,{children:["\u21b3 ",(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.code,{children:"TabNode"})})]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(s.h2,{id:"constructors",children:"Constructors"}),"\n",(0,n.jsx)(s.h3,{id:"constructor",children:"constructor"}),"\n",(0,n.jsxs)(s.p,{children:["\u2022 ",(0,n.jsx)(s.strong,{children:"new TabNode"}),"(",(0,n.jsx)(s.code,{children:"key?"}),"): ",(0,n.jsx)(s.a,{href:"/docs/api/classes/lexical.TabNode",children:(0,n.jsx)(s.code,{children:"TabNode"})})]}),"\n",(0,n.jsx)(s.h4,{id:"parameters",children:"Parameters"}),"\n",(0,n.jsxs)(s.table,{children:[(0,n.jsx)(s.thead,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(s.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(s.tbody,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{style:{textAlign:"left"},children:(0,n.jsx)(s.code,{children:"key?"})}),(0,n.jsx)(s.td,{style:{textAlign:"left"},children:(0,n.jsx)(s.code,{children:"string"})})]})})]}),"\n",(0,n.jsx)(s.h4,{id:"returns",children:"Returns"}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.a,{href:"/docs/api/classes/lexical.TabNode",children:(0,n.jsx)(s.code,{children:"TabNode"})})}),"\n",(0,n.jsx)(s.h4,{id:"overrides",children:"Overrides"}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.a,{href:"/docs/api/classes/lexical.TextNode",children:"TextNode"}),".",(0,n.jsx)(s.a,{href:"/docs/api/classes/lexical.TextNode#constructor",children:"constructor"})]}),"\n",(0,n.jsx)(s.h4,{id:"defined-in",children:"Defined in"}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalTabNode.ts#L41",children:"packages/lexical/src/nodes/LexicalTabNode.ts:41"})}),"\n",(0,n.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(s.h3,{id:"afterclonefrom",children:"afterCloneFrom"}),"\n",(0,n.jsxs)(s.p,{children:["\u25b8 ",(0,n.jsx)(s.strong,{children:"afterCloneFrom"}),"(",(0,n.jsx)(s.code,{children:"prevNode"}),"): ",(0,n.jsx)(s.code,{children:"void"})]}),"\n",(0,n.jsxs)(s.p,{children:["Perform any state updates on the clone of prevNode that are not already\r\nhandled by the constructor call in the static clone method. If you have\r\nstate to update in your clone that is not handled directly by the\r\nconstructor, it is advisable to override this method but it is required\r\nto include a call to ",(0,n.jsx)(s.code,{children:"super.afterCloneFrom(prevNode)"})," in your\r\nimplementation. This is only intended to be called by\r\n",(0,n.jsx)(s.a,{href:"/docs/api/modules/lexical#clonewithproperties",children:"$cloneWithProperties"})," function or via a super call."]}),"\n",(0,n.jsx)(s.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,n.jsxs)(s.table,{children:[(0,n.jsx)(s.thead,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(s.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(s.tbody,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{style:{textAlign:"left"},children:(0,n.jsx)(s.code,{children:"prevNode"})}),(0,n.jsx)(s.td,{style:{textAlign:"left"},children:(0,n.jsx)(s.code,{children:"this"})})]})})]}),"\n",(0,n.jsx)(s.h4,{id:"returns-1",children:"Returns"}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.code,{children:"void"})}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.code,{children:"Example"})})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",children:"class ClassesTextNode extends TextNode {\r\n  // Not shown: static getType, static importJSON, exportJSON, createDOM, updateDOM\r\n  __classes = new Set<string>();\r\n  static clone(node: ClassesTextNode): ClassesTextNode {\r\n    // The inherited TextNode constructor is used here, so\r\n    // classes is not set by this method.\r\n    return new ClassesTextNode(node.__text, node.__key);\r\n  }\r\n  afterCloneFrom(node: this): void {\r\n    // This calls TextNode.afterCloneFrom and LexicalNode.afterCloneFrom\r\n    // for necessary state updates\r\n    super.afterCloneFrom(node);\r\n    this.__addClasses(node.__classes);\r\n  }\r\n  // This method is a private implementation detail, it is not\r\n  // suitable for the public API because it does not call getWritable\r\n  __addClasses(classNames: Iterable<string>): this {\r\n    for (const className of classNames) {\r\n      this.__classes.add(className);\r\n    }\r\n    return this;\r\n  }\r\n  addClass(...classNames: string[]): this {\r\n    return this.getWritable().__addClasses(classNames);\r\n  }\r\n  removeClass(...classNames: string[]): this {\r\n    const node = this.getWritable();\r\n    for (const className of classNames) {\r\n      this.__classes.delete(className);\r\n    }\r\n    return this;\r\n  }\r\n  getClasses(): Set<string> {\r\n    return this.getLatest().__classes;\r\n  }\r\n}\n"})}),"\n",(0,n.jsx)(s.h4,{id:"overrides-1",children:"Overrides"}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.a,{href:"/docs/api/classes/lexical.TextNode",children:"TextNode"}),".",(0,n.jsx)(s.a,{href:"/docs/api/classes/lexical.TextNode#afterclonefrom",children:"afterCloneFrom"})]}),"\n",(0,n.jsx)(s.h4,{id:"defined-in-1",children:"Defined in"}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalTabNode.ts#L35",children:"packages/lexical/src/nodes/LexicalTabNode.ts:35"})}),"\n",(0,n.jsx)(s.hr,{}),"\n",(0,n.jsx)(s.h3,{id:"caninserttextafter",children:"canInsertTextAfter"}),"\n",(0,n.jsxs)(s.p,{children:["\u25b8 ",(0,n.jsx)(s.strong,{children:"canInsertTextAfter"}),"(): ",(0,n.jsx)(s.code,{children:"boolean"})]}),"\n",(0,n.jsx)(s.p,{children:"This method is meant to be overriden by TextNode subclasses to control the behavior of those nodes\r\nwhen a user event would cause text to be inserted after them in the editor. If true, Lexical will attempt\r\nto insert text into this node. If false, it will insert the text in a new sibling node."}),"\n",(0,n.jsx)(s.h4,{id:"returns-2",children:"Returns"}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.code,{children:"boolean"})}),"\n",(0,n.jsx)(s.p,{children:"true if text can be inserted after the node, false otherwise."}),"\n",(0,n.jsx)(s.h4,{id:"overrides-2",children:"Overrides"}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.a,{href:"/docs/api/classes/lexical.TextNode",children:"TextNode"}),".",(0,n.jsx)(s.a,{href:"/docs/api/classes/lexical.TextNode#caninserttextafter",children:"canInsertTextAfter"})]}),"\n",(0,n.jsx)(s.h4,{id:"defined-in-2",children:"Defined in"}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalTabNode.ts#L81",children:"packages/lexical/src/nodes/LexicalTabNode.ts:81"})}),"\n",(0,n.jsx)(s.hr,{}),"\n",(0,n.jsx)(s.h3,{id:"caninserttextbefore",children:"canInsertTextBefore"}),"\n",(0,n.jsxs)(s.p,{children:["\u25b8 ",(0,n.jsx)(s.strong,{children:"canInsertTextBefore"}),"(): ",(0,n.jsx)(s.code,{children:"boolean"})]}),"\n",(0,n.jsx)(s.p,{children:"This method is meant to be overriden by TextNode subclasses to control the behavior of those nodes\r\nwhen a user event would cause text to be inserted before them in the editor. If true, Lexical will attempt\r\nto insert text into this node. If false, it will insert the text in a new sibling node."}),"\n",(0,n.jsx)(s.h4,{id:"returns-3",children:"Returns"}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.code,{children:"boolean"})}),"\n",(0,n.jsx)(s.p,{children:"true if text can be inserted before the node, false otherwise."}),"\n",(0,n.jsx)(s.h4,{id:"overrides-3",children:"Overrides"}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.a,{href:"/docs/api/classes/lexical.TextNode",children:"TextNode"}),".",(0,n.jsx)(s.a,{href:"/docs/api/classes/lexical.TextNode#caninserttextbefore",children:"canInsertTextBefore"})]}),"\n",(0,n.jsx)(s.h4,{id:"defined-in-3",children:"Defined in"}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalTabNode.ts#L77",children:"packages/lexical/src/nodes/LexicalTabNode.ts:77"})}),"\n",(0,n.jsx)(s.hr,{}),"\n",(0,n.jsx)(s.h3,{id:"exportjson",children:"exportJSON"}),"\n",(0,n.jsxs)(s.p,{children:["\u25b8 ",(0,n.jsx)(s.strong,{children:"exportJSON"}),"(): ",(0,n.jsx)(s.a,{href:"/docs/api/modules/lexical#serializedtextnode",children:(0,n.jsx)(s.code,{children:"SerializedTextNode"})})]}),"\n",(0,n.jsxs)(s.p,{children:["Controls how the this node is serialized to JSON. This is important for\r\ncopy and paste between Lexical editors sharing the same namespace. It's also important\r\nif you're serializing to JSON for persistent storage somewhere.\r\nSee ",(0,n.jsx)(s.a,{href:"https://lexical.dev/docs/concepts/serialization#lexical---html",children:"Serialization & Deserialization"}),"."]}),"\n",(0,n.jsx)(s.h4,{id:"returns-4",children:"Returns"}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.a,{href:"/docs/api/modules/lexical#serializedtextnode",children:(0,n.jsx)(s.code,{children:"SerializedTextNode"})})}),"\n",(0,n.jsx)(s.h4,{id:"overrides-4",children:"Overrides"}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.a,{href:"/docs/api/classes/lexical.TextNode",children:"TextNode"}),".",(0,n.jsx)(s.a,{href:"/docs/api/classes/lexical.TextNode#exportjson",children:"exportJSON"})]}),"\n",(0,n.jsx)(s.h4,{id:"defined-in-4",children:"Defined in"}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalTabNode.ts#L57",children:"packages/lexical/src/nodes/LexicalTabNode.ts:57"})}),"\n",(0,n.jsx)(s.hr,{}),"\n",(0,n.jsx)(s.h3,{id:"setdetail",children:"setDetail"}),"\n",(0,n.jsxs)(s.p,{children:["\u25b8 ",(0,n.jsx)(s.strong,{children:"setDetail"}),"(",(0,n.jsx)(s.code,{children:"_detail"}),"): ",(0,n.jsx)(s.code,{children:"this"})]}),"\n",(0,n.jsxs)(s.p,{children:["Sets the node detail to the provided TextDetailType or 32-bit integer. Note that the TextDetailType\r\nversion of the argument can only specify one detail value and doing so will remove all other detail values that\r\nmay be applied to the node. For toggling behavior, consider using ",(0,n.jsx)(s.a,{href:"/docs/api/classes/lexical.TextNode#toggledirectionless",children:"TextNode.toggleDirectionless"}),"\r\nor ",(0,n.jsx)(s.a,{href:"/docs/api/classes/lexical.TextNode#toggleunmergeable",children:"TextNode.toggleUnmergeable"})]}),"\n",(0,n.jsx)(s.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,n.jsxs)(s.table,{children:[(0,n.jsx)(s.thead,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(s.th,{style:{textAlign:"left"},children:"Type"}),(0,n.jsx)(s.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,n.jsx)(s.tbody,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{style:{textAlign:"left"},children:(0,n.jsx)(s.code,{children:"_detail"})}),(0,n.jsxs)(s.td,{style:{textAlign:"left"},children:[(0,n.jsx)(s.code,{children:"number"})," | ",(0,n.jsx)(s.code,{children:"TextDetailType"})]}),(0,n.jsx)(s.td,{style:{textAlign:"left"},children:"TextDetailType or 32-bit integer representing the node detail."})]})})]}),"\n",(0,n.jsx)(s.h4,{id:"returns-5",children:"Returns"}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.code,{children:"this"})}),"\n",(0,n.jsxs)(s.p,{children:["this TextNode.\r\n// TODO 0.12 This should just be a ",(0,n.jsx)(s.code,{children:"string"}),"."]}),"\n",(0,n.jsx)(s.h4,{id:"overrides-5",children:"Overrides"}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.a,{href:"/docs/api/classes/lexical.TextNode",children:"TextNode"}),".",(0,n.jsx)(s.a,{href:"/docs/api/classes/lexical.TextNode#setdetail",children:"setDetail"})]}),"\n",(0,n.jsx)(s.h4,{id:"defined-in-5",children:"Defined in"}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalTabNode.ts#L69",children:"packages/lexical/src/nodes/LexicalTabNode.ts:69"})}),"\n",(0,n.jsx)(s.hr,{}),"\n",(0,n.jsx)(s.h3,{id:"setmode",children:"setMode"}),"\n",(0,n.jsxs)(s.p,{children:["\u25b8 ",(0,n.jsx)(s.strong,{children:"setMode"}),"(",(0,n.jsx)(s.code,{children:"_type"}),"): ",(0,n.jsx)(s.code,{children:"this"})]}),"\n",(0,n.jsx)(s.p,{children:"Sets the mode of the node."}),"\n",(0,n.jsx)(s.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,n.jsxs)(s.table,{children:[(0,n.jsx)(s.thead,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(s.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(s.tbody,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{style:{textAlign:"left"},children:(0,n.jsx)(s.code,{children:"_type"})}),(0,n.jsx)(s.td,{style:{textAlign:"left"},children:(0,n.jsx)(s.a,{href:"/docs/api/modules/lexical#textmodetype",children:(0,n.jsx)(s.code,{children:"TextModeType"})})})]})})]}),"\n",(0,n.jsx)(s.h4,{id:"returns-6",children:"Returns"}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.code,{children:"this"})}),"\n",(0,n.jsx)(s.p,{children:"this TextNode."}),"\n",(0,n.jsx)(s.h4,{id:"overrides-6",children:"Overrides"}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.a,{href:"/docs/api/classes/lexical.TextNode",children:"TextNode"}),".",(0,n.jsx)(s.a,{href:"/docs/api/classes/lexical.TextNode#setmode",children:"setMode"})]}),"\n",(0,n.jsx)(s.h4,{id:"defined-in-6",children:"Defined in"}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalTabNode.ts#L73",children:"packages/lexical/src/nodes/LexicalTabNode.ts:73"})}),"\n",(0,n.jsx)(s.hr,{}),"\n",(0,n.jsx)(s.h3,{id:"settextcontent",children:"setTextContent"}),"\n",(0,n.jsxs)(s.p,{children:["\u25b8 ",(0,n.jsx)(s.strong,{children:"setTextContent"}),"(",(0,n.jsx)(s.code,{children:"_text"}),"): ",(0,n.jsx)(s.code,{children:"this"})]}),"\n",(0,n.jsx)(s.p,{children:"Sets the text content of the node."}),"\n",(0,n.jsx)(s.h4,{id:"parameters-4",children:"Parameters"}),"\n",(0,n.jsxs)(s.table,{children:[(0,n.jsx)(s.thead,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(s.th,{style:{textAlign:"left"},children:"Type"}),(0,n.jsx)(s.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,n.jsx)(s.tbody,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{style:{textAlign:"left"},children:(0,n.jsx)(s.code,{children:"_text"})}),(0,n.jsx)(s.td,{style:{textAlign:"left"},children:(0,n.jsx)(s.code,{children:"string"})}),(0,n.jsx)(s.td,{style:{textAlign:"left"},children:"the string to set as the text value of the node."})]})})]}),"\n",(0,n.jsx)(s.h4,{id:"returns-7",children:"Returns"}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.code,{children:"this"})}),"\n",(0,n.jsx)(s.p,{children:"this TextNode."}),"\n",(0,n.jsx)(s.h4,{id:"overrides-7",children:"Overrides"}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.a,{href:"/docs/api/classes/lexical.TextNode",children:"TextNode"}),".",(0,n.jsx)(s.a,{href:"/docs/api/classes/lexical.TextNode#settextcontent",children:"setTextContent"})]}),"\n",(0,n.jsx)(s.h4,{id:"defined-in-7",children:"Defined in"}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalTabNode.ts#L65",children:"packages/lexical/src/nodes/LexicalTabNode.ts:65"})}),"\n",(0,n.jsx)(s.hr,{}),"\n",(0,n.jsx)(s.h3,{id:"clone",children:"clone"}),"\n",(0,n.jsxs)(s.p,{children:["\u25b8 ",(0,n.jsx)(s.strong,{children:"clone"}),"(",(0,n.jsx)(s.code,{children:"node"}),"): ",(0,n.jsx)(s.a,{href:"/docs/api/classes/lexical.TabNode",children:(0,n.jsx)(s.code,{children:"TabNode"})})]}),"\n",(0,n.jsx)(s.p,{children:"Clones this node, creating a new node with a different key\r\nand adding it to the EditorState (but not attaching it anywhere!). All nodes must\r\nimplement this method."}),"\n",(0,n.jsx)(s.h4,{id:"parameters-5",children:"Parameters"}),"\n",(0,n.jsxs)(s.table,{children:[(0,n.jsx)(s.thead,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(s.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(s.tbody,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{style:{textAlign:"left"},children:(0,n.jsx)(s.code,{children:"node"})}),(0,n.jsx)(s.td,{style:{textAlign:"left"},children:(0,n.jsx)(s.a,{href:"/docs/api/classes/lexical.TabNode",children:(0,n.jsx)(s.code,{children:"TabNode"})})})]})})]}),"\n",(0,n.jsx)(s.h4,{id:"returns-8",children:"Returns"}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.a,{href:"/docs/api/classes/lexical.TabNode",children:(0,n.jsx)(s.code,{children:"TabNode"})})}),"\n",(0,n.jsx)(s.h4,{id:"overrides-8",children:"Overrides"}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.a,{href:"/docs/api/classes/lexical.TextNode",children:"TextNode"}),".",(0,n.jsx)(s.a,{href:"/docs/api/classes/lexical.TextNode#clone",children:"clone"})]}),"\n",(0,n.jsx)(s.h4,{id:"defined-in-8",children:"Defined in"}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalTabNode.ts#L31",children:"packages/lexical/src/nodes/LexicalTabNode.ts:31"})}),"\n",(0,n.jsx)(s.hr,{}),"\n",(0,n.jsx)(s.h3,{id:"gettype",children:"getType"}),"\n",(0,n.jsxs)(s.p,{children:["\u25b8 ",(0,n.jsx)(s.strong,{children:"getType"}),"(): ",(0,n.jsx)(s.code,{children:"string"})]}),"\n",(0,n.jsx)(s.p,{children:"Returns the string type of this node. Every node must\r\nimplement this and it MUST BE UNIQUE amongst nodes registered\r\non the editor."}),"\n",(0,n.jsx)(s.h4,{id:"returns-9",children:"Returns"}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.code,{children:"string"})}),"\n",(0,n.jsx)(s.h4,{id:"overrides-9",children:"Overrides"}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.a,{href:"/docs/api/classes/lexical.TextNode",children:"TextNode"}),".",(0,n.jsx)(s.a,{href:"/docs/api/classes/lexical.TextNode#gettype-1",children:"getType"})]}),"\n",(0,n.jsx)(s.h4,{id:"defined-in-9",children:"Defined in"}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalTabNode.ts#L27",children:"packages/lexical/src/nodes/LexicalTabNode.ts:27"})}),"\n",(0,n.jsx)(s.hr,{}),"\n",(0,n.jsx)(s.h3,{id:"importdom",children:"importDOM"}),"\n",(0,n.jsxs)(s.p,{children:["\u25b8 ",(0,n.jsx)(s.strong,{children:"importDOM"}),"(): ",(0,n.jsx)(s.code,{children:"null"})," | ",(0,n.jsx)(s.a,{href:"/docs/api/modules/lexical#domconversionmap",children:(0,n.jsx)(s.code,{children:"DOMConversionMap"})})]}),"\n",(0,n.jsx)(s.h4,{id:"returns-10",children:"Returns"}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"null"})," | ",(0,n.jsx)(s.a,{href:"/docs/api/modules/lexical#domconversionmap",children:(0,n.jsx)(s.code,{children:"DOMConversionMap"})})]}),"\n",(0,n.jsx)(s.h4,{id:"overrides-10",children:"Overrides"}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.a,{href:"/docs/api/classes/lexical.TextNode",children:"TextNode"}),".",(0,n.jsx)(s.a,{href:"/docs/api/classes/lexical.TextNode#importdom",children:"importDOM"})]}),"\n",(0,n.jsx)(s.h4,{id:"defined-in-10",children:"Defined in"}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalTabNode.ts#L46",children:"packages/lexical/src/nodes/LexicalTabNode.ts:46"})}),"\n",(0,n.jsx)(s.hr,{}),"\n",(0,n.jsx)(s.h3,{id:"importjson",children:"importJSON"}),"\n",(0,n.jsxs)(s.p,{children:["\u25b8 ",(0,n.jsx)(s.strong,{children:"importJSON"}),"(",(0,n.jsx)(s.code,{children:"serializedTabNode"}),"): ",(0,n.jsx)(s.a,{href:"/docs/api/classes/lexical.TabNode",children:(0,n.jsx)(s.code,{children:"TabNode"})})]}),"\n",(0,n.jsxs)(s.p,{children:["Controls how the this node is deserialized from JSON. This is usually boilerplate,\r\nbut provides an abstraction between the node implementation and serialized interface that can\r\nbe important if you ever make breaking changes to a node schema (by adding or removing properties).\r\nSee ",(0,n.jsx)(s.a,{href:"https://lexical.dev/docs/concepts/serialization#lexical---html",children:"Serialization & Deserialization"}),"."]}),"\n",(0,n.jsx)(s.h4,{id:"parameters-6",children:"Parameters"}),"\n",(0,n.jsxs)(s.table,{children:[(0,n.jsx)(s.thead,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(s.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(s.tbody,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{style:{textAlign:"left"},children:(0,n.jsx)(s.code,{children:"serializedTabNode"})}),(0,n.jsx)(s.td,{style:{textAlign:"left"},children:(0,n.jsx)(s.a,{href:"/docs/api/modules/lexical#serializedtextnode",children:(0,n.jsx)(s.code,{children:"SerializedTextNode"})})})]})})]}),"\n",(0,n.jsx)(s.h4,{id:"returns-11",children:"Returns"}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.a,{href:"/docs/api/classes/lexical.TabNode",children:(0,n.jsx)(s.code,{children:"TabNode"})})}),"\n",(0,n.jsx)(s.h4,{id:"overrides-11",children:"Overrides"}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.a,{href:"/docs/api/classes/lexical.TextNode",children:"TextNode"}),".",(0,n.jsx)(s.a,{href:"/docs/api/classes/lexical.TextNode#importjson",children:"importJSON"})]}),"\n",(0,n.jsx)(s.h4,{id:"defined-in-11",children:"Defined in"}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/nodes/LexicalTabNode.ts#L50",children:"packages/lexical/src/nodes/LexicalTabNode.ts:50"})})]})}function h(e={}){const{wrapper:s}={...(0,l.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(o,{...e})}):o(e)}},71184:(e,s,i)=>{i.d(s,{R:()=>t,x:()=>d});var n=i(14041);const l={},r=n.createContext(l);function t(e){const s=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:t(e.components),n.createElement(r.Provider,{value:s},e.children)}}}]);